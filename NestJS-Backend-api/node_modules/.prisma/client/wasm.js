
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  isActive: 'isActive',
  avatar: 'avatar',
  isSupervisor: 'isSupervisor',
  teacherRegisteredById: 'teacherRegisteredById',
  studentRegisteredById: 'studentRegisteredById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  firstName: 'firstName',
  lastName: 'lastName',
  dateOfBirth: 'dateOfBirth',
  phone: 'phone',
  street: 'street',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  studentId: 'studentId',
  grade: 'grade',
  gpa: 'gpa',
  enrollmentDate: 'enrollmentDate',
  graduationDate: 'graduationDate',
  major: 'major',
  minor: 'minor',
  employeeId: 'employeeId',
  department: 'department',
  position: 'position',
  hireDate: 'hireDate',
  specialization: 'specialization',
  officeLocation: 'officeLocation',
  officeHours: 'officeHours',
  advisoryTeacherId: 'advisoryTeacherId',
  emergencyContactName: 'emergencyContactName',
  emergencyContactRelationship: 'emergencyContactRelationship',
  emergencyContactPhone: 'emergencyContactPhone',
  emergencyContactEmail: 'emergencyContactEmail',
  theme: 'theme',
  language: 'language',
  timezone: 'timezone',
  emailNotifications: 'emailNotifications',
  pushNotifications: 'pushNotifications',
  smsNotifications: 'smsNotifications',
  profileVisibility: 'profileVisibility',
  showEmail: 'showEmail',
  showPhone: 'showPhone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserActivityScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  createdAt: 'createdAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  permissionId: 'permissionId',
  requiresSupervisor: 'requiresSupervisor'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  departmentHeadId: 'departmentHeadId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  credits: 'credits',
  scheduleDays: 'scheduleDays',
  startTime: 'startTime',
  endTime: 'endTime',
  location: 'location',
  building: 'building',
  room: 'room',
  createdById: 'createdById',
  instructorId: 'instructorId',
  semester: 'semester',
  year: 'year',
  capacity: 'capacity',
  enrolled: 'enrolled',
  status: 'status',
  category: 'category',
  departmentId: 'departmentId',
  level: 'level',
  startDate: 'startDate',
  endDate: 'endDate',
  enrollmentDeadline: 'enrollmentDeadline',
  syllabusUrl: 'syllabusUrl',
  studyPlan: 'studyPlan',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  enrolledById: 'enrolledById',
  enrollmentDate: 'enrollmentDate',
  status: 'status',
  finalGrade: 'finalGrade',
  finalPoints: 'finalPoints',
  completed: 'completed',
  total: 'total',
  currentGrade: 'currentGrade',
  attendance: 'attendance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  type: 'type',
  assignedDate: 'assignedDate',
  dueDate: 'dueDate',
  maxPoints: 'maxPoints',
  isGroupWork: 'isGroupWork',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AssignmentSubmissionScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  studentId: 'studentId',
  submittedAt: 'submittedAt',
  textContent: 'textContent'
};

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId',
  assignmentId: 'assignmentId',
  submissionId: 'submissionId',
  letterGrade: 'letterGrade',
  score: 'score',
  maxPoints: 'maxPoints',
  percentage: 'percentage',
  gradedById: 'gradedById',
  gradedDate: 'gradedDate',
  gradingPeriod: 'gradingPeriod',
  feedback: 'feedback',
  isExtraCredit: 'isExtraCredit',
  weight: 'weight',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseMaterialScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  uploadedById: 'uploadedById',
  title: 'title',
  description: 'description',
  type: 'type',
  uploadDate: 'uploadDate',
  isRequired: 'isRequired',
  fileId: 'fileId',
  url: 'url',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  createdById: 'createdById',
  title: 'title',
  description: 'description',
  duration: 'duration',
  totalQuestions: 'totalQuestions',
  maxPoints: 'maxPoints',
  dueDate: 'dueDate',
  isTimed: 'isTimed',
  attemptsAllowed: 'attemptsAllowed',
  questionsData: 'questionsData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  quizId: 'quizId',
  studentId: 'studentId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  score: 'score',
  maxPoints: 'maxPoints',
  answers: 'answers'
};

exports.Prisma.CourseAnnouncementScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  authorId: 'authorId',
  title: 'title',
  content: 'content',
  priority: 'priority',
  isImportant: 'isImportant',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClassSessionScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  date: 'date',
  topic: 'topic',
  location: 'location',
  notes: 'notes',
  cancelled: 'cancelled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentAttendanceScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  studentId: 'studentId',
  status: 'status',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.TeacherCourseAssignmentScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  courseId: 'courseId',
  assignedById: 'assignedById',
  assignedDate: 'assignedDate',
  isActive: 'isActive',
  notes: 'notes'
};

exports.Prisma.AdvisoryAssignmentScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  advisoryTeacherId: 'advisoryTeacherId',
  assignedById: 'assignedById',
  assignedDate: 'assignedDate',
  isActive: 'isActive',
  notes: 'notes'
};

exports.Prisma.FileAttachmentScalarFieldEnum = {
  id: 'id',
  filename: 'filename',
  originalName: 'originalName',
  mimeType: 'mimeType',
  fileSize: 'fileSize',
  path: 'path',
  uploadedById: 'uploadedById',
  createdAt: 'createdAt'
};

exports.Prisma.PageConfigurationScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  userType: 'userType',
  layoutType: 'layoutType',
  layoutClass: 'layoutClass',
  sections: 'sections',
  requiresAuth: 'requiresAuth',
  permissions: 'permissions',
  requiresSupervisor: 'requiresSupervisor',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  priority: 'priority',
  isRead: 'isRead',
  readAt: 'readAt',
  courseId: 'courseId',
  assignmentId: 'assignmentId',
  gradeId: 'gradeId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SystemSettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  type: 'type',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  isActive: 'isActive',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  SUPERVISOR_TEACHER: 'SUPERVISOR_TEACHER',
  ADMIN: 'ADMIN'
};

exports.ThemeMode = exports.$Enums.ThemeMode = {
  LIGHT: 'LIGHT',
  DARK: 'DARK',
  SYSTEM: 'SYSTEM'
};

exports.Visibility = exports.$Enums.Visibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  LIMITED: 'LIMITED'
};

exports.CourseStatus = exports.$Enums.CourseStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  UPCOMING: 'UPCOMING',
  DRAFT: 'DRAFT'
};

exports.CourseLevel = exports.$Enums.CourseLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

exports.EnrollmentStatus = exports.$Enums.EnrollmentStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  PENDING: 'PENDING',
  WITHDRAWN: 'WITHDRAWN'
};

exports.AssignmentType = exports.$Enums.AssignmentType = {
  HOMEWORK: 'HOMEWORK',
  PROJECT: 'PROJECT',
  ESSAY: 'ESSAY',
  LAB: 'LAB',
  QUIZ: 'QUIZ',
  EXAM: 'EXAM',
  PRESENTATION: 'PRESENTATION',
  DISCUSSION: 'DISCUSSION',
  PARTICIPATION: 'PARTICIPATION'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  DRAFT: 'DRAFT',
  ASSIGNED: 'ASSIGNED',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

exports.MaterialType = exports.$Enums.MaterialType = {
  SYLLABUS: 'SYLLABUS',
  SLIDES: 'SLIDES',
  HANDOUT: 'HANDOUT',
  READING: 'READING',
  REFERENCE: 'REFERENCE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  LINK: 'LINK',
  SOFTWARE: 'SOFTWARE',
  OTHER: 'OTHER'
};

exports.AnnouncementPriority = exports.$Enums.AnnouncementPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.AttendanceStatus = exports.$Enums.AttendanceStatus = {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED',
  PARTIAL: 'PARTIAL'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  ASSIGNMENT_DUE: 'ASSIGNMENT_DUE',
  GRADE_POSTED: 'GRADE_POSTED',
  COURSE_ANNOUNCEMENT: 'COURSE_ANNOUNCEMENT',
  ENROLLMENT_CONFIRMED: 'ENROLLMENT_CONFIRMED',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  REMINDER: 'REMINDER',
  MESSAGE: 'MESSAGE'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  UserActivity: 'UserActivity',
  Permission: 'Permission',
  RolePermission: 'RolePermission',
  Department: 'Department',
  Course: 'Course',
  Enrollment: 'Enrollment',
  Assignment: 'Assignment',
  AssignmentSubmission: 'AssignmentSubmission',
  Grade: 'Grade',
  CourseMaterial: 'CourseMaterial',
  Quiz: 'Quiz',
  QuizAttempt: 'QuizAttempt',
  CourseAnnouncement: 'CourseAnnouncement',
  ClassSession: 'ClassSession',
  StudentAttendance: 'StudentAttendance',
  TeacherCourseAssignment: 'TeacherCourseAssignment',
  AdvisoryAssignment: 'AdvisoryAssignment',
  FileAttachment: 'FileAttachment',
  PageConfiguration: 'PageConfiguration',
  Notification: 'Notification',
  SystemSetting: 'SystemSetting',
  AuditLog: 'AuditLog',
  Session: 'Session'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
