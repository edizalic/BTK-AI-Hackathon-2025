
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserProfile
 * 
 */
export type UserProfile = $Result.DefaultSelection<Prisma.$UserProfilePayload>
/**
 * Model UserActivity
 * 
 */
export type UserActivity = $Result.DefaultSelection<Prisma.$UserActivityPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Enrollment
 * 
 */
export type Enrollment = $Result.DefaultSelection<Prisma.$EnrollmentPayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model AssignmentSubmission
 * 
 */
export type AssignmentSubmission = $Result.DefaultSelection<Prisma.$AssignmentSubmissionPayload>
/**
 * Model Grade
 * 
 */
export type Grade = $Result.DefaultSelection<Prisma.$GradePayload>
/**
 * Model CourseMaterial
 * 
 */
export type CourseMaterial = $Result.DefaultSelection<Prisma.$CourseMaterialPayload>
/**
 * Model Quiz
 * 
 */
export type Quiz = $Result.DefaultSelection<Prisma.$QuizPayload>
/**
 * Model QuizAttempt
 * 
 */
export type QuizAttempt = $Result.DefaultSelection<Prisma.$QuizAttemptPayload>
/**
 * Model CourseAnnouncement
 * 
 */
export type CourseAnnouncement = $Result.DefaultSelection<Prisma.$CourseAnnouncementPayload>
/**
 * Model ClassSession
 * 
 */
export type ClassSession = $Result.DefaultSelection<Prisma.$ClassSessionPayload>
/**
 * Model StudentAttendance
 * 
 */
export type StudentAttendance = $Result.DefaultSelection<Prisma.$StudentAttendancePayload>
/**
 * Model TeacherCourseAssignment
 * 
 */
export type TeacherCourseAssignment = $Result.DefaultSelection<Prisma.$TeacherCourseAssignmentPayload>
/**
 * Model AdvisoryAssignment
 * 
 */
export type AdvisoryAssignment = $Result.DefaultSelection<Prisma.$AdvisoryAssignmentPayload>
/**
 * Model FileAttachment
 * 
 */
export type FileAttachment = $Result.DefaultSelection<Prisma.$FileAttachmentPayload>
/**
 * Model PageConfiguration
 * 
 */
export type PageConfiguration = $Result.DefaultSelection<Prisma.$PageConfigurationPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model SystemSetting
 * 
 */
export type SystemSetting = $Result.DefaultSelection<Prisma.$SystemSettingPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  SUPERVISOR_TEACHER: 'SUPERVISOR_TEACHER',
  ADMIN: 'ADMIN'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const ThemeMode: {
  LIGHT: 'LIGHT',
  DARK: 'DARK',
  SYSTEM: 'SYSTEM'
};

export type ThemeMode = (typeof ThemeMode)[keyof typeof ThemeMode]


export const Visibility: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  LIMITED: 'LIMITED'
};

export type Visibility = (typeof Visibility)[keyof typeof Visibility]


export const CourseStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  UPCOMING: 'UPCOMING',
  DRAFT: 'DRAFT'
};

export type CourseStatus = (typeof CourseStatus)[keyof typeof CourseStatus]


export const CourseLevel: {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED'
};

export type CourseLevel = (typeof CourseLevel)[keyof typeof CourseLevel]


export const EnrollmentStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED',
  PENDING: 'PENDING',
  WITHDRAWN: 'WITHDRAWN'
};

export type EnrollmentStatus = (typeof EnrollmentStatus)[keyof typeof EnrollmentStatus]


export const AssignmentType: {
  HOMEWORK: 'HOMEWORK',
  PROJECT: 'PROJECT',
  ESSAY: 'ESSAY',
  LAB: 'LAB',
  QUIZ: 'QUIZ',
  EXAM: 'EXAM',
  PRESENTATION: 'PRESENTATION',
  DISCUSSION: 'DISCUSSION',
  PARTICIPATION: 'PARTICIPATION'
};

export type AssignmentType = (typeof AssignmentType)[keyof typeof AssignmentType]


export const AssignmentStatus: {
  DRAFT: 'DRAFT',
  ASSIGNED: 'ASSIGNED',
  SUBMITTED: 'SUBMITTED',
  GRADED: 'GRADED',
  OVERDUE: 'OVERDUE',
  CANCELLED: 'CANCELLED'
};

export type AssignmentStatus = (typeof AssignmentStatus)[keyof typeof AssignmentStatus]


export const MaterialType: {
  SYLLABUS: 'SYLLABUS',
  SLIDES: 'SLIDES',
  HANDOUT: 'HANDOUT',
  READING: 'READING',
  REFERENCE: 'REFERENCE',
  VIDEO: 'VIDEO',
  AUDIO: 'AUDIO',
  LINK: 'LINK',
  SOFTWARE: 'SOFTWARE',
  OTHER: 'OTHER'
};

export type MaterialType = (typeof MaterialType)[keyof typeof MaterialType]


export const AnnouncementPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type AnnouncementPriority = (typeof AnnouncementPriority)[keyof typeof AnnouncementPriority]


export const AttendanceStatus: {
  PRESENT: 'PRESENT',
  ABSENT: 'ABSENT',
  LATE: 'LATE',
  EXCUSED: 'EXCUSED',
  PARTIAL: 'PARTIAL'
};

export type AttendanceStatus = (typeof AttendanceStatus)[keyof typeof AttendanceStatus]


export const NotificationType: {
  ASSIGNMENT_DUE: 'ASSIGNMENT_DUE',
  GRADE_POSTED: 'GRADE_POSTED',
  COURSE_ANNOUNCEMENT: 'COURSE_ANNOUNCEMENT',
  ENROLLMENT_CONFIRMED: 'ENROLLMENT_CONFIRMED',
  SYSTEM_ALERT: 'SYSTEM_ALERT',
  REMINDER: 'REMINDER',
  MESSAGE: 'MESSAGE'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationPriority: {
  LOW: 'LOW',
  NORMAL: 'NORMAL',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type NotificationPriority = (typeof NotificationPriority)[keyof typeof NotificationPriority]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type ThemeMode = $Enums.ThemeMode

export const ThemeMode: typeof $Enums.ThemeMode

export type Visibility = $Enums.Visibility

export const Visibility: typeof $Enums.Visibility

export type CourseStatus = $Enums.CourseStatus

export const CourseStatus: typeof $Enums.CourseStatus

export type CourseLevel = $Enums.CourseLevel

export const CourseLevel: typeof $Enums.CourseLevel

export type EnrollmentStatus = $Enums.EnrollmentStatus

export const EnrollmentStatus: typeof $Enums.EnrollmentStatus

export type AssignmentType = $Enums.AssignmentType

export const AssignmentType: typeof $Enums.AssignmentType

export type AssignmentStatus = $Enums.AssignmentStatus

export const AssignmentStatus: typeof $Enums.AssignmentStatus

export type MaterialType = $Enums.MaterialType

export const MaterialType: typeof $Enums.MaterialType

export type AnnouncementPriority = $Enums.AnnouncementPriority

export const AnnouncementPriority: typeof $Enums.AnnouncementPriority

export type AttendanceStatus = $Enums.AttendanceStatus

export const AttendanceStatus: typeof $Enums.AttendanceStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationPriority = $Enums.NotificationPriority

export const NotificationPriority: typeof $Enums.NotificationPriority

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userProfile`: Exposes CRUD operations for the **UserProfile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserProfiles
    * const userProfiles = await prisma.userProfile.findMany()
    * ```
    */
  get userProfile(): Prisma.UserProfileDelegate<ExtArgs>;

  /**
   * `prisma.userActivity`: Exposes CRUD operations for the **UserActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivities
    * const userActivities = await prisma.userActivity.findMany()
    * ```
    */
  get userActivity(): Prisma.UserActivityDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;

  /**
   * `prisma.enrollment`: Exposes CRUD operations for the **Enrollment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Enrollments
    * const enrollments = await prisma.enrollment.findMany()
    * ```
    */
  get enrollment(): Prisma.EnrollmentDelegate<ExtArgs>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs>;

  /**
   * `prisma.assignmentSubmission`: Exposes CRUD operations for the **AssignmentSubmission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssignmentSubmissions
    * const assignmentSubmissions = await prisma.assignmentSubmission.findMany()
    * ```
    */
  get assignmentSubmission(): Prisma.AssignmentSubmissionDelegate<ExtArgs>;

  /**
   * `prisma.grade`: Exposes CRUD operations for the **Grade** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Grades
    * const grades = await prisma.grade.findMany()
    * ```
    */
  get grade(): Prisma.GradeDelegate<ExtArgs>;

  /**
   * `prisma.courseMaterial`: Exposes CRUD operations for the **CourseMaterial** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseMaterials
    * const courseMaterials = await prisma.courseMaterial.findMany()
    * ```
    */
  get courseMaterial(): Prisma.CourseMaterialDelegate<ExtArgs>;

  /**
   * `prisma.quiz`: Exposes CRUD operations for the **Quiz** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Quizzes
    * const quizzes = await prisma.quiz.findMany()
    * ```
    */
  get quiz(): Prisma.QuizDelegate<ExtArgs>;

  /**
   * `prisma.quizAttempt`: Exposes CRUD operations for the **QuizAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuizAttempts
    * const quizAttempts = await prisma.quizAttempt.findMany()
    * ```
    */
  get quizAttempt(): Prisma.QuizAttemptDelegate<ExtArgs>;

  /**
   * `prisma.courseAnnouncement`: Exposes CRUD operations for the **CourseAnnouncement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseAnnouncements
    * const courseAnnouncements = await prisma.courseAnnouncement.findMany()
    * ```
    */
  get courseAnnouncement(): Prisma.CourseAnnouncementDelegate<ExtArgs>;

  /**
   * `prisma.classSession`: Exposes CRUD operations for the **ClassSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassSessions
    * const classSessions = await prisma.classSession.findMany()
    * ```
    */
  get classSession(): Prisma.ClassSessionDelegate<ExtArgs>;

  /**
   * `prisma.studentAttendance`: Exposes CRUD operations for the **StudentAttendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentAttendances
    * const studentAttendances = await prisma.studentAttendance.findMany()
    * ```
    */
  get studentAttendance(): Prisma.StudentAttendanceDelegate<ExtArgs>;

  /**
   * `prisma.teacherCourseAssignment`: Exposes CRUD operations for the **TeacherCourseAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherCourseAssignments
    * const teacherCourseAssignments = await prisma.teacherCourseAssignment.findMany()
    * ```
    */
  get teacherCourseAssignment(): Prisma.TeacherCourseAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.advisoryAssignment`: Exposes CRUD operations for the **AdvisoryAssignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdvisoryAssignments
    * const advisoryAssignments = await prisma.advisoryAssignment.findMany()
    * ```
    */
  get advisoryAssignment(): Prisma.AdvisoryAssignmentDelegate<ExtArgs>;

  /**
   * `prisma.fileAttachment`: Exposes CRUD operations for the **FileAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileAttachments
    * const fileAttachments = await prisma.fileAttachment.findMany()
    * ```
    */
  get fileAttachment(): Prisma.FileAttachmentDelegate<ExtArgs>;

  /**
   * `prisma.pageConfiguration`: Exposes CRUD operations for the **PageConfiguration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PageConfigurations
    * const pageConfigurations = await prisma.pageConfiguration.findMany()
    * ```
    */
  get pageConfiguration(): Prisma.PageConfigurationDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.systemSetting`: Exposes CRUD operations for the **SystemSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSetting.findMany()
    * ```
    */
  get systemSetting(): Prisma.SystemSettingDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserProfile: 'UserProfile',
    UserActivity: 'UserActivity',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    Department: 'Department',
    Course: 'Course',
    Enrollment: 'Enrollment',
    Assignment: 'Assignment',
    AssignmentSubmission: 'AssignmentSubmission',
    Grade: 'Grade',
    CourseMaterial: 'CourseMaterial',
    Quiz: 'Quiz',
    QuizAttempt: 'QuizAttempt',
    CourseAnnouncement: 'CourseAnnouncement',
    ClassSession: 'ClassSession',
    StudentAttendance: 'StudentAttendance',
    TeacherCourseAssignment: 'TeacherCourseAssignment',
    AdvisoryAssignment: 'AdvisoryAssignment',
    FileAttachment: 'FileAttachment',
    PageConfiguration: 'PageConfiguration',
    Notification: 'Notification',
    SystemSetting: 'SystemSetting',
    AuditLog: 'AuditLog',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userProfile" | "userActivity" | "permission" | "rolePermission" | "department" | "course" | "enrollment" | "assignment" | "assignmentSubmission" | "grade" | "courseMaterial" | "quiz" | "quizAttempt" | "courseAnnouncement" | "classSession" | "studentAttendance" | "teacherCourseAssignment" | "advisoryAssignment" | "fileAttachment" | "pageConfiguration" | "notification" | "systemSetting" | "auditLog" | "session"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserProfile: {
        payload: Prisma.$UserProfilePayload<ExtArgs>
        fields: Prisma.UserProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findFirst: {
            args: Prisma.UserProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          findMany: {
            args: Prisma.UserProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          create: {
            args: Prisma.UserProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          createMany: {
            args: Prisma.UserProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>[]
          }
          delete: {
            args: Prisma.UserProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          update: {
            args: Prisma.UserProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          deleteMany: {
            args: Prisma.UserProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserProfilePayload>
          }
          aggregate: {
            args: Prisma.UserProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserProfile>
          }
          groupBy: {
            args: Prisma.UserProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserProfileCountArgs<ExtArgs>
            result: $Utils.Optional<UserProfileCountAggregateOutputType> | number
          }
        }
      }
      UserActivity: {
        payload: Prisma.$UserActivityPayload<ExtArgs>
        fields: Prisma.UserActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findFirst: {
            args: Prisma.UserActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findMany: {
            args: Prisma.UserActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          create: {
            args: Prisma.UserActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          createMany: {
            args: Prisma.UserActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          delete: {
            args: Prisma.UserActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          update: {
            args: Prisma.UserActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          deleteMany: {
            args: Prisma.UserActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          aggregate: {
            args: Prisma.UserActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserActivity>
          }
          groupBy: {
            args: Prisma.UserActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActivityCountArgs<ExtArgs>
            result: $Utils.Optional<UserActivityCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RolePermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Enrollment: {
        payload: Prisma.$EnrollmentPayload<ExtArgs>
        fields: Prisma.EnrollmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EnrollmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EnrollmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findFirst: {
            args: Prisma.EnrollmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EnrollmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          findMany: {
            args: Prisma.EnrollmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          create: {
            args: Prisma.EnrollmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          createMany: {
            args: Prisma.EnrollmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EnrollmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>[]
          }
          delete: {
            args: Prisma.EnrollmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          update: {
            args: Prisma.EnrollmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          deleteMany: {
            args: Prisma.EnrollmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EnrollmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EnrollmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EnrollmentPayload>
          }
          aggregate: {
            args: Prisma.EnrollmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEnrollment>
          }
          groupBy: {
            args: Prisma.EnrollmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.EnrollmentCountArgs<ExtArgs>
            result: $Utils.Optional<EnrollmentCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      AssignmentSubmission: {
        payload: Prisma.$AssignmentSubmissionPayload<ExtArgs>
        fields: Prisma.AssignmentSubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentSubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentSubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          findFirst: {
            args: Prisma.AssignmentSubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentSubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          findMany: {
            args: Prisma.AssignmentSubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>[]
          }
          create: {
            args: Prisma.AssignmentSubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          createMany: {
            args: Prisma.AssignmentSubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentSubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>[]
          }
          delete: {
            args: Prisma.AssignmentSubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          update: {
            args: Prisma.AssignmentSubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentSubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentSubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AssignmentSubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentSubmissionPayload>
          }
          aggregate: {
            args: Prisma.AssignmentSubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignmentSubmission>
          }
          groupBy: {
            args: Prisma.AssignmentSubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentSubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentSubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentSubmissionCountAggregateOutputType> | number
          }
        }
      }
      Grade: {
        payload: Prisma.$GradePayload<ExtArgs>
        fields: Prisma.GradeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GradeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GradeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findFirst: {
            args: Prisma.GradeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GradeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          findMany: {
            args: Prisma.GradeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          create: {
            args: Prisma.GradeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          createMany: {
            args: Prisma.GradeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GradeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>[]
          }
          delete: {
            args: Prisma.GradeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          update: {
            args: Prisma.GradeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          deleteMany: {
            args: Prisma.GradeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GradeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GradeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GradePayload>
          }
          aggregate: {
            args: Prisma.GradeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGrade>
          }
          groupBy: {
            args: Prisma.GradeGroupByArgs<ExtArgs>
            result: $Utils.Optional<GradeGroupByOutputType>[]
          }
          count: {
            args: Prisma.GradeCountArgs<ExtArgs>
            result: $Utils.Optional<GradeCountAggregateOutputType> | number
          }
        }
      }
      CourseMaterial: {
        payload: Prisma.$CourseMaterialPayload<ExtArgs>
        fields: Prisma.CourseMaterialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseMaterialFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseMaterialFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          findFirst: {
            args: Prisma.CourseMaterialFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseMaterialFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          findMany: {
            args: Prisma.CourseMaterialFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>[]
          }
          create: {
            args: Prisma.CourseMaterialCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          createMany: {
            args: Prisma.CourseMaterialCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseMaterialCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>[]
          }
          delete: {
            args: Prisma.CourseMaterialDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          update: {
            args: Prisma.CourseMaterialUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          deleteMany: {
            args: Prisma.CourseMaterialDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseMaterialUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseMaterialUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseMaterialPayload>
          }
          aggregate: {
            args: Prisma.CourseMaterialAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseMaterial>
          }
          groupBy: {
            args: Prisma.CourseMaterialGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseMaterialGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseMaterialCountArgs<ExtArgs>
            result: $Utils.Optional<CourseMaterialCountAggregateOutputType> | number
          }
        }
      }
      Quiz: {
        payload: Prisma.$QuizPayload<ExtArgs>
        fields: Prisma.QuizFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findFirst: {
            args: Prisma.QuizFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          findMany: {
            args: Prisma.QuizFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          create: {
            args: Prisma.QuizCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          createMany: {
            args: Prisma.QuizCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>[]
          }
          delete: {
            args: Prisma.QuizDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          update: {
            args: Prisma.QuizUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          deleteMany: {
            args: Prisma.QuizDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuizUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuizUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizPayload>
          }
          aggregate: {
            args: Prisma.QuizAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuiz>
          }
          groupBy: {
            args: Prisma.QuizGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizCountArgs<ExtArgs>
            result: $Utils.Optional<QuizCountAggregateOutputType> | number
          }
        }
      }
      QuizAttempt: {
        payload: Prisma.$QuizAttemptPayload<ExtArgs>
        fields: Prisma.QuizAttemptFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuizAttemptFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuizAttemptFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          findFirst: {
            args: Prisma.QuizAttemptFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuizAttemptFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          findMany: {
            args: Prisma.QuizAttemptFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>[]
          }
          create: {
            args: Prisma.QuizAttemptCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          createMany: {
            args: Prisma.QuizAttemptCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuizAttemptCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>[]
          }
          delete: {
            args: Prisma.QuizAttemptDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          update: {
            args: Prisma.QuizAttemptUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          deleteMany: {
            args: Prisma.QuizAttemptDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuizAttemptUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuizAttemptUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuizAttemptPayload>
          }
          aggregate: {
            args: Prisma.QuizAttemptAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuizAttempt>
          }
          groupBy: {
            args: Prisma.QuizAttemptGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuizAttemptGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuizAttemptCountArgs<ExtArgs>
            result: $Utils.Optional<QuizAttemptCountAggregateOutputType> | number
          }
        }
      }
      CourseAnnouncement: {
        payload: Prisma.$CourseAnnouncementPayload<ExtArgs>
        fields: Prisma.CourseAnnouncementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseAnnouncementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseAnnouncementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          findFirst: {
            args: Prisma.CourseAnnouncementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseAnnouncementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          findMany: {
            args: Prisma.CourseAnnouncementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>[]
          }
          create: {
            args: Prisma.CourseAnnouncementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          createMany: {
            args: Prisma.CourseAnnouncementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseAnnouncementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>[]
          }
          delete: {
            args: Prisma.CourseAnnouncementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          update: {
            args: Prisma.CourseAnnouncementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          deleteMany: {
            args: Prisma.CourseAnnouncementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseAnnouncementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CourseAnnouncementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseAnnouncementPayload>
          }
          aggregate: {
            args: Prisma.CourseAnnouncementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseAnnouncement>
          }
          groupBy: {
            args: Prisma.CourseAnnouncementGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseAnnouncementGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseAnnouncementCountArgs<ExtArgs>
            result: $Utils.Optional<CourseAnnouncementCountAggregateOutputType> | number
          }
        }
      }
      ClassSession: {
        payload: Prisma.$ClassSessionPayload<ExtArgs>
        fields: Prisma.ClassSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          findFirst: {
            args: Prisma.ClassSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          findMany: {
            args: Prisma.ClassSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>[]
          }
          create: {
            args: Prisma.ClassSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          createMany: {
            args: Prisma.ClassSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>[]
          }
          delete: {
            args: Prisma.ClassSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          update: {
            args: Prisma.ClassSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          deleteMany: {
            args: Prisma.ClassSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ClassSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassSessionPayload>
          }
          aggregate: {
            args: Prisma.ClassSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassSession>
          }
          groupBy: {
            args: Prisma.ClassSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ClassSessionCountAggregateOutputType> | number
          }
        }
      }
      StudentAttendance: {
        payload: Prisma.$StudentAttendancePayload<ExtArgs>
        fields: Prisma.StudentAttendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentAttendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          findFirst: {
            args: Prisma.StudentAttendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentAttendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          findMany: {
            args: Prisma.StudentAttendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
          }
          create: {
            args: Prisma.StudentAttendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          createMany: {
            args: Prisma.StudentAttendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentAttendanceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>[]
          }
          delete: {
            args: Prisma.StudentAttendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          update: {
            args: Prisma.StudentAttendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          deleteMany: {
            args: Prisma.StudentAttendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentAttendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudentAttendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentAttendancePayload>
          }
          aggregate: {
            args: Prisma.StudentAttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentAttendance>
          }
          groupBy: {
            args: Prisma.StudentAttendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentAttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentAttendanceCountArgs<ExtArgs>
            result: $Utils.Optional<StudentAttendanceCountAggregateOutputType> | number
          }
        }
      }
      TeacherCourseAssignment: {
        payload: Prisma.$TeacherCourseAssignmentPayload<ExtArgs>
        fields: Prisma.TeacherCourseAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherCourseAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherCourseAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          findFirst: {
            args: Prisma.TeacherCourseAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherCourseAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          findMany: {
            args: Prisma.TeacherCourseAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>[]
          }
          create: {
            args: Prisma.TeacherCourseAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          createMany: {
            args: Prisma.TeacherCourseAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCourseAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>[]
          }
          delete: {
            args: Prisma.TeacherCourseAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          update: {
            args: Prisma.TeacherCourseAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.TeacherCourseAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherCourseAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeacherCourseAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCourseAssignmentPayload>
          }
          aggregate: {
            args: Prisma.TeacherCourseAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherCourseAssignment>
          }
          groupBy: {
            args: Prisma.TeacherCourseAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherCourseAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCourseAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCourseAssignmentCountAggregateOutputType> | number
          }
        }
      }
      AdvisoryAssignment: {
        payload: Prisma.$AdvisoryAssignmentPayload<ExtArgs>
        fields: Prisma.AdvisoryAssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdvisoryAssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdvisoryAssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          findFirst: {
            args: Prisma.AdvisoryAssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdvisoryAssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          findMany: {
            args: Prisma.AdvisoryAssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>[]
          }
          create: {
            args: Prisma.AdvisoryAssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          createMany: {
            args: Prisma.AdvisoryAssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdvisoryAssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>[]
          }
          delete: {
            args: Prisma.AdvisoryAssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          update: {
            args: Prisma.AdvisoryAssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AdvisoryAssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdvisoryAssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdvisoryAssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdvisoryAssignmentPayload>
          }
          aggregate: {
            args: Prisma.AdvisoryAssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdvisoryAssignment>
          }
          groupBy: {
            args: Prisma.AdvisoryAssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdvisoryAssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdvisoryAssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AdvisoryAssignmentCountAggregateOutputType> | number
          }
        }
      }
      FileAttachment: {
        payload: Prisma.$FileAttachmentPayload<ExtArgs>
        fields: Prisma.FileAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileAttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileAttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          findFirst: {
            args: Prisma.FileAttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileAttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          findMany: {
            args: Prisma.FileAttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
          }
          create: {
            args: Prisma.FileAttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          createMany: {
            args: Prisma.FileAttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileAttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
          }
          delete: {
            args: Prisma.FileAttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          update: {
            args: Prisma.FileAttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.FileAttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileAttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FileAttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          aggregate: {
            args: Prisma.FileAttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFileAttachment>
          }
          groupBy: {
            args: Prisma.FileAttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileAttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<FileAttachmentCountAggregateOutputType> | number
          }
        }
      }
      PageConfiguration: {
        payload: Prisma.$PageConfigurationPayload<ExtArgs>
        fields: Prisma.PageConfigurationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PageConfigurationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PageConfigurationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          findFirst: {
            args: Prisma.PageConfigurationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PageConfigurationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          findMany: {
            args: Prisma.PageConfigurationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>[]
          }
          create: {
            args: Prisma.PageConfigurationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          createMany: {
            args: Prisma.PageConfigurationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PageConfigurationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>[]
          }
          delete: {
            args: Prisma.PageConfigurationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          update: {
            args: Prisma.PageConfigurationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          deleteMany: {
            args: Prisma.PageConfigurationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PageConfigurationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PageConfigurationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PageConfigurationPayload>
          }
          aggregate: {
            args: Prisma.PageConfigurationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePageConfiguration>
          }
          groupBy: {
            args: Prisma.PageConfigurationGroupByArgs<ExtArgs>
            result: $Utils.Optional<PageConfigurationGroupByOutputType>[]
          }
          count: {
            args: Prisma.PageConfigurationCountArgs<ExtArgs>
            result: $Utils.Optional<PageConfigurationCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      SystemSetting: {
        payload: Prisma.$SystemSettingPayload<ExtArgs>
        fields: Prisma.SystemSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          findMany: {
            args: Prisma.SystemSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          create: {
            args: Prisma.SystemSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          createMany: {
            args: Prisma.SystemSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          update: {
            args: Prisma.SystemSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSetting>
          }
          groupBy: {
            args: Prisma.SystemSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    studentEnrollments: number
    assignmentSubmissions: number
    quizAttempts: number
    grades: number
    attendances: number
    taughtCourses: number
    advisoryStudents: number
    gradedAssignments: number
    courseAnnouncements: number
    createdAssignments: number
    createdQuizzes: number
    uploadedMaterials: number
    createdCourses: number
    registeredTeachers: number
    registeredStudents: number
    assignedTeachers: number
    teacherCourseAssignments: number
    assignedAdvisories: number
    advisoryAssignments: number
    managedDepartments: number
    userActivity: number
    uploadedFiles: number
    auditLogs: number
    enrollmentsManaged: number
    notifications: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentEnrollments?: boolean | UserCountOutputTypeCountStudentEnrollmentsArgs
    assignmentSubmissions?: boolean | UserCountOutputTypeCountAssignmentSubmissionsArgs
    quizAttempts?: boolean | UserCountOutputTypeCountQuizAttemptsArgs
    grades?: boolean | UserCountOutputTypeCountGradesArgs
    attendances?: boolean | UserCountOutputTypeCountAttendancesArgs
    taughtCourses?: boolean | UserCountOutputTypeCountTaughtCoursesArgs
    advisoryStudents?: boolean | UserCountOutputTypeCountAdvisoryStudentsArgs
    gradedAssignments?: boolean | UserCountOutputTypeCountGradedAssignmentsArgs
    courseAnnouncements?: boolean | UserCountOutputTypeCountCourseAnnouncementsArgs
    createdAssignments?: boolean | UserCountOutputTypeCountCreatedAssignmentsArgs
    createdQuizzes?: boolean | UserCountOutputTypeCountCreatedQuizzesArgs
    uploadedMaterials?: boolean | UserCountOutputTypeCountUploadedMaterialsArgs
    createdCourses?: boolean | UserCountOutputTypeCountCreatedCoursesArgs
    registeredTeachers?: boolean | UserCountOutputTypeCountRegisteredTeachersArgs
    registeredStudents?: boolean | UserCountOutputTypeCountRegisteredStudentsArgs
    assignedTeachers?: boolean | UserCountOutputTypeCountAssignedTeachersArgs
    teacherCourseAssignments?: boolean | UserCountOutputTypeCountTeacherCourseAssignmentsArgs
    assignedAdvisories?: boolean | UserCountOutputTypeCountAssignedAdvisoriesArgs
    advisoryAssignments?: boolean | UserCountOutputTypeCountAdvisoryAssignmentsArgs
    managedDepartments?: boolean | UserCountOutputTypeCountManagedDepartmentsArgs
    userActivity?: boolean | UserCountOutputTypeCountUserActivityArgs
    uploadedFiles?: boolean | UserCountOutputTypeCountUploadedFilesArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    enrollmentsManaged?: boolean | UserCountOutputTypeCountEnrollmentsManagedArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQuizAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizAttemptWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTaughtCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdvisoryStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountGradedAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCourseAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseAnnouncementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseMaterialWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegisteredStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeacherCourseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedAdvisoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisoryAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAdvisoryAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisoryAssignmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEnrollmentsManagedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    rolePermissions: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | PermissionCountOutputTypeCountRolePermissionsArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    courses: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | DepartmentCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    prerequisites: number
    prerequisiteFor: number
    enrollments: number
    assignments: number
    courseMaterials: number
    quizzes: number
    announcements: number
    classSessions: number
    grades: number
    teacherAssignments: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    prerequisites?: boolean | CourseCountOutputTypeCountPrerequisitesArgs
    prerequisiteFor?: boolean | CourseCountOutputTypeCountPrerequisiteForArgs
    enrollments?: boolean | CourseCountOutputTypeCountEnrollmentsArgs
    assignments?: boolean | CourseCountOutputTypeCountAssignmentsArgs
    courseMaterials?: boolean | CourseCountOutputTypeCountCourseMaterialsArgs
    quizzes?: boolean | CourseCountOutputTypeCountQuizzesArgs
    announcements?: boolean | CourseCountOutputTypeCountAnnouncementsArgs
    classSessions?: boolean | CourseCountOutputTypeCountClassSessionsArgs
    grades?: boolean | CourseCountOutputTypeCountGradesArgs
    teacherAssignments?: boolean | CourseCountOutputTypeCountTeacherAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPrerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPrerequisiteForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountCourseMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseMaterialWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseAnnouncementWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountClassSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSessionWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountTeacherAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseAssignmentWhereInput
  }


  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    submissions: number
    grades: number
    attachments: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | AssignmentCountOutputTypeCountSubmissionsArgs
    grades?: boolean | AssignmentCountOutputTypeCountGradesArgs
    attachments?: boolean | AssignmentCountOutputTypeCountAttachmentsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSubmissionWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountGradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
  }


  /**
   * Count Type AssignmentSubmissionCountOutputType
   */

  export type AssignmentSubmissionCountOutputType = {
    files: number
  }

  export type AssignmentSubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | AssignmentSubmissionCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * AssignmentSubmissionCountOutputType without action
   */
  export type AssignmentSubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmissionCountOutputType
     */
    select?: AssignmentSubmissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentSubmissionCountOutputType without action
   */
  export type AssignmentSubmissionCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
  }


  /**
   * Count Type QuizCountOutputType
   */

  export type QuizCountOutputType = {
    attempts: number
  }

  export type QuizCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attempts?: boolean | QuizCountOutputTypeCountAttemptsArgs
  }

  // Custom InputTypes
  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizCountOutputType
     */
    select?: QuizCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuizCountOutputType without action
   */
  export type QuizCountOutputTypeCountAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizAttemptWhereInput
  }


  /**
   * Count Type ClassSessionCountOutputType
   */

  export type ClassSessionCountOutputType = {
    attendances: number
  }

  export type ClassSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendances?: boolean | ClassSessionCountOutputTypeCountAttendancesArgs
  }

  // Custom InputTypes
  /**
   * ClassSessionCountOutputType without action
   */
  export type ClassSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSessionCountOutputType
     */
    select?: ClassSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassSessionCountOutputType without action
   */
  export type ClassSessionCountOutputTypeCountAttendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
  }


  /**
   * Count Type FileAttachmentCountOutputType
   */

  export type FileAttachmentCountOutputType = {
    courseMaterials: number
    assignmentAttachments: number
    submissionFiles: number
  }

  export type FileAttachmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courseMaterials?: boolean | FileAttachmentCountOutputTypeCountCourseMaterialsArgs
    assignmentAttachments?: boolean | FileAttachmentCountOutputTypeCountAssignmentAttachmentsArgs
    submissionFiles?: boolean | FileAttachmentCountOutputTypeCountSubmissionFilesArgs
  }

  // Custom InputTypes
  /**
   * FileAttachmentCountOutputType without action
   */
  export type FileAttachmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachmentCountOutputType
     */
    select?: FileAttachmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FileAttachmentCountOutputType without action
   */
  export type FileAttachmentCountOutputTypeCountCourseMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseMaterialWhereInput
  }

  /**
   * FileAttachmentCountOutputType without action
   */
  export type FileAttachmentCountOutputTypeCountAssignmentAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * FileAttachmentCountOutputType without action
   */
  export type FileAttachmentCountOutputTypeCountSubmissionFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSubmissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    avatar: string | null
    isSupervisor: boolean | null
    teacherRegisteredById: string | null
    studentRegisteredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    passwordHash: string | null
    role: $Enums.UserRole | null
    isActive: boolean | null
    avatar: string | null
    isSupervisor: boolean | null
    teacherRegisteredById: string | null
    studentRegisteredById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    passwordHash: number
    role: number
    isActive: number
    avatar: number
    isSupervisor: number
    teacherRegisteredById: number
    studentRegisteredById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    avatar?: true
    isSupervisor?: true
    teacherRegisteredById?: true
    studentRegisteredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    avatar?: true
    isSupervisor?: true
    teacherRegisteredById?: true
    studentRegisteredById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    passwordHash?: true
    role?: true
    isActive?: true
    avatar?: true
    isSupervisor?: true
    teacherRegisteredById?: true
    studentRegisteredById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive: boolean
    avatar: string | null
    isSupervisor: boolean
    teacherRegisteredById: string | null
    studentRegisteredById: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    avatar?: boolean
    isSupervisor?: boolean
    teacherRegisteredById?: boolean
    studentRegisteredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    profile?: boolean | User$profileArgs<ExtArgs>
    studentEnrollments?: boolean | User$studentEnrollmentsArgs<ExtArgs>
    assignmentSubmissions?: boolean | User$assignmentSubmissionsArgs<ExtArgs>
    quizAttempts?: boolean | User$quizAttemptsArgs<ExtArgs>
    grades?: boolean | User$gradesArgs<ExtArgs>
    attendances?: boolean | User$attendancesArgs<ExtArgs>
    taughtCourses?: boolean | User$taughtCoursesArgs<ExtArgs>
    advisoryStudents?: boolean | User$advisoryStudentsArgs<ExtArgs>
    gradedAssignments?: boolean | User$gradedAssignmentsArgs<ExtArgs>
    courseAnnouncements?: boolean | User$courseAnnouncementsArgs<ExtArgs>
    createdAssignments?: boolean | User$createdAssignmentsArgs<ExtArgs>
    createdQuizzes?: boolean | User$createdQuizzesArgs<ExtArgs>
    uploadedMaterials?: boolean | User$uploadedMaterialsArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    registeredTeachers?: boolean | User$registeredTeachersArgs<ExtArgs>
    registeredStudents?: boolean | User$registeredStudentsArgs<ExtArgs>
    assignedTeachers?: boolean | User$assignedTeachersArgs<ExtArgs>
    teacherCourseAssignments?: boolean | User$teacherCourseAssignmentsArgs<ExtArgs>
    assignedAdvisories?: boolean | User$assignedAdvisoriesArgs<ExtArgs>
    advisoryAssignments?: boolean | User$advisoryAssignmentsArgs<ExtArgs>
    studentAdvisoryAssignment?: boolean | User$studentAdvisoryAssignmentArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    teacherRegisteredBy?: boolean | User$teacherRegisteredByArgs<ExtArgs>
    studentRegisteredBy?: boolean | User$studentRegisteredByArgs<ExtArgs>
    userActivity?: boolean | User$userActivityArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    enrollmentsManaged?: boolean | User$enrollmentsManagedArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    avatar?: boolean
    isSupervisor?: boolean
    teacherRegisteredById?: boolean
    studentRegisteredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teacherRegisteredBy?: boolean | User$teacherRegisteredByArgs<ExtArgs>
    studentRegisteredBy?: boolean | User$studentRegisteredByArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    passwordHash?: boolean
    role?: boolean
    isActive?: boolean
    avatar?: boolean
    isSupervisor?: boolean
    teacherRegisteredById?: boolean
    studentRegisteredById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | User$profileArgs<ExtArgs>
    studentEnrollments?: boolean | User$studentEnrollmentsArgs<ExtArgs>
    assignmentSubmissions?: boolean | User$assignmentSubmissionsArgs<ExtArgs>
    quizAttempts?: boolean | User$quizAttemptsArgs<ExtArgs>
    grades?: boolean | User$gradesArgs<ExtArgs>
    attendances?: boolean | User$attendancesArgs<ExtArgs>
    taughtCourses?: boolean | User$taughtCoursesArgs<ExtArgs>
    advisoryStudents?: boolean | User$advisoryStudentsArgs<ExtArgs>
    gradedAssignments?: boolean | User$gradedAssignmentsArgs<ExtArgs>
    courseAnnouncements?: boolean | User$courseAnnouncementsArgs<ExtArgs>
    createdAssignments?: boolean | User$createdAssignmentsArgs<ExtArgs>
    createdQuizzes?: boolean | User$createdQuizzesArgs<ExtArgs>
    uploadedMaterials?: boolean | User$uploadedMaterialsArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    registeredTeachers?: boolean | User$registeredTeachersArgs<ExtArgs>
    registeredStudents?: boolean | User$registeredStudentsArgs<ExtArgs>
    assignedTeachers?: boolean | User$assignedTeachersArgs<ExtArgs>
    teacherCourseAssignments?: boolean | User$teacherCourseAssignmentsArgs<ExtArgs>
    assignedAdvisories?: boolean | User$assignedAdvisoriesArgs<ExtArgs>
    advisoryAssignments?: boolean | User$advisoryAssignmentsArgs<ExtArgs>
    studentAdvisoryAssignment?: boolean | User$studentAdvisoryAssignmentArgs<ExtArgs>
    managedDepartments?: boolean | User$managedDepartmentsArgs<ExtArgs>
    teacherRegisteredBy?: boolean | User$teacherRegisteredByArgs<ExtArgs>
    studentRegisteredBy?: boolean | User$studentRegisteredByArgs<ExtArgs>
    userActivity?: boolean | User$userActivityArgs<ExtArgs>
    uploadedFiles?: boolean | User$uploadedFilesArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    enrollmentsManaged?: boolean | User$enrollmentsManagedArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherRegisteredBy?: boolean | User$teacherRegisteredByArgs<ExtArgs>
    studentRegisteredBy?: boolean | User$studentRegisteredByArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      profile: Prisma.$UserProfilePayload<ExtArgs> | null
      studentEnrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      assignmentSubmissions: Prisma.$AssignmentSubmissionPayload<ExtArgs>[]
      quizAttempts: Prisma.$QuizAttemptPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
      attendances: Prisma.$StudentAttendancePayload<ExtArgs>[]
      taughtCourses: Prisma.$CoursePayload<ExtArgs>[]
      advisoryStudents: Prisma.$UserProfilePayload<ExtArgs>[]
      gradedAssignments: Prisma.$GradePayload<ExtArgs>[]
      courseAnnouncements: Prisma.$CourseAnnouncementPayload<ExtArgs>[]
      createdAssignments: Prisma.$AssignmentPayload<ExtArgs>[]
      createdQuizzes: Prisma.$QuizPayload<ExtArgs>[]
      uploadedMaterials: Prisma.$CourseMaterialPayload<ExtArgs>[]
      createdCourses: Prisma.$CoursePayload<ExtArgs>[]
      registeredTeachers: Prisma.$UserPayload<ExtArgs>[]
      registeredStudents: Prisma.$UserPayload<ExtArgs>[]
      assignedTeachers: Prisma.$TeacherCourseAssignmentPayload<ExtArgs>[]
      teacherCourseAssignments: Prisma.$TeacherCourseAssignmentPayload<ExtArgs>[]
      assignedAdvisories: Prisma.$AdvisoryAssignmentPayload<ExtArgs>[]
      advisoryAssignments: Prisma.$AdvisoryAssignmentPayload<ExtArgs>[]
      studentAdvisoryAssignment: Prisma.$AdvisoryAssignmentPayload<ExtArgs> | null
      managedDepartments: Prisma.$DepartmentPayload<ExtArgs>[]
      teacherRegisteredBy: Prisma.$UserPayload<ExtArgs> | null
      studentRegisteredBy: Prisma.$UserPayload<ExtArgs> | null
      userActivity: Prisma.$UserActivityPayload<ExtArgs>[]
      uploadedFiles: Prisma.$FileAttachmentPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
      enrollmentsManaged: Prisma.$EnrollmentPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      passwordHash: string
      role: $Enums.UserRole
      isActive: boolean
      avatar: string | null
      isSupervisor: boolean
      teacherRegisteredById: string | null
      studentRegisteredById: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    studentEnrollments<T extends User$studentEnrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$studentEnrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    assignmentSubmissions<T extends User$assignmentSubmissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentSubmissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findMany"> | Null>
    quizAttempts<T extends User$quizAttemptsArgs<ExtArgs> = {}>(args?: Subset<T, User$quizAttemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    grades<T extends User$gradesArgs<ExtArgs> = {}>(args?: Subset<T, User$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    attendances<T extends User$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, User$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany"> | Null>
    taughtCourses<T extends User$taughtCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$taughtCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    advisoryStudents<T extends User$advisoryStudentsArgs<ExtArgs> = {}>(args?: Subset<T, User$advisoryStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany"> | Null>
    gradedAssignments<T extends User$gradedAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$gradedAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    courseAnnouncements<T extends User$courseAnnouncementsArgs<ExtArgs> = {}>(args?: Subset<T, User$courseAnnouncementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findMany"> | Null>
    createdAssignments<T extends User$createdAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    createdQuizzes<T extends User$createdQuizzesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdQuizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany"> | Null>
    uploadedMaterials<T extends User$uploadedMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    createdCourses<T extends User$createdCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    registeredTeachers<T extends User$registeredTeachersArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredTeachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    registeredStudents<T extends User$registeredStudentsArgs<ExtArgs> = {}>(args?: Subset<T, User$registeredStudentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    assignedTeachers<T extends User$assignedTeachersArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTeachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    teacherCourseAssignments<T extends User$teacherCourseAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherCourseAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    assignedAdvisories<T extends User$assignedAdvisoriesArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedAdvisoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    advisoryAssignments<T extends User$advisoryAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$advisoryAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    studentAdvisoryAssignment<T extends User$studentAdvisoryAssignmentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentAdvisoryAssignmentArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    managedDepartments<T extends User$managedDepartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$managedDepartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany"> | Null>
    teacherRegisteredBy<T extends User$teacherRegisteredByArgs<ExtArgs> = {}>(args?: Subset<T, User$teacherRegisteredByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    studentRegisteredBy<T extends User$studentRegisteredByArgs<ExtArgs> = {}>(args?: Subset<T, User$studentRegisteredByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userActivity<T extends User$userActivityArgs<ExtArgs> = {}>(args?: Subset<T, User$userActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany"> | Null>
    uploadedFiles<T extends User$uploadedFilesArgs<ExtArgs> = {}>(args?: Subset<T, User$uploadedFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    enrollmentsManaged<T extends User$enrollmentsManagedArgs<ExtArgs> = {}>(args?: Subset<T, User$enrollmentsManagedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly isSupervisor: FieldRef<"User", 'Boolean'>
    readonly teacherRegisteredById: FieldRef<"User", 'String'>
    readonly studentRegisteredById: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
  }

  /**
   * User.studentEnrollments
   */
  export type User$studentEnrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * User.assignmentSubmissions
   */
  export type User$assignmentSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    where?: AssignmentSubmissionWhereInput
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    cursor?: AssignmentSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * User.quizAttempts
   */
  export type User$quizAttemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    where?: QuizAttemptWhereInput
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    cursor?: QuizAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizAttemptScalarFieldEnum | QuizAttemptScalarFieldEnum[]
  }

  /**
   * User.grades
   */
  export type User$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * User.attendances
   */
  export type User$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    cursor?: StudentAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * User.taughtCourses
   */
  export type User$taughtCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.advisoryStudents
   */
  export type User$advisoryStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    cursor?: UserProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * User.gradedAssignments
   */
  export type User$gradedAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * User.courseAnnouncements
   */
  export type User$courseAnnouncementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    where?: CourseAnnouncementWhereInput
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    cursor?: CourseAnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseAnnouncementScalarFieldEnum | CourseAnnouncementScalarFieldEnum[]
  }

  /**
   * User.createdAssignments
   */
  export type User$createdAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * User.createdQuizzes
   */
  export type User$createdQuizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * User.uploadedMaterials
   */
  export type User$uploadedMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    where?: CourseMaterialWhereInput
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    cursor?: CourseMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * User.createdCourses
   */
  export type User$createdCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.registeredTeachers
   */
  export type User$registeredTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.registeredStudents
   */
  export type User$registeredStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.assignedTeachers
   */
  export type User$assignedTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    where?: TeacherCourseAssignmentWhereInput
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * User.teacherCourseAssignments
   */
  export type User$teacherCourseAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    where?: TeacherCourseAssignmentWhereInput
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * User.assignedAdvisories
   */
  export type User$assignedAdvisoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    where?: AdvisoryAssignmentWhereInput
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    cursor?: AdvisoryAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdvisoryAssignmentScalarFieldEnum | AdvisoryAssignmentScalarFieldEnum[]
  }

  /**
   * User.advisoryAssignments
   */
  export type User$advisoryAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    where?: AdvisoryAssignmentWhereInput
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    cursor?: AdvisoryAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdvisoryAssignmentScalarFieldEnum | AdvisoryAssignmentScalarFieldEnum[]
  }

  /**
   * User.studentAdvisoryAssignment
   */
  export type User$studentAdvisoryAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    where?: AdvisoryAssignmentWhereInput
  }

  /**
   * User.managedDepartments
   */
  export type User$managedDepartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.teacherRegisteredBy
   */
  export type User$teacherRegisteredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.studentRegisteredBy
   */
  export type User$studentRegisteredByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.userActivity
   */
  export type User$userActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    cursor?: UserActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * User.uploadedFiles
   */
  export type User$uploadedFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    cursor?: FileAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User.enrollmentsManaged
   */
  export type User$enrollmentsManagedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserProfile
   */

  export type AggregateUserProfile = {
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  export type UserProfileAvgAggregateOutputType = {
    gpa: number | null
  }

  export type UserProfileSumAggregateOutputType = {
    gpa: number | null
  }

  export type UserProfileMinAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    phone: string | null
    street: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    studentId: string | null
    grade: string | null
    gpa: number | null
    enrollmentDate: Date | null
    graduationDate: Date | null
    major: string | null
    minor: string | null
    employeeId: string | null
    department: string | null
    position: string | null
    hireDate: Date | null
    officeLocation: string | null
    officeHours: string | null
    advisoryTeacherId: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    theme: $Enums.ThemeMode | null
    language: string | null
    timezone: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    smsNotifications: boolean | null
    profileVisibility: $Enums.Visibility | null
    showEmail: boolean | null
    showPhone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    firstName: string | null
    lastName: string | null
    dateOfBirth: Date | null
    phone: string | null
    street: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    studentId: string | null
    grade: string | null
    gpa: number | null
    enrollmentDate: Date | null
    graduationDate: Date | null
    major: string | null
    minor: string | null
    employeeId: string | null
    department: string | null
    position: string | null
    hireDate: Date | null
    officeLocation: string | null
    officeHours: string | null
    advisoryTeacherId: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    theme: $Enums.ThemeMode | null
    language: string | null
    timezone: string | null
    emailNotifications: boolean | null
    pushNotifications: boolean | null
    smsNotifications: boolean | null
    profileVisibility: $Enums.Visibility | null
    showEmail: boolean | null
    showPhone: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserProfileCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    lastName: number
    dateOfBirth: number
    phone: number
    street: number
    city: number
    state: number
    zipCode: number
    country: number
    studentId: number
    grade: number
    gpa: number
    enrollmentDate: number
    graduationDate: number
    major: number
    minor: number
    employeeId: number
    department: number
    position: number
    hireDate: number
    specialization: number
    officeLocation: number
    officeHours: number
    advisoryTeacherId: number
    emergencyContactName: number
    emergencyContactRelationship: number
    emergencyContactPhone: number
    emergencyContactEmail: number
    theme: number
    language: number
    timezone: number
    emailNotifications: number
    pushNotifications: number
    smsNotifications: number
    profileVisibility: number
    showEmail: number
    showPhone: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserProfileAvgAggregateInputType = {
    gpa?: true
  }

  export type UserProfileSumAggregateInputType = {
    gpa?: true
  }

  export type UserProfileMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    phone?: true
    street?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    studentId?: true
    grade?: true
    gpa?: true
    enrollmentDate?: true
    graduationDate?: true
    major?: true
    minor?: true
    employeeId?: true
    department?: true
    position?: true
    hireDate?: true
    officeLocation?: true
    officeHours?: true
    advisoryTeacherId?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    theme?: true
    language?: true
    timezone?: true
    emailNotifications?: true
    pushNotifications?: true
    smsNotifications?: true
    profileVisibility?: true
    showEmail?: true
    showPhone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    phone?: true
    street?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    studentId?: true
    grade?: true
    gpa?: true
    enrollmentDate?: true
    graduationDate?: true
    major?: true
    minor?: true
    employeeId?: true
    department?: true
    position?: true
    hireDate?: true
    officeLocation?: true
    officeHours?: true
    advisoryTeacherId?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    theme?: true
    language?: true
    timezone?: true
    emailNotifications?: true
    pushNotifications?: true
    smsNotifications?: true
    profileVisibility?: true
    showEmail?: true
    showPhone?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserProfileCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    lastName?: true
    dateOfBirth?: true
    phone?: true
    street?: true
    city?: true
    state?: true
    zipCode?: true
    country?: true
    studentId?: true
    grade?: true
    gpa?: true
    enrollmentDate?: true
    graduationDate?: true
    major?: true
    minor?: true
    employeeId?: true
    department?: true
    position?: true
    hireDate?: true
    specialization?: true
    officeLocation?: true
    officeHours?: true
    advisoryTeacherId?: true
    emergencyContactName?: true
    emergencyContactRelationship?: true
    emergencyContactPhone?: true
    emergencyContactEmail?: true
    theme?: true
    language?: true
    timezone?: true
    emailNotifications?: true
    pushNotifications?: true
    smsNotifications?: true
    profileVisibility?: true
    showEmail?: true
    showPhone?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfile to aggregate.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserProfiles
    **/
    _count?: true | UserProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserProfileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserProfileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserProfileMaxAggregateInputType
  }

  export type GetUserProfileAggregateType<T extends UserProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateUserProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserProfile[P]>
      : GetScalarType<T[P], AggregateUserProfile[P]>
  }




  export type UserProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserProfileWhereInput
    orderBy?: UserProfileOrderByWithAggregationInput | UserProfileOrderByWithAggregationInput[]
    by: UserProfileScalarFieldEnum[] | UserProfileScalarFieldEnum
    having?: UserProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserProfileCountAggregateInputType | true
    _avg?: UserProfileAvgAggregateInputType
    _sum?: UserProfileSumAggregateInputType
    _min?: UserProfileMinAggregateInputType
    _max?: UserProfileMaxAggregateInputType
  }

  export type UserProfileGroupByOutputType = {
    id: string
    userId: string
    firstName: string
    lastName: string
    dateOfBirth: Date | null
    phone: string | null
    street: string | null
    city: string | null
    state: string | null
    zipCode: string | null
    country: string | null
    studentId: string | null
    grade: string | null
    gpa: number | null
    enrollmentDate: Date | null
    graduationDate: Date | null
    major: string | null
    minor: string | null
    employeeId: string | null
    department: string | null
    position: string | null
    hireDate: Date | null
    specialization: string[]
    officeLocation: string | null
    officeHours: string | null
    advisoryTeacherId: string | null
    emergencyContactName: string | null
    emergencyContactRelationship: string | null
    emergencyContactPhone: string | null
    emergencyContactEmail: string | null
    theme: $Enums.ThemeMode
    language: string
    timezone: string
    emailNotifications: boolean
    pushNotifications: boolean
    smsNotifications: boolean
    profileVisibility: $Enums.Visibility
    showEmail: boolean
    showPhone: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserProfileCountAggregateOutputType | null
    _avg: UserProfileAvgAggregateOutputType | null
    _sum: UserProfileSumAggregateOutputType | null
    _min: UserProfileMinAggregateOutputType | null
    _max: UserProfileMaxAggregateOutputType | null
  }

  type GetUserProfileGroupByPayload<T extends UserProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
            : GetScalarType<T[P], UserProfileGroupByOutputType[P]>
        }
      >
    >


  export type UserProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    phone?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    studentId?: boolean
    grade?: boolean
    gpa?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    major?: boolean
    minor?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    specialization?: boolean
    officeLocation?: boolean
    officeHours?: boolean
    advisoryTeacherId?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    theme?: boolean
    language?: boolean
    timezone?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: boolean
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserProfile$advisoryTeacherArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    phone?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    studentId?: boolean
    grade?: boolean
    gpa?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    major?: boolean
    minor?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    specialization?: boolean
    officeLocation?: boolean
    officeHours?: boolean
    advisoryTeacherId?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    theme?: boolean
    language?: boolean
    timezone?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: boolean
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserProfile$advisoryTeacherArgs<ExtArgs>
  }, ExtArgs["result"]["userProfile"]>

  export type UserProfileSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    lastName?: boolean
    dateOfBirth?: boolean
    phone?: boolean
    street?: boolean
    city?: boolean
    state?: boolean
    zipCode?: boolean
    country?: boolean
    studentId?: boolean
    grade?: boolean
    gpa?: boolean
    enrollmentDate?: boolean
    graduationDate?: boolean
    major?: boolean
    minor?: boolean
    employeeId?: boolean
    department?: boolean
    position?: boolean
    hireDate?: boolean
    specialization?: boolean
    officeLocation?: boolean
    officeHours?: boolean
    advisoryTeacherId?: boolean
    emergencyContactName?: boolean
    emergencyContactRelationship?: boolean
    emergencyContactPhone?: boolean
    emergencyContactEmail?: boolean
    theme?: boolean
    language?: boolean
    timezone?: boolean
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: boolean
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserProfile$advisoryTeacherArgs<ExtArgs>
  }
  export type UserProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserProfile$advisoryTeacherArgs<ExtArgs>
  }

  export type $UserProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserProfile"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      advisoryTeacher: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      firstName: string
      lastName: string
      dateOfBirth: Date | null
      phone: string | null
      street: string | null
      city: string | null
      state: string | null
      zipCode: string | null
      country: string | null
      studentId: string | null
      grade: string | null
      gpa: number | null
      enrollmentDate: Date | null
      graduationDate: Date | null
      major: string | null
      minor: string | null
      employeeId: string | null
      department: string | null
      position: string | null
      hireDate: Date | null
      specialization: string[]
      officeLocation: string | null
      officeHours: string | null
      advisoryTeacherId: string | null
      emergencyContactName: string | null
      emergencyContactRelationship: string | null
      emergencyContactPhone: string | null
      emergencyContactEmail: string | null
      theme: $Enums.ThemeMode
      language: string
      timezone: string
      emailNotifications: boolean
      pushNotifications: boolean
      smsNotifications: boolean
      profileVisibility: $Enums.Visibility
      showEmail: boolean
      showPhone: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userProfile"]>
    composites: {}
  }

  type UserProfileGetPayload<S extends boolean | null | undefined | UserProfileDefaultArgs> = $Result.GetResult<Prisma.$UserProfilePayload, S>

  type UserProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserProfileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserProfileCountAggregateInputType | true
    }

  export interface UserProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserProfile'], meta: { name: 'UserProfile' } }
    /**
     * Find zero or one UserProfile that matches the filter.
     * @param {UserProfileFindUniqueArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserProfileFindUniqueArgs>(args: SelectSubset<T, UserProfileFindUniqueArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserProfile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserProfileFindUniqueOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, UserProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserProfileFindFirstArgs>(args?: SelectSubset<T, UserProfileFindFirstArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserProfile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindFirstOrThrowArgs} args - Arguments to find a UserProfile
     * @example
     * // Get one UserProfile
     * const userProfile = await prisma.userProfile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, UserProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserProfiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserProfiles
     * const userProfiles = await prisma.userProfile.findMany()
     * 
     * // Get first 10 UserProfiles
     * const userProfiles = await prisma.userProfile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserProfileFindManyArgs>(args?: SelectSubset<T, UserProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserProfile.
     * @param {UserProfileCreateArgs} args - Arguments to create a UserProfile.
     * @example
     * // Create one UserProfile
     * const UserProfile = await prisma.userProfile.create({
     *   data: {
     *     // ... data to create a UserProfile
     *   }
     * })
     * 
     */
    create<T extends UserProfileCreateArgs>(args: SelectSubset<T, UserProfileCreateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserProfiles.
     * @param {UserProfileCreateManyArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserProfileCreateManyArgs>(args?: SelectSubset<T, UserProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserProfiles and returns the data saved in the database.
     * @param {UserProfileCreateManyAndReturnArgs} args - Arguments to create many UserProfiles.
     * @example
     * // Create many UserProfiles
     * const userProfile = await prisma.userProfile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserProfiles and only return the `id`
     * const userProfileWithIdOnly = await prisma.userProfile.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, UserProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserProfile.
     * @param {UserProfileDeleteArgs} args - Arguments to delete one UserProfile.
     * @example
     * // Delete one UserProfile
     * const UserProfile = await prisma.userProfile.delete({
     *   where: {
     *     // ... filter to delete one UserProfile
     *   }
     * })
     * 
     */
    delete<T extends UserProfileDeleteArgs>(args: SelectSubset<T, UserProfileDeleteArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserProfile.
     * @param {UserProfileUpdateArgs} args - Arguments to update one UserProfile.
     * @example
     * // Update one UserProfile
     * const userProfile = await prisma.userProfile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserProfileUpdateArgs>(args: SelectSubset<T, UserProfileUpdateArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserProfiles.
     * @param {UserProfileDeleteManyArgs} args - Arguments to filter UserProfiles to delete.
     * @example
     * // Delete a few UserProfiles
     * const { count } = await prisma.userProfile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserProfileDeleteManyArgs>(args?: SelectSubset<T, UserProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserProfiles
     * const userProfile = await prisma.userProfile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserProfileUpdateManyArgs>(args: SelectSubset<T, UserProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserProfile.
     * @param {UserProfileUpsertArgs} args - Arguments to update or create a UserProfile.
     * @example
     * // Update or create a UserProfile
     * const userProfile = await prisma.userProfile.upsert({
     *   create: {
     *     // ... data to create a UserProfile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserProfile we want to update
     *   }
     * })
     */
    upsert<T extends UserProfileUpsertArgs>(args: SelectSubset<T, UserProfileUpsertArgs<ExtArgs>>): Prisma__UserProfileClient<$Result.GetResult<Prisma.$UserProfilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserProfiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileCountArgs} args - Arguments to filter UserProfiles to count.
     * @example
     * // Count the number of UserProfiles
     * const count = await prisma.userProfile.count({
     *   where: {
     *     // ... the filter for the UserProfiles we want to count
     *   }
     * })
    **/
    count<T extends UserProfileCountArgs>(
      args?: Subset<T, UserProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserProfileAggregateArgs>(args: Subset<T, UserProfileAggregateArgs>): Prisma.PrismaPromise<GetUserProfileAggregateType<T>>

    /**
     * Group by UserProfile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserProfileGroupByArgs['orderBy'] }
        : { orderBy?: UserProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserProfile model
   */
  readonly fields: UserProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserProfile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    advisoryTeacher<T extends UserProfile$advisoryTeacherArgs<ExtArgs> = {}>(args?: Subset<T, UserProfile$advisoryTeacherArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserProfile model
   */ 
  interface UserProfileFieldRefs {
    readonly id: FieldRef<"UserProfile", 'String'>
    readonly userId: FieldRef<"UserProfile", 'String'>
    readonly firstName: FieldRef<"UserProfile", 'String'>
    readonly lastName: FieldRef<"UserProfile", 'String'>
    readonly dateOfBirth: FieldRef<"UserProfile", 'DateTime'>
    readonly phone: FieldRef<"UserProfile", 'String'>
    readonly street: FieldRef<"UserProfile", 'String'>
    readonly city: FieldRef<"UserProfile", 'String'>
    readonly state: FieldRef<"UserProfile", 'String'>
    readonly zipCode: FieldRef<"UserProfile", 'String'>
    readonly country: FieldRef<"UserProfile", 'String'>
    readonly studentId: FieldRef<"UserProfile", 'String'>
    readonly grade: FieldRef<"UserProfile", 'String'>
    readonly gpa: FieldRef<"UserProfile", 'Float'>
    readonly enrollmentDate: FieldRef<"UserProfile", 'DateTime'>
    readonly graduationDate: FieldRef<"UserProfile", 'DateTime'>
    readonly major: FieldRef<"UserProfile", 'String'>
    readonly minor: FieldRef<"UserProfile", 'String'>
    readonly employeeId: FieldRef<"UserProfile", 'String'>
    readonly department: FieldRef<"UserProfile", 'String'>
    readonly position: FieldRef<"UserProfile", 'String'>
    readonly hireDate: FieldRef<"UserProfile", 'DateTime'>
    readonly specialization: FieldRef<"UserProfile", 'String[]'>
    readonly officeLocation: FieldRef<"UserProfile", 'String'>
    readonly officeHours: FieldRef<"UserProfile", 'String'>
    readonly advisoryTeacherId: FieldRef<"UserProfile", 'String'>
    readonly emergencyContactName: FieldRef<"UserProfile", 'String'>
    readonly emergencyContactRelationship: FieldRef<"UserProfile", 'String'>
    readonly emergencyContactPhone: FieldRef<"UserProfile", 'String'>
    readonly emergencyContactEmail: FieldRef<"UserProfile", 'String'>
    readonly theme: FieldRef<"UserProfile", 'ThemeMode'>
    readonly language: FieldRef<"UserProfile", 'String'>
    readonly timezone: FieldRef<"UserProfile", 'String'>
    readonly emailNotifications: FieldRef<"UserProfile", 'Boolean'>
    readonly pushNotifications: FieldRef<"UserProfile", 'Boolean'>
    readonly smsNotifications: FieldRef<"UserProfile", 'Boolean'>
    readonly profileVisibility: FieldRef<"UserProfile", 'Visibility'>
    readonly showEmail: FieldRef<"UserProfile", 'Boolean'>
    readonly showPhone: FieldRef<"UserProfile", 'Boolean'>
    readonly createdAt: FieldRef<"UserProfile", 'DateTime'>
    readonly updatedAt: FieldRef<"UserProfile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserProfile findUnique
   */
  export type UserProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findUniqueOrThrow
   */
  export type UserProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile findFirst
   */
  export type UserProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findFirstOrThrow
   */
  export type UserProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfile to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserProfiles.
     */
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile findMany
   */
  export type UserProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter, which UserProfiles to fetch.
     */
    where?: UserProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserProfiles to fetch.
     */
    orderBy?: UserProfileOrderByWithRelationInput | UserProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserProfiles.
     */
    cursor?: UserProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserProfiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserProfiles.
     */
    skip?: number
    distinct?: UserProfileScalarFieldEnum | UserProfileScalarFieldEnum[]
  }

  /**
   * UserProfile create
   */
  export type UserProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a UserProfile.
     */
    data: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
  }

  /**
   * UserProfile createMany
   */
  export type UserProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserProfile createManyAndReturn
   */
  export type UserProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserProfiles.
     */
    data: UserProfileCreateManyInput | UserProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserProfile update
   */
  export type UserProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a UserProfile.
     */
    data: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
    /**
     * Choose, which UserProfile to update.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile updateMany
   */
  export type UserProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserProfiles.
     */
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyInput>
    /**
     * Filter which UserProfiles to update
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile upsert
   */
  export type UserProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the UserProfile to update in case it exists.
     */
    where: UserProfileWhereUniqueInput
    /**
     * In case the UserProfile found by the `where` argument doesn't exist, create a new UserProfile with this data.
     */
    create: XOR<UserProfileCreateInput, UserProfileUncheckedCreateInput>
    /**
     * In case the UserProfile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserProfileUpdateInput, UserProfileUncheckedUpdateInput>
  }

  /**
   * UserProfile delete
   */
  export type UserProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
    /**
     * Filter which UserProfile to delete.
     */
    where: UserProfileWhereUniqueInput
  }

  /**
   * UserProfile deleteMany
   */
  export type UserProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserProfiles to delete
     */
    where?: UserProfileWhereInput
  }

  /**
   * UserProfile.advisoryTeacher
   */
  export type UserProfile$advisoryTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserProfile without action
   */
  export type UserProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserProfile
     */
    select?: UserProfileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserProfileInclude<ExtArgs> | null
  }


  /**
   * Model UserActivity
   */

  export type AggregateUserActivity = {
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  export type UserActivityMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UserActivityMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type UserActivityCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    details: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type UserActivityMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type UserActivityMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type UserActivityCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type UserActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivity to aggregate.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivities
    **/
    _count?: true | UserActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityMaxAggregateInputType
  }

  export type GetUserActivityAggregateType<T extends UserActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivity[P]>
      : GetScalarType<T[P], AggregateUserActivity[P]>
  }




  export type UserActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithAggregationInput | UserActivityOrderByWithAggregationInput[]
    by: UserActivityScalarFieldEnum[] | UserActivityScalarFieldEnum
    having?: UserActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityCountAggregateInputType | true
    _min?: UserActivityMinAggregateInputType
    _max?: UserActivityMaxAggregateInputType
  }

  export type UserActivityGroupByOutputType = {
    id: string
    userId: string
    action: string
    details: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: UserActivityCountAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  type GetUserActivityGroupByPayload<T extends UserActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
        }
      >
    >


  export type UserActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type UserActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      action: string
      details: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["userActivity"]>
    composites: {}
  }

  type UserActivityGetPayload<S extends boolean | null | undefined | UserActivityDefaultArgs> = $Result.GetResult<Prisma.$UserActivityPayload, S>

  type UserActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserActivityCountAggregateInputType | true
    }

  export interface UserActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserActivity'], meta: { name: 'UserActivity' } }
    /**
     * Find zero or one UserActivity that matches the filter.
     * @param {UserActivityFindUniqueArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActivityFindUniqueArgs>(args: SelectSubset<T, UserActivityFindUniqueArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserActivityFindUniqueOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActivityFindFirstArgs>(args?: SelectSubset<T, UserActivityFindFirstArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivities
     * const userActivities = await prisma.userActivity.findMany()
     * 
     * // Get first 10 UserActivities
     * const userActivities = await prisma.userActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActivityFindManyArgs>(args?: SelectSubset<T, UserActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserActivity.
     * @param {UserActivityCreateArgs} args - Arguments to create a UserActivity.
     * @example
     * // Create one UserActivity
     * const UserActivity = await prisma.userActivity.create({
     *   data: {
     *     // ... data to create a UserActivity
     *   }
     * })
     * 
     */
    create<T extends UserActivityCreateArgs>(args: SelectSubset<T, UserActivityCreateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserActivities.
     * @param {UserActivityCreateManyArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActivityCreateManyArgs>(args?: SelectSubset<T, UserActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserActivities and returns the data saved in the database.
     * @param {UserActivityCreateManyAndReturnArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserActivity.
     * @param {UserActivityDeleteArgs} args - Arguments to delete one UserActivity.
     * @example
     * // Delete one UserActivity
     * const UserActivity = await prisma.userActivity.delete({
     *   where: {
     *     // ... filter to delete one UserActivity
     *   }
     * })
     * 
     */
    delete<T extends UserActivityDeleteArgs>(args: SelectSubset<T, UserActivityDeleteArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserActivity.
     * @param {UserActivityUpdateArgs} args - Arguments to update one UserActivity.
     * @example
     * // Update one UserActivity
     * const userActivity = await prisma.userActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActivityUpdateArgs>(args: SelectSubset<T, UserActivityUpdateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserActivities.
     * @param {UserActivityDeleteManyArgs} args - Arguments to filter UserActivities to delete.
     * @example
     * // Delete a few UserActivities
     * const { count } = await prisma.userActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActivityDeleteManyArgs>(args?: SelectSubset<T, UserActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActivityUpdateManyArgs>(args: SelectSubset<T, UserActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserActivity.
     * @param {UserActivityUpsertArgs} args - Arguments to update or create a UserActivity.
     * @example
     * // Update or create a UserActivity
     * const userActivity = await prisma.userActivity.upsert({
     *   create: {
     *     // ... data to create a UserActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivity we want to update
     *   }
     * })
     */
    upsert<T extends UserActivityUpsertArgs>(args: SelectSubset<T, UserActivityUpsertArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityCountArgs} args - Arguments to filter UserActivities to count.
     * @example
     * // Count the number of UserActivities
     * const count = await prisma.userActivity.count({
     *   where: {
     *     // ... the filter for the UserActivities we want to count
     *   }
     * })
    **/
    count<T extends UserActivityCountArgs>(
      args?: Subset<T, UserActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityAggregateArgs>(args: Subset<T, UserActivityAggregateArgs>): Prisma.PrismaPromise<GetUserActivityAggregateType<T>>

    /**
     * Group by UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserActivity model
   */
  readonly fields: UserActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserActivity model
   */ 
  interface UserActivityFieldRefs {
    readonly id: FieldRef<"UserActivity", 'String'>
    readonly userId: FieldRef<"UserActivity", 'String'>
    readonly action: FieldRef<"UserActivity", 'String'>
    readonly details: FieldRef<"UserActivity", 'Json'>
    readonly ipAddress: FieldRef<"UserActivity", 'String'>
    readonly userAgent: FieldRef<"UserActivity", 'String'>
    readonly createdAt: FieldRef<"UserActivity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserActivity findUnique
   */
  export type UserActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findUniqueOrThrow
   */
  export type UserActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findFirst
   */
  export type UserActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findFirstOrThrow
   */
  export type UserActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findMany
   */
  export type UserActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivities to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity create
   */
  export type UserActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserActivity.
     */
    data: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
  }

  /**
   * UserActivity createMany
   */
  export type UserActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserActivity createManyAndReturn
   */
  export type UserActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity update
   */
  export type UserActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserActivity.
     */
    data: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
    /**
     * Choose, which UserActivity to update.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity updateMany
   */
  export type UserActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
  }

  /**
   * UserActivity upsert
   */
  export type UserActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserActivity to update in case it exists.
     */
    where: UserActivityWhereUniqueInput
    /**
     * In case the UserActivity found by the `where` argument doesn't exist, create a new UserActivity with this data.
     */
    create: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
    /**
     * In case the UserActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
  }

  /**
   * UserActivity delete
   */
  export type UserActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter which UserActivity to delete.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity deleteMany
   */
  export type UserActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivities to delete
     */
    where?: UserActivityWhereInput
  }

  /**
   * UserActivity without action
   */
  export type UserActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    category: string | null
    createdAt: Date | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    description: number
    category: number
    createdAt: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    category?: true
    createdAt?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    description: string | null
    category: string | null
    createdAt: Date
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    category?: boolean
    createdAt?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rolePermissions?: boolean | Permission$rolePermissionsArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      rolePermissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      category: string | null
      createdAt: Date
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rolePermissions<T extends Permission$rolePermissionsArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolePermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly category: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.rolePermissions
   */
  export type Permission$rolePermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    permissionId: string | null
    requiresSupervisor: boolean | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    id: string | null
    role: $Enums.UserRole | null
    permissionId: string | null
    requiresSupervisor: boolean | null
  }

  export type RolePermissionCountAggregateOutputType = {
    id: number
    role: number
    permissionId: number
    requiresSupervisor: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    id?: true
    role?: true
    permissionId?: true
    requiresSupervisor?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    id?: true
    role?: true
    permissionId?: true
    requiresSupervisor?: true
  }

  export type RolePermissionCountAggregateInputType = {
    id?: true
    role?: true
    permissionId?: true
    requiresSupervisor?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    id: string
    role: $Enums.UserRole
    permissionId: string
    requiresSupervisor: boolean
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    permissionId?: boolean
    requiresSupervisor?: boolean
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    permissionId?: boolean
    requiresSupervisor?: boolean
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>

  export type RolePermissionSelectScalar = {
    id?: boolean
    role?: boolean
    permissionId?: boolean
    requiresSupervisor?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type RolePermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      role: $Enums.UserRole
      permissionId: string
      requiresSupervisor: boolean
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RolePermissions and returns the data saved in the database.
     * @param {RolePermissionCreateManyAndReturnArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RolePermissions and only return the `id`
     * const rolePermissionWithIdOnly = await prisma.rolePermission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RolePermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, RolePermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly id: FieldRef<"RolePermission", 'String'>
    readonly role: FieldRef<"RolePermission", 'UserRole'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
    readonly requiresSupervisor: FieldRef<"RolePermission", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission createManyAndReturn
   */
  export type RolePermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    departmentHeadId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    departmentHeadId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    departmentHeadId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentHeadId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentHeadId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentHeadId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    departmentHeadId: string | null
    createdAt: Date
    updatedAt: Date
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentHeadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentHead?: boolean | Department$departmentHeadArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentHeadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentHead?: boolean | Department$departmentHeadArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentHeadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentHead?: boolean | Department$departmentHeadArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentHead?: boolean | Department$departmentHeadArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      departmentHead: Prisma.$UserPayload<ExtArgs> | null
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      departmentHeadId: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departmentHead<T extends Department$departmentHeadArgs<ExtArgs> = {}>(args?: Subset<T, Department$departmentHeadArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    courses<T extends Department$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Department$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */ 
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly departmentHeadId: FieldRef<"Department", 'String'>
    readonly createdAt: FieldRef<"Department", 'DateTime'>
    readonly updatedAt: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
  }

  /**
   * Department.departmentHead
   */
  export type Department$departmentHeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.courses
   */
  export type Department$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    credits: number | null
    year: number | null
    capacity: number | null
    enrolled: number | null
  }

  export type CourseSumAggregateOutputType = {
    credits: number | null
    year: number | null
    capacity: number | null
    enrolled: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    startTime: string | null
    endTime: string | null
    location: string | null
    building: string | null
    room: string | null
    createdById: string | null
    instructorId: string | null
    semester: string | null
    year: number | null
    capacity: number | null
    enrolled: number | null
    status: $Enums.CourseStatus | null
    category: string | null
    departmentId: string | null
    level: $Enums.CourseLevel | null
    startDate: Date | null
    endDate: Date | null
    enrollmentDeadline: Date | null
    syllabusUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
    description: string | null
    credits: number | null
    startTime: string | null
    endTime: string | null
    location: string | null
    building: string | null
    room: string | null
    createdById: string | null
    instructorId: string | null
    semester: string | null
    year: number | null
    capacity: number | null
    enrolled: number | null
    status: $Enums.CourseStatus | null
    category: string | null
    departmentId: string | null
    level: $Enums.CourseLevel | null
    startDate: Date | null
    endDate: Date | null
    enrollmentDeadline: Date | null
    syllabusUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    code: number
    name: number
    description: number
    credits: number
    scheduleDays: number
    startTime: number
    endTime: number
    location: number
    building: number
    room: number
    createdById: number
    instructorId: number
    semester: number
    year: number
    capacity: number
    enrolled: number
    status: number
    category: number
    departmentId: number
    level: number
    startDate: number
    endDate: number
    enrollmentDeadline: number
    syllabusUrl: number
    studyPlan: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    credits?: true
    year?: true
    capacity?: true
    enrolled?: true
  }

  export type CourseSumAggregateInputType = {
    credits?: true
    year?: true
    capacity?: true
    enrolled?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    startTime?: true
    endTime?: true
    location?: true
    building?: true
    room?: true
    createdById?: true
    instructorId?: true
    semester?: true
    year?: true
    capacity?: true
    enrolled?: true
    status?: true
    category?: true
    departmentId?: true
    level?: true
    startDate?: true
    endDate?: true
    enrollmentDeadline?: true
    syllabusUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    startTime?: true
    endTime?: true
    location?: true
    building?: true
    room?: true
    createdById?: true
    instructorId?: true
    semester?: true
    year?: true
    capacity?: true
    enrolled?: true
    status?: true
    category?: true
    departmentId?: true
    level?: true
    startDate?: true
    endDate?: true
    enrollmentDeadline?: true
    syllabusUrl?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    description?: true
    credits?: true
    scheduleDays?: true
    startTime?: true
    endTime?: true
    location?: true
    building?: true
    room?: true
    createdById?: true
    instructorId?: true
    semester?: true
    year?: true
    capacity?: true
    enrolled?: true
    status?: true
    category?: true
    departmentId?: true
    level?: true
    startDate?: true
    endDate?: true
    enrollmentDeadline?: true
    syllabusUrl?: true
    studyPlan?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays: string[]
    startTime: string
    endTime: string
    location: string
    building: string | null
    room: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled: number
    status: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date
    endDate: Date
    enrollmentDeadline: Date | null
    syllabusUrl: string | null
    studyPlan: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    scheduleDays?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    building?: boolean
    room?: boolean
    createdById?: boolean
    instructorId?: boolean
    semester?: boolean
    year?: boolean
    capacity?: boolean
    enrolled?: boolean
    status?: boolean
    category?: boolean
    departmentId?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    enrollmentDeadline?: boolean
    syllabusUrl?: boolean
    studyPlan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    prerequisites?: boolean | Course$prerequisitesArgs<ExtArgs>
    prerequisiteFor?: boolean | Course$prerequisiteForArgs<ExtArgs>
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    courseMaterials?: boolean | Course$courseMaterialsArgs<ExtArgs>
    quizzes?: boolean | Course$quizzesArgs<ExtArgs>
    announcements?: boolean | Course$announcementsArgs<ExtArgs>
    classSessions?: boolean | Course$classSessionsArgs<ExtArgs>
    grades?: boolean | Course$gradesArgs<ExtArgs>
    teacherAssignments?: boolean | Course$teacherAssignmentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    scheduleDays?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    building?: boolean
    room?: boolean
    createdById?: boolean
    instructorId?: boolean
    semester?: boolean
    year?: boolean
    capacity?: boolean
    enrolled?: boolean
    status?: boolean
    category?: boolean
    departmentId?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    enrollmentDeadline?: boolean
    syllabusUrl?: boolean
    studyPlan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    description?: boolean
    credits?: boolean
    scheduleDays?: boolean
    startTime?: boolean
    endTime?: boolean
    location?: boolean
    building?: boolean
    room?: boolean
    createdById?: boolean
    instructorId?: boolean
    semester?: boolean
    year?: boolean
    capacity?: boolean
    enrolled?: boolean
    status?: boolean
    category?: boolean
    departmentId?: boolean
    level?: boolean
    startDate?: boolean
    endDate?: boolean
    enrollmentDeadline?: boolean
    syllabusUrl?: boolean
    studyPlan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    prerequisites?: boolean | Course$prerequisitesArgs<ExtArgs>
    prerequisiteFor?: boolean | Course$prerequisiteForArgs<ExtArgs>
    enrollments?: boolean | Course$enrollmentsArgs<ExtArgs>
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    courseMaterials?: boolean | Course$courseMaterialsArgs<ExtArgs>
    quizzes?: boolean | Course$quizzesArgs<ExtArgs>
    announcements?: boolean | Course$announcementsArgs<ExtArgs>
    classSessions?: boolean | Course$classSessionsArgs<ExtArgs>
    grades?: boolean | Course$gradesArgs<ExtArgs>
    teacherAssignments?: boolean | Course$teacherAssignmentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    instructor?: boolean | UserDefaultArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      instructor: Prisma.$UserPayload<ExtArgs>
      department: Prisma.$DepartmentPayload<ExtArgs>
      prerequisites: Prisma.$CoursePayload<ExtArgs>[]
      prerequisiteFor: Prisma.$CoursePayload<ExtArgs>[]
      enrollments: Prisma.$EnrollmentPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      courseMaterials: Prisma.$CourseMaterialPayload<ExtArgs>[]
      quizzes: Prisma.$QuizPayload<ExtArgs>[]
      announcements: Prisma.$CourseAnnouncementPayload<ExtArgs>[]
      classSessions: Prisma.$ClassSessionPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
      teacherAssignments: Prisma.$TeacherCourseAssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
      description: string
      credits: number
      scheduleDays: string[]
      startTime: string
      endTime: string
      location: string
      building: string | null
      room: string | null
      createdById: string
      instructorId: string
      semester: string
      year: number
      capacity: number
      enrolled: number
      status: $Enums.CourseStatus
      category: string
      departmentId: string
      level: $Enums.CourseLevel
      startDate: Date
      endDate: Date
      enrollmentDeadline: Date | null
      syllabusUrl: string | null
      studyPlan: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    instructor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    prerequisites<T extends Course$prerequisitesArgs<ExtArgs> = {}>(args?: Subset<T, Course$prerequisitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    prerequisiteFor<T extends Course$prerequisiteForArgs<ExtArgs> = {}>(args?: Subset<T, Course$prerequisiteForArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany"> | Null>
    enrollments<T extends Course$enrollmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$enrollmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany"> | Null>
    assignments<T extends Course$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    courseMaterials<T extends Course$courseMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, Course$courseMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    quizzes<T extends Course$quizzesArgs<ExtArgs> = {}>(args?: Subset<T, Course$quizzesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany"> | Null>
    announcements<T extends Course$announcementsArgs<ExtArgs> = {}>(args?: Subset<T, Course$announcementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findMany"> | Null>
    classSessions<T extends Course$classSessionsArgs<ExtArgs> = {}>(args?: Subset<T, Course$classSessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findMany"> | Null>
    grades<T extends Course$gradesArgs<ExtArgs> = {}>(args?: Subset<T, Course$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    teacherAssignments<T extends Course$teacherAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$teacherAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly code: FieldRef<"Course", 'String'>
    readonly name: FieldRef<"Course", 'String'>
    readonly description: FieldRef<"Course", 'String'>
    readonly credits: FieldRef<"Course", 'Int'>
    readonly scheduleDays: FieldRef<"Course", 'String[]'>
    readonly startTime: FieldRef<"Course", 'String'>
    readonly endTime: FieldRef<"Course", 'String'>
    readonly location: FieldRef<"Course", 'String'>
    readonly building: FieldRef<"Course", 'String'>
    readonly room: FieldRef<"Course", 'String'>
    readonly createdById: FieldRef<"Course", 'String'>
    readonly instructorId: FieldRef<"Course", 'String'>
    readonly semester: FieldRef<"Course", 'String'>
    readonly year: FieldRef<"Course", 'Int'>
    readonly capacity: FieldRef<"Course", 'Int'>
    readonly enrolled: FieldRef<"Course", 'Int'>
    readonly status: FieldRef<"Course", 'CourseStatus'>
    readonly category: FieldRef<"Course", 'String'>
    readonly departmentId: FieldRef<"Course", 'String'>
    readonly level: FieldRef<"Course", 'CourseLevel'>
    readonly startDate: FieldRef<"Course", 'DateTime'>
    readonly endDate: FieldRef<"Course", 'DateTime'>
    readonly enrollmentDeadline: FieldRef<"Course", 'DateTime'>
    readonly syllabusUrl: FieldRef<"Course", 'String'>
    readonly studyPlan: FieldRef<"Course", 'Json'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.prerequisites
   */
  export type Course$prerequisitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course.prerequisiteFor
   */
  export type Course$prerequisiteForArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course.enrollments
   */
  export type Course$enrollmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    cursor?: EnrollmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Course.assignments
   */
  export type Course$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Course.courseMaterials
   */
  export type Course$courseMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    where?: CourseMaterialWhereInput
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    cursor?: CourseMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * Course.quizzes
   */
  export type Course$quizzesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    cursor?: QuizWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Course.announcements
   */
  export type Course$announcementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    where?: CourseAnnouncementWhereInput
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    cursor?: CourseAnnouncementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseAnnouncementScalarFieldEnum | CourseAnnouncementScalarFieldEnum[]
  }

  /**
   * Course.classSessions
   */
  export type Course$classSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    where?: ClassSessionWhereInput
    orderBy?: ClassSessionOrderByWithRelationInput | ClassSessionOrderByWithRelationInput[]
    cursor?: ClassSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassSessionScalarFieldEnum | ClassSessionScalarFieldEnum[]
  }

  /**
   * Course.grades
   */
  export type Course$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Course.teacherAssignments
   */
  export type Course$teacherAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    where?: TeacherCourseAssignmentWhereInput
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Enrollment
   */

  export type AggregateEnrollment = {
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  export type EnrollmentAvgAggregateOutputType = {
    finalPoints: number | null
    completed: number | null
    total: number | null
    currentGrade: number | null
    attendance: number | null
  }

  export type EnrollmentSumAggregateOutputType = {
    finalPoints: number | null
    completed: number | null
    total: number | null
    currentGrade: number | null
    attendance: number | null
  }

  export type EnrollmentMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    enrolledById: string | null
    enrollmentDate: Date | null
    status: $Enums.EnrollmentStatus | null
    finalGrade: string | null
    finalPoints: number | null
    completed: number | null
    total: number | null
    currentGrade: number | null
    attendance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    enrolledById: string | null
    enrollmentDate: Date | null
    status: $Enums.EnrollmentStatus | null
    finalGrade: string | null
    finalPoints: number | null
    completed: number | null
    total: number | null
    currentGrade: number | null
    attendance: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EnrollmentCountAggregateOutputType = {
    id: number
    studentId: number
    courseId: number
    enrolledById: number
    enrollmentDate: number
    status: number
    finalGrade: number
    finalPoints: number
    completed: number
    total: number
    currentGrade: number
    attendance: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EnrollmentAvgAggregateInputType = {
    finalPoints?: true
    completed?: true
    total?: true
    currentGrade?: true
    attendance?: true
  }

  export type EnrollmentSumAggregateInputType = {
    finalPoints?: true
    completed?: true
    total?: true
    currentGrade?: true
    attendance?: true
  }

  export type EnrollmentMinAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    enrolledById?: true
    enrollmentDate?: true
    status?: true
    finalGrade?: true
    finalPoints?: true
    completed?: true
    total?: true
    currentGrade?: true
    attendance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    enrolledById?: true
    enrollmentDate?: true
    status?: true
    finalGrade?: true
    finalPoints?: true
    completed?: true
    total?: true
    currentGrade?: true
    attendance?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EnrollmentCountAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    enrolledById?: true
    enrollmentDate?: true
    status?: true
    finalGrade?: true
    finalPoints?: true
    completed?: true
    total?: true
    currentGrade?: true
    attendance?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EnrollmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollment to aggregate.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Enrollments
    **/
    _count?: true | EnrollmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EnrollmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EnrollmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EnrollmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EnrollmentMaxAggregateInputType
  }

  export type GetEnrollmentAggregateType<T extends EnrollmentAggregateArgs> = {
        [P in keyof T & keyof AggregateEnrollment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEnrollment[P]>
      : GetScalarType<T[P], AggregateEnrollment[P]>
  }




  export type EnrollmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EnrollmentWhereInput
    orderBy?: EnrollmentOrderByWithAggregationInput | EnrollmentOrderByWithAggregationInput[]
    by: EnrollmentScalarFieldEnum[] | EnrollmentScalarFieldEnum
    having?: EnrollmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EnrollmentCountAggregateInputType | true
    _avg?: EnrollmentAvgAggregateInputType
    _sum?: EnrollmentSumAggregateInputType
    _min?: EnrollmentMinAggregateInputType
    _max?: EnrollmentMaxAggregateInputType
  }

  export type EnrollmentGroupByOutputType = {
    id: string
    studentId: string
    courseId: string
    enrolledById: string
    enrollmentDate: Date
    status: $Enums.EnrollmentStatus
    finalGrade: string | null
    finalPoints: number | null
    completed: number
    total: number
    currentGrade: number | null
    attendance: number | null
    createdAt: Date
    updatedAt: Date
    _count: EnrollmentCountAggregateOutputType | null
    _avg: EnrollmentAvgAggregateOutputType | null
    _sum: EnrollmentSumAggregateOutputType | null
    _min: EnrollmentMinAggregateOutputType | null
    _max: EnrollmentMaxAggregateOutputType | null
  }

  type GetEnrollmentGroupByPayload<T extends EnrollmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EnrollmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EnrollmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
            : GetScalarType<T[P], EnrollmentGroupByOutputType[P]>
        }
      >
    >


  export type EnrollmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    enrolledById?: boolean
    enrollmentDate?: boolean
    status?: boolean
    finalGrade?: boolean
    finalPoints?: boolean
    completed?: boolean
    total?: boolean
    currentGrade?: boolean
    attendance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    enrolledBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    enrolledById?: boolean
    enrollmentDate?: boolean
    status?: boolean
    finalGrade?: boolean
    finalPoints?: boolean
    completed?: boolean
    total?: boolean
    currentGrade?: boolean
    attendance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    enrolledBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["enrollment"]>

  export type EnrollmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    enrolledById?: boolean
    enrollmentDate?: boolean
    status?: boolean
    finalGrade?: boolean
    finalPoints?: boolean
    completed?: boolean
    total?: boolean
    currentGrade?: boolean
    attendance?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EnrollmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    enrolledBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type EnrollmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    enrolledBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $EnrollmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Enrollment"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
      enrolledBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      courseId: string
      enrolledById: string
      enrollmentDate: Date
      status: $Enums.EnrollmentStatus
      finalGrade: string | null
      finalPoints: number | null
      completed: number
      total: number
      currentGrade: number | null
      attendance: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["enrollment"]>
    composites: {}
  }

  type EnrollmentGetPayload<S extends boolean | null | undefined | EnrollmentDefaultArgs> = $Result.GetResult<Prisma.$EnrollmentPayload, S>

  type EnrollmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EnrollmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EnrollmentCountAggregateInputType | true
    }

  export interface EnrollmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Enrollment'], meta: { name: 'Enrollment' } }
    /**
     * Find zero or one Enrollment that matches the filter.
     * @param {EnrollmentFindUniqueArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EnrollmentFindUniqueArgs>(args: SelectSubset<T, EnrollmentFindUniqueArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Enrollment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EnrollmentFindUniqueOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EnrollmentFindUniqueOrThrowArgs>(args: SelectSubset<T, EnrollmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EnrollmentFindFirstArgs>(args?: SelectSubset<T, EnrollmentFindFirstArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Enrollment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindFirstOrThrowArgs} args - Arguments to find a Enrollment
     * @example
     * // Get one Enrollment
     * const enrollment = await prisma.enrollment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EnrollmentFindFirstOrThrowArgs>(args?: SelectSubset<T, EnrollmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Enrollments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Enrollments
     * const enrollments = await prisma.enrollment.findMany()
     * 
     * // Get first 10 Enrollments
     * const enrollments = await prisma.enrollment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EnrollmentFindManyArgs>(args?: SelectSubset<T, EnrollmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Enrollment.
     * @param {EnrollmentCreateArgs} args - Arguments to create a Enrollment.
     * @example
     * // Create one Enrollment
     * const Enrollment = await prisma.enrollment.create({
     *   data: {
     *     // ... data to create a Enrollment
     *   }
     * })
     * 
     */
    create<T extends EnrollmentCreateArgs>(args: SelectSubset<T, EnrollmentCreateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Enrollments.
     * @param {EnrollmentCreateManyArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EnrollmentCreateManyArgs>(args?: SelectSubset<T, EnrollmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Enrollments and returns the data saved in the database.
     * @param {EnrollmentCreateManyAndReturnArgs} args - Arguments to create many Enrollments.
     * @example
     * // Create many Enrollments
     * const enrollment = await prisma.enrollment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Enrollments and only return the `id`
     * const enrollmentWithIdOnly = await prisma.enrollment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EnrollmentCreateManyAndReturnArgs>(args?: SelectSubset<T, EnrollmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Enrollment.
     * @param {EnrollmentDeleteArgs} args - Arguments to delete one Enrollment.
     * @example
     * // Delete one Enrollment
     * const Enrollment = await prisma.enrollment.delete({
     *   where: {
     *     // ... filter to delete one Enrollment
     *   }
     * })
     * 
     */
    delete<T extends EnrollmentDeleteArgs>(args: SelectSubset<T, EnrollmentDeleteArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Enrollment.
     * @param {EnrollmentUpdateArgs} args - Arguments to update one Enrollment.
     * @example
     * // Update one Enrollment
     * const enrollment = await prisma.enrollment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EnrollmentUpdateArgs>(args: SelectSubset<T, EnrollmentUpdateArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Enrollments.
     * @param {EnrollmentDeleteManyArgs} args - Arguments to filter Enrollments to delete.
     * @example
     * // Delete a few Enrollments
     * const { count } = await prisma.enrollment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EnrollmentDeleteManyArgs>(args?: SelectSubset<T, EnrollmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Enrollments
     * const enrollment = await prisma.enrollment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EnrollmentUpdateManyArgs>(args: SelectSubset<T, EnrollmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Enrollment.
     * @param {EnrollmentUpsertArgs} args - Arguments to update or create a Enrollment.
     * @example
     * // Update or create a Enrollment
     * const enrollment = await prisma.enrollment.upsert({
     *   create: {
     *     // ... data to create a Enrollment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Enrollment we want to update
     *   }
     * })
     */
    upsert<T extends EnrollmentUpsertArgs>(args: SelectSubset<T, EnrollmentUpsertArgs<ExtArgs>>): Prisma__EnrollmentClient<$Result.GetResult<Prisma.$EnrollmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Enrollments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentCountArgs} args - Arguments to filter Enrollments to count.
     * @example
     * // Count the number of Enrollments
     * const count = await prisma.enrollment.count({
     *   where: {
     *     // ... the filter for the Enrollments we want to count
     *   }
     * })
    **/
    count<T extends EnrollmentCountArgs>(
      args?: Subset<T, EnrollmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EnrollmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EnrollmentAggregateArgs>(args: Subset<T, EnrollmentAggregateArgs>): Prisma.PrismaPromise<GetEnrollmentAggregateType<T>>

    /**
     * Group by Enrollment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EnrollmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EnrollmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EnrollmentGroupByArgs['orderBy'] }
        : { orderBy?: EnrollmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EnrollmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEnrollmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Enrollment model
   */
  readonly fields: EnrollmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Enrollment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EnrollmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    enrolledBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Enrollment model
   */ 
  interface EnrollmentFieldRefs {
    readonly id: FieldRef<"Enrollment", 'String'>
    readonly studentId: FieldRef<"Enrollment", 'String'>
    readonly courseId: FieldRef<"Enrollment", 'String'>
    readonly enrolledById: FieldRef<"Enrollment", 'String'>
    readonly enrollmentDate: FieldRef<"Enrollment", 'DateTime'>
    readonly status: FieldRef<"Enrollment", 'EnrollmentStatus'>
    readonly finalGrade: FieldRef<"Enrollment", 'String'>
    readonly finalPoints: FieldRef<"Enrollment", 'Float'>
    readonly completed: FieldRef<"Enrollment", 'Int'>
    readonly total: FieldRef<"Enrollment", 'Int'>
    readonly currentGrade: FieldRef<"Enrollment", 'Float'>
    readonly attendance: FieldRef<"Enrollment", 'Float'>
    readonly createdAt: FieldRef<"Enrollment", 'DateTime'>
    readonly updatedAt: FieldRef<"Enrollment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Enrollment findUnique
   */
  export type EnrollmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findUniqueOrThrow
   */
  export type EnrollmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment findFirst
   */
  export type EnrollmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findFirstOrThrow
   */
  export type EnrollmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollment to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Enrollments.
     */
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment findMany
   */
  export type EnrollmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter, which Enrollments to fetch.
     */
    where?: EnrollmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Enrollments to fetch.
     */
    orderBy?: EnrollmentOrderByWithRelationInput | EnrollmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Enrollments.
     */
    cursor?: EnrollmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Enrollments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Enrollments.
     */
    skip?: number
    distinct?: EnrollmentScalarFieldEnum | EnrollmentScalarFieldEnum[]
  }

  /**
   * Enrollment create
   */
  export type EnrollmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Enrollment.
     */
    data: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
  }

  /**
   * Enrollment createMany
   */
  export type EnrollmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Enrollment createManyAndReturn
   */
  export type EnrollmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Enrollments.
     */
    data: EnrollmentCreateManyInput | EnrollmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Enrollment update
   */
  export type EnrollmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Enrollment.
     */
    data: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
    /**
     * Choose, which Enrollment to update.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment updateMany
   */
  export type EnrollmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Enrollments.
     */
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyInput>
    /**
     * Filter which Enrollments to update
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment upsert
   */
  export type EnrollmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Enrollment to update in case it exists.
     */
    where: EnrollmentWhereUniqueInput
    /**
     * In case the Enrollment found by the `where` argument doesn't exist, create a new Enrollment with this data.
     */
    create: XOR<EnrollmentCreateInput, EnrollmentUncheckedCreateInput>
    /**
     * In case the Enrollment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EnrollmentUpdateInput, EnrollmentUncheckedUpdateInput>
  }

  /**
   * Enrollment delete
   */
  export type EnrollmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
    /**
     * Filter which Enrollment to delete.
     */
    where: EnrollmentWhereUniqueInput
  }

  /**
   * Enrollment deleteMany
   */
  export type EnrollmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Enrollments to delete
     */
    where?: EnrollmentWhereInput
  }

  /**
   * Enrollment without action
   */
  export type EnrollmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Enrollment
     */
    select?: EnrollmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EnrollmentInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    maxPoints: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    maxPoints: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    createdById: string | null
    title: string | null
    description: string | null
    type: $Enums.AssignmentType | null
    assignedDate: Date | null
    dueDate: Date | null
    maxPoints: number | null
    isGroupWork: boolean | null
    status: $Enums.AssignmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    createdById: string | null
    title: string | null
    description: string | null
    type: $Enums.AssignmentType | null
    assignedDate: Date | null
    dueDate: Date | null
    maxPoints: number | null
    isGroupWork: boolean | null
    status: $Enums.AssignmentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    courseId: number
    createdById: number
    title: number
    description: number
    type: number
    assignedDate: number
    dueDate: number
    maxPoints: number
    isGroupWork: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    maxPoints?: true
  }

  export type AssignmentSumAggregateInputType = {
    maxPoints?: true
  }

  export type AssignmentMinAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    type?: true
    assignedDate?: true
    dueDate?: true
    maxPoints?: true
    isGroupWork?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    type?: true
    assignedDate?: true
    dueDate?: true
    maxPoints?: true
    isGroupWork?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    type?: true
    assignedDate?: true
    dueDate?: true
    maxPoints?: true
    isGroupWork?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate: Date
    dueDate: Date
    maxPoints: number
    isGroupWork: boolean
    status: $Enums.AssignmentStatus
    createdAt: Date
    updatedAt: Date
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    assignedDate?: boolean
    dueDate?: boolean
    maxPoints?: boolean
    isGroupWork?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    grades?: boolean | Assignment$gradesArgs<ExtArgs>
    attachments?: boolean | Assignment$attachmentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    assignedDate?: boolean
    dueDate?: boolean
    maxPoints?: boolean
    isGroupWork?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    assignedDate?: boolean
    dueDate?: boolean
    maxPoints?: boolean
    isGroupWork?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Assignment$submissionsArgs<ExtArgs>
    grades?: boolean | Assignment$gradesArgs<ExtArgs>
    attachments?: boolean | Assignment$attachmentsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      submissions: Prisma.$AssignmentSubmissionPayload<ExtArgs>[]
      grades: Prisma.$GradePayload<ExtArgs>[]
      attachments: Prisma.$FileAttachmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      createdById: string
      title: string
      description: string
      type: $Enums.AssignmentType
      assignedDate: Date
      dueDate: Date
      maxPoints: number
      isGroupWork: boolean
      status: $Enums.AssignmentStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    submissions<T extends Assignment$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findMany"> | Null>
    grades<T extends Assignment$gradesArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$gradesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany"> | Null>
    attachments<T extends Assignment$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */ 
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'String'>
    readonly courseId: FieldRef<"Assignment", 'String'>
    readonly createdById: FieldRef<"Assignment", 'String'>
    readonly title: FieldRef<"Assignment", 'String'>
    readonly description: FieldRef<"Assignment", 'String'>
    readonly type: FieldRef<"Assignment", 'AssignmentType'>
    readonly assignedDate: FieldRef<"Assignment", 'DateTime'>
    readonly dueDate: FieldRef<"Assignment", 'DateTime'>
    readonly maxPoints: FieldRef<"Assignment", 'Float'>
    readonly isGroupWork: FieldRef<"Assignment", 'Boolean'>
    readonly status: FieldRef<"Assignment", 'AssignmentStatus'>
    readonly createdAt: FieldRef<"Assignment", 'DateTime'>
    readonly updatedAt: FieldRef<"Assignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
  }

  /**
   * Assignment.submissions
   */
  export type Assignment$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    where?: AssignmentSubmissionWhereInput
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    cursor?: AssignmentSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * Assignment.grades
   */
  export type Assignment$gradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    cursor?: GradeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Assignment.attachments
   */
  export type Assignment$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    cursor?: FileAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model AssignmentSubmission
   */

  export type AggregateAssignmentSubmission = {
    _count: AssignmentSubmissionCountAggregateOutputType | null
    _min: AssignmentSubmissionMinAggregateOutputType | null
    _max: AssignmentSubmissionMaxAggregateOutputType | null
  }

  export type AssignmentSubmissionMinAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    studentId: string | null
    submittedAt: Date | null
    textContent: string | null
  }

  export type AssignmentSubmissionMaxAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    studentId: string | null
    submittedAt: Date | null
    textContent: string | null
  }

  export type AssignmentSubmissionCountAggregateOutputType = {
    id: number
    assignmentId: number
    studentId: number
    submittedAt: number
    textContent: number
    _all: number
  }


  export type AssignmentSubmissionMinAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    submittedAt?: true
    textContent?: true
  }

  export type AssignmentSubmissionMaxAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    submittedAt?: true
    textContent?: true
  }

  export type AssignmentSubmissionCountAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    submittedAt?: true
    textContent?: true
    _all?: true
  }

  export type AssignmentSubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentSubmission to aggregate.
     */
    where?: AssignmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSubmissions to fetch.
     */
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssignmentSubmissions
    **/
    _count?: true | AssignmentSubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentSubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentSubmissionMaxAggregateInputType
  }

  export type GetAssignmentSubmissionAggregateType<T extends AssignmentSubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignmentSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignmentSubmission[P]>
      : GetScalarType<T[P], AggregateAssignmentSubmission[P]>
  }




  export type AssignmentSubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentSubmissionWhereInput
    orderBy?: AssignmentSubmissionOrderByWithAggregationInput | AssignmentSubmissionOrderByWithAggregationInput[]
    by: AssignmentSubmissionScalarFieldEnum[] | AssignmentSubmissionScalarFieldEnum
    having?: AssignmentSubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentSubmissionCountAggregateInputType | true
    _min?: AssignmentSubmissionMinAggregateInputType
    _max?: AssignmentSubmissionMaxAggregateInputType
  }

  export type AssignmentSubmissionGroupByOutputType = {
    id: string
    assignmentId: string
    studentId: string
    submittedAt: Date
    textContent: string | null
    _count: AssignmentSubmissionCountAggregateOutputType | null
    _min: AssignmentSubmissionMinAggregateOutputType | null
    _max: AssignmentSubmissionMaxAggregateOutputType | null
  }

  type GetAssignmentSubmissionGroupByPayload<T extends AssignmentSubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentSubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentSubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentSubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentSubmissionGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    submittedAt?: boolean
    textContent?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | AssignmentSubmission$filesArgs<ExtArgs>
    grade?: boolean | AssignmentSubmission$gradeArgs<ExtArgs>
    _count?: boolean | AssignmentSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentSubmission"]>

  export type AssignmentSubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    submittedAt?: boolean
    textContent?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentSubmission"]>

  export type AssignmentSubmissionSelectScalar = {
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    submittedAt?: boolean
    textContent?: boolean
  }

  export type AssignmentSubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
    files?: boolean | AssignmentSubmission$filesArgs<ExtArgs>
    grade?: boolean | AssignmentSubmission$gradeArgs<ExtArgs>
    _count?: boolean | AssignmentSubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentSubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AssignmentSubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssignmentSubmission"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
      files: Prisma.$FileAttachmentPayload<ExtArgs>[]
      grade: Prisma.$GradePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assignmentId: string
      studentId: string
      submittedAt: Date
      textContent: string | null
    }, ExtArgs["result"]["assignmentSubmission"]>
    composites: {}
  }

  type AssignmentSubmissionGetPayload<S extends boolean | null | undefined | AssignmentSubmissionDefaultArgs> = $Result.GetResult<Prisma.$AssignmentSubmissionPayload, S>

  type AssignmentSubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AssignmentSubmissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AssignmentSubmissionCountAggregateInputType | true
    }

  export interface AssignmentSubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssignmentSubmission'], meta: { name: 'AssignmentSubmission' } }
    /**
     * Find zero or one AssignmentSubmission that matches the filter.
     * @param {AssignmentSubmissionFindUniqueArgs} args - Arguments to find a AssignmentSubmission
     * @example
     * // Get one AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentSubmissionFindUniqueArgs>(args: SelectSubset<T, AssignmentSubmissionFindUniqueArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AssignmentSubmission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AssignmentSubmissionFindUniqueOrThrowArgs} args - Arguments to find a AssignmentSubmission
     * @example
     * // Get one AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentSubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentSubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AssignmentSubmission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionFindFirstArgs} args - Arguments to find a AssignmentSubmission
     * @example
     * // Get one AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentSubmissionFindFirstArgs>(args?: SelectSubset<T, AssignmentSubmissionFindFirstArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AssignmentSubmission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionFindFirstOrThrowArgs} args - Arguments to find a AssignmentSubmission
     * @example
     * // Get one AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentSubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentSubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AssignmentSubmissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssignmentSubmissions
     * const assignmentSubmissions = await prisma.assignmentSubmission.findMany()
     * 
     * // Get first 10 AssignmentSubmissions
     * const assignmentSubmissions = await prisma.assignmentSubmission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentSubmissionWithIdOnly = await prisma.assignmentSubmission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentSubmissionFindManyArgs>(args?: SelectSubset<T, AssignmentSubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AssignmentSubmission.
     * @param {AssignmentSubmissionCreateArgs} args - Arguments to create a AssignmentSubmission.
     * @example
     * // Create one AssignmentSubmission
     * const AssignmentSubmission = await prisma.assignmentSubmission.create({
     *   data: {
     *     // ... data to create a AssignmentSubmission
     *   }
     * })
     * 
     */
    create<T extends AssignmentSubmissionCreateArgs>(args: SelectSubset<T, AssignmentSubmissionCreateArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AssignmentSubmissions.
     * @param {AssignmentSubmissionCreateManyArgs} args - Arguments to create many AssignmentSubmissions.
     * @example
     * // Create many AssignmentSubmissions
     * const assignmentSubmission = await prisma.assignmentSubmission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentSubmissionCreateManyArgs>(args?: SelectSubset<T, AssignmentSubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssignmentSubmissions and returns the data saved in the database.
     * @param {AssignmentSubmissionCreateManyAndReturnArgs} args - Arguments to create many AssignmentSubmissions.
     * @example
     * // Create many AssignmentSubmissions
     * const assignmentSubmission = await prisma.assignmentSubmission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssignmentSubmissions and only return the `id`
     * const assignmentSubmissionWithIdOnly = await prisma.assignmentSubmission.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentSubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentSubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AssignmentSubmission.
     * @param {AssignmentSubmissionDeleteArgs} args - Arguments to delete one AssignmentSubmission.
     * @example
     * // Delete one AssignmentSubmission
     * const AssignmentSubmission = await prisma.assignmentSubmission.delete({
     *   where: {
     *     // ... filter to delete one AssignmentSubmission
     *   }
     * })
     * 
     */
    delete<T extends AssignmentSubmissionDeleteArgs>(args: SelectSubset<T, AssignmentSubmissionDeleteArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AssignmentSubmission.
     * @param {AssignmentSubmissionUpdateArgs} args - Arguments to update one AssignmentSubmission.
     * @example
     * // Update one AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentSubmissionUpdateArgs>(args: SelectSubset<T, AssignmentSubmissionUpdateArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AssignmentSubmissions.
     * @param {AssignmentSubmissionDeleteManyArgs} args - Arguments to filter AssignmentSubmissions to delete.
     * @example
     * // Delete a few AssignmentSubmissions
     * const { count } = await prisma.assignmentSubmission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentSubmissionDeleteManyArgs>(args?: SelectSubset<T, AssignmentSubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssignmentSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssignmentSubmissions
     * const assignmentSubmission = await prisma.assignmentSubmission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentSubmissionUpdateManyArgs>(args: SelectSubset<T, AssignmentSubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AssignmentSubmission.
     * @param {AssignmentSubmissionUpsertArgs} args - Arguments to update or create a AssignmentSubmission.
     * @example
     * // Update or create a AssignmentSubmission
     * const assignmentSubmission = await prisma.assignmentSubmission.upsert({
     *   create: {
     *     // ... data to create a AssignmentSubmission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssignmentSubmission we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentSubmissionUpsertArgs>(args: SelectSubset<T, AssignmentSubmissionUpsertArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AssignmentSubmissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionCountArgs} args - Arguments to filter AssignmentSubmissions to count.
     * @example
     * // Count the number of AssignmentSubmissions
     * const count = await prisma.assignmentSubmission.count({
     *   where: {
     *     // ... the filter for the AssignmentSubmissions we want to count
     *   }
     * })
    **/
    count<T extends AssignmentSubmissionCountArgs>(
      args?: Subset<T, AssignmentSubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentSubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssignmentSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentSubmissionAggregateArgs>(args: Subset<T, AssignmentSubmissionAggregateArgs>): Prisma.PrismaPromise<GetAssignmentSubmissionAggregateType<T>>

    /**
     * Group by AssignmentSubmission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentSubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentSubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentSubmissionGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentSubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentSubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssignmentSubmission model
   */
  readonly fields: AssignmentSubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssignmentSubmission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentSubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    files<T extends AssignmentSubmission$filesArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentSubmission$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    grade<T extends AssignmentSubmission$gradeArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentSubmission$gradeArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssignmentSubmission model
   */ 
  interface AssignmentSubmissionFieldRefs {
    readonly id: FieldRef<"AssignmentSubmission", 'String'>
    readonly assignmentId: FieldRef<"AssignmentSubmission", 'String'>
    readonly studentId: FieldRef<"AssignmentSubmission", 'String'>
    readonly submittedAt: FieldRef<"AssignmentSubmission", 'DateTime'>
    readonly textContent: FieldRef<"AssignmentSubmission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssignmentSubmission findUnique
   */
  export type AssignmentSubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSubmission to fetch.
     */
    where: AssignmentSubmissionWhereUniqueInput
  }

  /**
   * AssignmentSubmission findUniqueOrThrow
   */
  export type AssignmentSubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSubmission to fetch.
     */
    where: AssignmentSubmissionWhereUniqueInput
  }

  /**
   * AssignmentSubmission findFirst
   */
  export type AssignmentSubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSubmission to fetch.
     */
    where?: AssignmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSubmissions to fetch.
     */
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentSubmissions.
     */
    cursor?: AssignmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentSubmissions.
     */
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssignmentSubmission findFirstOrThrow
   */
  export type AssignmentSubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSubmission to fetch.
     */
    where?: AssignmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSubmissions to fetch.
     */
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentSubmissions.
     */
    cursor?: AssignmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSubmissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentSubmissions.
     */
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssignmentSubmission findMany
   */
  export type AssignmentSubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentSubmissions to fetch.
     */
    where?: AssignmentSubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentSubmissions to fetch.
     */
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssignmentSubmissions.
     */
    cursor?: AssignmentSubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentSubmissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentSubmissions.
     */
    skip?: number
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * AssignmentSubmission create
   */
  export type AssignmentSubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a AssignmentSubmission.
     */
    data: XOR<AssignmentSubmissionCreateInput, AssignmentSubmissionUncheckedCreateInput>
  }

  /**
   * AssignmentSubmission createMany
   */
  export type AssignmentSubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssignmentSubmissions.
     */
    data: AssignmentSubmissionCreateManyInput | AssignmentSubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssignmentSubmission createManyAndReturn
   */
  export type AssignmentSubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AssignmentSubmissions.
     */
    data: AssignmentSubmissionCreateManyInput | AssignmentSubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssignmentSubmission update
   */
  export type AssignmentSubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a AssignmentSubmission.
     */
    data: XOR<AssignmentSubmissionUpdateInput, AssignmentSubmissionUncheckedUpdateInput>
    /**
     * Choose, which AssignmentSubmission to update.
     */
    where: AssignmentSubmissionWhereUniqueInput
  }

  /**
   * AssignmentSubmission updateMany
   */
  export type AssignmentSubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssignmentSubmissions.
     */
    data: XOR<AssignmentSubmissionUpdateManyMutationInput, AssignmentSubmissionUncheckedUpdateManyInput>
    /**
     * Filter which AssignmentSubmissions to update
     */
    where?: AssignmentSubmissionWhereInput
  }

  /**
   * AssignmentSubmission upsert
   */
  export type AssignmentSubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the AssignmentSubmission to update in case it exists.
     */
    where: AssignmentSubmissionWhereUniqueInput
    /**
     * In case the AssignmentSubmission found by the `where` argument doesn't exist, create a new AssignmentSubmission with this data.
     */
    create: XOR<AssignmentSubmissionCreateInput, AssignmentSubmissionUncheckedCreateInput>
    /**
     * In case the AssignmentSubmission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentSubmissionUpdateInput, AssignmentSubmissionUncheckedUpdateInput>
  }

  /**
   * AssignmentSubmission delete
   */
  export type AssignmentSubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    /**
     * Filter which AssignmentSubmission to delete.
     */
    where: AssignmentSubmissionWhereUniqueInput
  }

  /**
   * AssignmentSubmission deleteMany
   */
  export type AssignmentSubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentSubmissions to delete
     */
    where?: AssignmentSubmissionWhereInput
  }

  /**
   * AssignmentSubmission.files
   */
  export type AssignmentSubmission$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    cursor?: FileAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * AssignmentSubmission.grade
   */
  export type AssignmentSubmission$gradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    where?: GradeWhereInput
  }

  /**
   * AssignmentSubmission without action
   */
  export type AssignmentSubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
  }


  /**
   * Model Grade
   */

  export type AggregateGrade = {
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  export type GradeAvgAggregateOutputType = {
    score: number | null
    maxPoints: number | null
    percentage: number | null
    weight: number | null
  }

  export type GradeSumAggregateOutputType = {
    score: number | null
    maxPoints: number | null
    percentage: number | null
    weight: number | null
  }

  export type GradeMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    assignmentId: string | null
    submissionId: string | null
    letterGrade: string | null
    score: number | null
    maxPoints: number | null
    percentage: number | null
    gradedById: string | null
    gradedDate: Date | null
    gradingPeriod: string | null
    feedback: string | null
    isExtraCredit: boolean | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GradeMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    courseId: string | null
    assignmentId: string | null
    submissionId: string | null
    letterGrade: string | null
    score: number | null
    maxPoints: number | null
    percentage: number | null
    gradedById: string | null
    gradedDate: Date | null
    gradingPeriod: string | null
    feedback: string | null
    isExtraCredit: boolean | null
    weight: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GradeCountAggregateOutputType = {
    id: number
    studentId: number
    courseId: number
    assignmentId: number
    submissionId: number
    letterGrade: number
    score: number
    maxPoints: number
    percentage: number
    gradedById: number
    gradedDate: number
    gradingPeriod: number
    feedback: number
    isExtraCredit: number
    weight: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GradeAvgAggregateInputType = {
    score?: true
    maxPoints?: true
    percentage?: true
    weight?: true
  }

  export type GradeSumAggregateInputType = {
    score?: true
    maxPoints?: true
    percentage?: true
    weight?: true
  }

  export type GradeMinAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    assignmentId?: true
    submissionId?: true
    letterGrade?: true
    score?: true
    maxPoints?: true
    percentage?: true
    gradedById?: true
    gradedDate?: true
    gradingPeriod?: true
    feedback?: true
    isExtraCredit?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GradeMaxAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    assignmentId?: true
    submissionId?: true
    letterGrade?: true
    score?: true
    maxPoints?: true
    percentage?: true
    gradedById?: true
    gradedDate?: true
    gradingPeriod?: true
    feedback?: true
    isExtraCredit?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GradeCountAggregateInputType = {
    id?: true
    studentId?: true
    courseId?: true
    assignmentId?: true
    submissionId?: true
    letterGrade?: true
    score?: true
    maxPoints?: true
    percentage?: true
    gradedById?: true
    gradedDate?: true
    gradingPeriod?: true
    feedback?: true
    isExtraCredit?: true
    weight?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GradeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grade to aggregate.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Grades
    **/
    _count?: true | GradeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GradeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GradeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GradeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GradeMaxAggregateInputType
  }

  export type GetGradeAggregateType<T extends GradeAggregateArgs> = {
        [P in keyof T & keyof AggregateGrade]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGrade[P]>
      : GetScalarType<T[P], AggregateGrade[P]>
  }




  export type GradeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GradeWhereInput
    orderBy?: GradeOrderByWithAggregationInput | GradeOrderByWithAggregationInput[]
    by: GradeScalarFieldEnum[] | GradeScalarFieldEnum
    having?: GradeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GradeCountAggregateInputType | true
    _avg?: GradeAvgAggregateInputType
    _sum?: GradeSumAggregateInputType
    _min?: GradeMinAggregateInputType
    _max?: GradeMaxAggregateInputType
  }

  export type GradeGroupByOutputType = {
    id: string
    studentId: string
    courseId: string | null
    assignmentId: string | null
    submissionId: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage: number | null
    gradedById: string
    gradedDate: Date
    gradingPeriod: string | null
    feedback: string | null
    isExtraCredit: boolean
    weight: number | null
    createdAt: Date
    updatedAt: Date
    _count: GradeCountAggregateOutputType | null
    _avg: GradeAvgAggregateOutputType | null
    _sum: GradeSumAggregateOutputType | null
    _min: GradeMinAggregateOutputType | null
    _max: GradeMaxAggregateOutputType | null
  }

  type GetGradeGroupByPayload<T extends GradeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GradeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GradeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GradeGroupByOutputType[P]>
            : GetScalarType<T[P], GradeGroupByOutputType[P]>
        }
      >
    >


  export type GradeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    letterGrade?: boolean
    score?: boolean
    maxPoints?: boolean
    percentage?: boolean
    gradedById?: boolean
    gradedDate?: boolean
    gradingPeriod?: boolean
    feedback?: boolean
    isExtraCredit?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | Grade$courseArgs<ExtArgs>
    assignment?: boolean | Grade$assignmentArgs<ExtArgs>
    submission?: boolean | Grade$submissionArgs<ExtArgs>
    gradedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    letterGrade?: boolean
    score?: boolean
    maxPoints?: boolean
    percentage?: boolean
    gradedById?: boolean
    gradedDate?: boolean
    gradingPeriod?: boolean
    feedback?: boolean
    isExtraCredit?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | Grade$courseArgs<ExtArgs>
    assignment?: boolean | Grade$assignmentArgs<ExtArgs>
    submission?: boolean | Grade$submissionArgs<ExtArgs>
    gradedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["grade"]>

  export type GradeSelectScalar = {
    id?: boolean
    studentId?: boolean
    courseId?: boolean
    assignmentId?: boolean
    submissionId?: boolean
    letterGrade?: boolean
    score?: boolean
    maxPoints?: boolean
    percentage?: boolean
    gradedById?: boolean
    gradedDate?: boolean
    gradingPeriod?: boolean
    feedback?: boolean
    isExtraCredit?: boolean
    weight?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GradeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | Grade$courseArgs<ExtArgs>
    assignment?: boolean | Grade$assignmentArgs<ExtArgs>
    submission?: boolean | Grade$submissionArgs<ExtArgs>
    gradedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type GradeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | Grade$courseArgs<ExtArgs>
    assignment?: boolean | Grade$assignmentArgs<ExtArgs>
    submission?: boolean | Grade$submissionArgs<ExtArgs>
    gradedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $GradePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Grade"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs> | null
      assignment: Prisma.$AssignmentPayload<ExtArgs> | null
      submission: Prisma.$AssignmentSubmissionPayload<ExtArgs> | null
      gradedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      courseId: string | null
      assignmentId: string | null
      submissionId: string | null
      letterGrade: string
      score: number
      maxPoints: number
      percentage: number | null
      gradedById: string
      gradedDate: Date
      gradingPeriod: string | null
      feedback: string | null
      isExtraCredit: boolean
      weight: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["grade"]>
    composites: {}
  }

  type GradeGetPayload<S extends boolean | null | undefined | GradeDefaultArgs> = $Result.GetResult<Prisma.$GradePayload, S>

  type GradeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GradeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GradeCountAggregateInputType | true
    }

  export interface GradeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Grade'], meta: { name: 'Grade' } }
    /**
     * Find zero or one Grade that matches the filter.
     * @param {GradeFindUniqueArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GradeFindUniqueArgs>(args: SelectSubset<T, GradeFindUniqueArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Grade that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GradeFindUniqueOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GradeFindUniqueOrThrowArgs>(args: SelectSubset<T, GradeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Grade that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GradeFindFirstArgs>(args?: SelectSubset<T, GradeFindFirstArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Grade that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindFirstOrThrowArgs} args - Arguments to find a Grade
     * @example
     * // Get one Grade
     * const grade = await prisma.grade.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GradeFindFirstOrThrowArgs>(args?: SelectSubset<T, GradeFindFirstOrThrowArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Grades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Grades
     * const grades = await prisma.grade.findMany()
     * 
     * // Get first 10 Grades
     * const grades = await prisma.grade.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gradeWithIdOnly = await prisma.grade.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GradeFindManyArgs>(args?: SelectSubset<T, GradeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Grade.
     * @param {GradeCreateArgs} args - Arguments to create a Grade.
     * @example
     * // Create one Grade
     * const Grade = await prisma.grade.create({
     *   data: {
     *     // ... data to create a Grade
     *   }
     * })
     * 
     */
    create<T extends GradeCreateArgs>(args: SelectSubset<T, GradeCreateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Grades.
     * @param {GradeCreateManyArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GradeCreateManyArgs>(args?: SelectSubset<T, GradeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Grades and returns the data saved in the database.
     * @param {GradeCreateManyAndReturnArgs} args - Arguments to create many Grades.
     * @example
     * // Create many Grades
     * const grade = await prisma.grade.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Grades and only return the `id`
     * const gradeWithIdOnly = await prisma.grade.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GradeCreateManyAndReturnArgs>(args?: SelectSubset<T, GradeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Grade.
     * @param {GradeDeleteArgs} args - Arguments to delete one Grade.
     * @example
     * // Delete one Grade
     * const Grade = await prisma.grade.delete({
     *   where: {
     *     // ... filter to delete one Grade
     *   }
     * })
     * 
     */
    delete<T extends GradeDeleteArgs>(args: SelectSubset<T, GradeDeleteArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Grade.
     * @param {GradeUpdateArgs} args - Arguments to update one Grade.
     * @example
     * // Update one Grade
     * const grade = await prisma.grade.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GradeUpdateArgs>(args: SelectSubset<T, GradeUpdateArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Grades.
     * @param {GradeDeleteManyArgs} args - Arguments to filter Grades to delete.
     * @example
     * // Delete a few Grades
     * const { count } = await prisma.grade.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GradeDeleteManyArgs>(args?: SelectSubset<T, GradeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Grades
     * const grade = await prisma.grade.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GradeUpdateManyArgs>(args: SelectSubset<T, GradeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Grade.
     * @param {GradeUpsertArgs} args - Arguments to update or create a Grade.
     * @example
     * // Update or create a Grade
     * const grade = await prisma.grade.upsert({
     *   create: {
     *     // ... data to create a Grade
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Grade we want to update
     *   }
     * })
     */
    upsert<T extends GradeUpsertArgs>(args: SelectSubset<T, GradeUpsertArgs<ExtArgs>>): Prisma__GradeClient<$Result.GetResult<Prisma.$GradePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Grades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeCountArgs} args - Arguments to filter Grades to count.
     * @example
     * // Count the number of Grades
     * const count = await prisma.grade.count({
     *   where: {
     *     // ... the filter for the Grades we want to count
     *   }
     * })
    **/
    count<T extends GradeCountArgs>(
      args?: Subset<T, GradeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GradeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GradeAggregateArgs>(args: Subset<T, GradeAggregateArgs>): Prisma.PrismaPromise<GetGradeAggregateType<T>>

    /**
     * Group by Grade.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GradeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GradeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GradeGroupByArgs['orderBy'] }
        : { orderBy?: GradeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GradeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGradeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Grade model
   */
  readonly fields: GradeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Grade.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GradeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends Grade$courseArgs<ExtArgs> = {}>(args?: Subset<T, Grade$courseArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assignment<T extends Grade$assignmentArgs<ExtArgs> = {}>(args?: Subset<T, Grade$assignmentArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    submission<T extends Grade$submissionArgs<ExtArgs> = {}>(args?: Subset<T, Grade$submissionArgs<ExtArgs>>): Prisma__AssignmentSubmissionClient<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    gradedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Grade model
   */ 
  interface GradeFieldRefs {
    readonly id: FieldRef<"Grade", 'String'>
    readonly studentId: FieldRef<"Grade", 'String'>
    readonly courseId: FieldRef<"Grade", 'String'>
    readonly assignmentId: FieldRef<"Grade", 'String'>
    readonly submissionId: FieldRef<"Grade", 'String'>
    readonly letterGrade: FieldRef<"Grade", 'String'>
    readonly score: FieldRef<"Grade", 'Float'>
    readonly maxPoints: FieldRef<"Grade", 'Float'>
    readonly percentage: FieldRef<"Grade", 'Float'>
    readonly gradedById: FieldRef<"Grade", 'String'>
    readonly gradedDate: FieldRef<"Grade", 'DateTime'>
    readonly gradingPeriod: FieldRef<"Grade", 'String'>
    readonly feedback: FieldRef<"Grade", 'String'>
    readonly isExtraCredit: FieldRef<"Grade", 'Boolean'>
    readonly weight: FieldRef<"Grade", 'Float'>
    readonly createdAt: FieldRef<"Grade", 'DateTime'>
    readonly updatedAt: FieldRef<"Grade", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Grade findUnique
   */
  export type GradeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findUniqueOrThrow
   */
  export type GradeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade findFirst
   */
  export type GradeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findFirstOrThrow
   */
  export type GradeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grade to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Grades.
     */
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade findMany
   */
  export type GradeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter, which Grades to fetch.
     */
    where?: GradeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Grades to fetch.
     */
    orderBy?: GradeOrderByWithRelationInput | GradeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Grades.
     */
    cursor?: GradeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Grades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Grades.
     */
    skip?: number
    distinct?: GradeScalarFieldEnum | GradeScalarFieldEnum[]
  }

  /**
   * Grade create
   */
  export type GradeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to create a Grade.
     */
    data: XOR<GradeCreateInput, GradeUncheckedCreateInput>
  }

  /**
   * Grade createMany
   */
  export type GradeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Grade createManyAndReturn
   */
  export type GradeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Grades.
     */
    data: GradeCreateManyInput | GradeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Grade update
   */
  export type GradeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The data needed to update a Grade.
     */
    data: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
    /**
     * Choose, which Grade to update.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade updateMany
   */
  export type GradeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Grades.
     */
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyInput>
    /**
     * Filter which Grades to update
     */
    where?: GradeWhereInput
  }

  /**
   * Grade upsert
   */
  export type GradeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * The filter to search for the Grade to update in case it exists.
     */
    where: GradeWhereUniqueInput
    /**
     * In case the Grade found by the `where` argument doesn't exist, create a new Grade with this data.
     */
    create: XOR<GradeCreateInput, GradeUncheckedCreateInput>
    /**
     * In case the Grade was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GradeUpdateInput, GradeUncheckedUpdateInput>
  }

  /**
   * Grade delete
   */
  export type GradeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
    /**
     * Filter which Grade to delete.
     */
    where: GradeWhereUniqueInput
  }

  /**
   * Grade deleteMany
   */
  export type GradeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Grades to delete
     */
    where?: GradeWhereInput
  }

  /**
   * Grade.course
   */
  export type Grade$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
  }

  /**
   * Grade.assignment
   */
  export type Grade$assignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
  }

  /**
   * Grade.submission
   */
  export type Grade$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    where?: AssignmentSubmissionWhereInput
  }

  /**
   * Grade without action
   */
  export type GradeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Grade
     */
    select?: GradeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GradeInclude<ExtArgs> | null
  }


  /**
   * Model CourseMaterial
   */

  export type AggregateCourseMaterial = {
    _count: CourseMaterialCountAggregateOutputType | null
    _min: CourseMaterialMinAggregateOutputType | null
    _max: CourseMaterialMaxAggregateOutputType | null
  }

  export type CourseMaterialMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    uploadedById: string | null
    title: string | null
    description: string | null
    type: $Enums.MaterialType | null
    uploadDate: Date | null
    isRequired: boolean | null
    fileId: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaterialMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    uploadedById: string | null
    title: string | null
    description: string | null
    type: $Enums.MaterialType | null
    uploadDate: Date | null
    isRequired: boolean | null
    fileId: string | null
    url: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaterialCountAggregateOutputType = {
    id: number
    courseId: number
    uploadedById: number
    title: number
    description: number
    type: number
    uploadDate: number
    isRequired: number
    fileId: number
    url: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseMaterialMinAggregateInputType = {
    id?: true
    courseId?: true
    uploadedById?: true
    title?: true
    description?: true
    type?: true
    uploadDate?: true
    isRequired?: true
    fileId?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaterialMaxAggregateInputType = {
    id?: true
    courseId?: true
    uploadedById?: true
    title?: true
    description?: true
    type?: true
    uploadDate?: true
    isRequired?: true
    fileId?: true
    url?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaterialCountAggregateInputType = {
    id?: true
    courseId?: true
    uploadedById?: true
    title?: true
    description?: true
    type?: true
    uploadDate?: true
    isRequired?: true
    fileId?: true
    url?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseMaterialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseMaterial to aggregate.
     */
    where?: CourseMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseMaterials to fetch.
     */
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseMaterials
    **/
    _count?: true | CourseMaterialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMaterialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaterialMaxAggregateInputType
  }

  export type GetCourseMaterialAggregateType<T extends CourseMaterialAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseMaterial]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseMaterial[P]>
      : GetScalarType<T[P], AggregateCourseMaterial[P]>
  }




  export type CourseMaterialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseMaterialWhereInput
    orderBy?: CourseMaterialOrderByWithAggregationInput | CourseMaterialOrderByWithAggregationInput[]
    by: CourseMaterialScalarFieldEnum[] | CourseMaterialScalarFieldEnum
    having?: CourseMaterialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseMaterialCountAggregateInputType | true
    _min?: CourseMaterialMinAggregateInputType
    _max?: CourseMaterialMaxAggregateInputType
  }

  export type CourseMaterialGroupByOutputType = {
    id: string
    courseId: string
    uploadedById: string
    title: string
    description: string | null
    type: $Enums.MaterialType
    uploadDate: Date
    isRequired: boolean
    fileId: string | null
    url: string | null
    createdAt: Date
    updatedAt: Date
    _count: CourseMaterialCountAggregateOutputType | null
    _min: CourseMaterialMinAggregateOutputType | null
    _max: CourseMaterialMaxAggregateOutputType | null
  }

  type GetCourseMaterialGroupByPayload<T extends CourseMaterialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseMaterialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseMaterialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseMaterialGroupByOutputType[P]>
            : GetScalarType<T[P], CourseMaterialGroupByOutputType[P]>
        }
      >
    >


  export type CourseMaterialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    uploadedById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    uploadDate?: boolean
    isRequired?: boolean
    fileId?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    file?: boolean | CourseMaterial$fileArgs<ExtArgs>
  }, ExtArgs["result"]["courseMaterial"]>

  export type CourseMaterialSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    uploadedById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    uploadDate?: boolean
    isRequired?: boolean
    fileId?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    file?: boolean | CourseMaterial$fileArgs<ExtArgs>
  }, ExtArgs["result"]["courseMaterial"]>

  export type CourseMaterialSelectScalar = {
    id?: boolean
    courseId?: boolean
    uploadedById?: boolean
    title?: boolean
    description?: boolean
    type?: boolean
    uploadDate?: boolean
    isRequired?: boolean
    fileId?: boolean
    url?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseMaterialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    file?: boolean | CourseMaterial$fileArgs<ExtArgs>
  }
  export type CourseMaterialIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    file?: boolean | CourseMaterial$fileArgs<ExtArgs>
  }

  export type $CourseMaterialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseMaterial"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      uploadedBy: Prisma.$UserPayload<ExtArgs>
      file: Prisma.$FileAttachmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      uploadedById: string
      title: string
      description: string | null
      type: $Enums.MaterialType
      uploadDate: Date
      isRequired: boolean
      fileId: string | null
      url: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["courseMaterial"]>
    composites: {}
  }

  type CourseMaterialGetPayload<S extends boolean | null | undefined | CourseMaterialDefaultArgs> = $Result.GetResult<Prisma.$CourseMaterialPayload, S>

  type CourseMaterialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseMaterialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseMaterialCountAggregateInputType | true
    }

  export interface CourseMaterialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseMaterial'], meta: { name: 'CourseMaterial' } }
    /**
     * Find zero or one CourseMaterial that matches the filter.
     * @param {CourseMaterialFindUniqueArgs} args - Arguments to find a CourseMaterial
     * @example
     * // Get one CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseMaterialFindUniqueArgs>(args: SelectSubset<T, CourseMaterialFindUniqueArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CourseMaterial that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseMaterialFindUniqueOrThrowArgs} args - Arguments to find a CourseMaterial
     * @example
     * // Get one CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseMaterialFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseMaterialFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CourseMaterial that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialFindFirstArgs} args - Arguments to find a CourseMaterial
     * @example
     * // Get one CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseMaterialFindFirstArgs>(args?: SelectSubset<T, CourseMaterialFindFirstArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CourseMaterial that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialFindFirstOrThrowArgs} args - Arguments to find a CourseMaterial
     * @example
     * // Get one CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseMaterialFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseMaterialFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CourseMaterials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseMaterials
     * const courseMaterials = await prisma.courseMaterial.findMany()
     * 
     * // Get first 10 CourseMaterials
     * const courseMaterials = await prisma.courseMaterial.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseMaterialWithIdOnly = await prisma.courseMaterial.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseMaterialFindManyArgs>(args?: SelectSubset<T, CourseMaterialFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CourseMaterial.
     * @param {CourseMaterialCreateArgs} args - Arguments to create a CourseMaterial.
     * @example
     * // Create one CourseMaterial
     * const CourseMaterial = await prisma.courseMaterial.create({
     *   data: {
     *     // ... data to create a CourseMaterial
     *   }
     * })
     * 
     */
    create<T extends CourseMaterialCreateArgs>(args: SelectSubset<T, CourseMaterialCreateArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CourseMaterials.
     * @param {CourseMaterialCreateManyArgs} args - Arguments to create many CourseMaterials.
     * @example
     * // Create many CourseMaterials
     * const courseMaterial = await prisma.courseMaterial.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseMaterialCreateManyArgs>(args?: SelectSubset<T, CourseMaterialCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseMaterials and returns the data saved in the database.
     * @param {CourseMaterialCreateManyAndReturnArgs} args - Arguments to create many CourseMaterials.
     * @example
     * // Create many CourseMaterials
     * const courseMaterial = await prisma.courseMaterial.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseMaterials and only return the `id`
     * const courseMaterialWithIdOnly = await prisma.courseMaterial.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseMaterialCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseMaterialCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CourseMaterial.
     * @param {CourseMaterialDeleteArgs} args - Arguments to delete one CourseMaterial.
     * @example
     * // Delete one CourseMaterial
     * const CourseMaterial = await prisma.courseMaterial.delete({
     *   where: {
     *     // ... filter to delete one CourseMaterial
     *   }
     * })
     * 
     */
    delete<T extends CourseMaterialDeleteArgs>(args: SelectSubset<T, CourseMaterialDeleteArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CourseMaterial.
     * @param {CourseMaterialUpdateArgs} args - Arguments to update one CourseMaterial.
     * @example
     * // Update one CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseMaterialUpdateArgs>(args: SelectSubset<T, CourseMaterialUpdateArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CourseMaterials.
     * @param {CourseMaterialDeleteManyArgs} args - Arguments to filter CourseMaterials to delete.
     * @example
     * // Delete a few CourseMaterials
     * const { count } = await prisma.courseMaterial.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseMaterialDeleteManyArgs>(args?: SelectSubset<T, CourseMaterialDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseMaterials
     * const courseMaterial = await prisma.courseMaterial.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseMaterialUpdateManyArgs>(args: SelectSubset<T, CourseMaterialUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseMaterial.
     * @param {CourseMaterialUpsertArgs} args - Arguments to update or create a CourseMaterial.
     * @example
     * // Update or create a CourseMaterial
     * const courseMaterial = await prisma.courseMaterial.upsert({
     *   create: {
     *     // ... data to create a CourseMaterial
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseMaterial we want to update
     *   }
     * })
     */
    upsert<T extends CourseMaterialUpsertArgs>(args: SelectSubset<T, CourseMaterialUpsertArgs<ExtArgs>>): Prisma__CourseMaterialClient<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CourseMaterials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialCountArgs} args - Arguments to filter CourseMaterials to count.
     * @example
     * // Count the number of CourseMaterials
     * const count = await prisma.courseMaterial.count({
     *   where: {
     *     // ... the filter for the CourseMaterials we want to count
     *   }
     * })
    **/
    count<T extends CourseMaterialCountArgs>(
      args?: Subset<T, CourseMaterialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseMaterialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseMaterialAggregateArgs>(args: Subset<T, CourseMaterialAggregateArgs>): Prisma.PrismaPromise<GetCourseMaterialAggregateType<T>>

    /**
     * Group by CourseMaterial.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseMaterialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseMaterialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseMaterialGroupByArgs['orderBy'] }
        : { orderBy?: CourseMaterialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseMaterialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseMaterialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseMaterial model
   */
  readonly fields: CourseMaterialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseMaterial.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseMaterialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    file<T extends CourseMaterial$fileArgs<ExtArgs> = {}>(args?: Subset<T, CourseMaterial$fileArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseMaterial model
   */ 
  interface CourseMaterialFieldRefs {
    readonly id: FieldRef<"CourseMaterial", 'String'>
    readonly courseId: FieldRef<"CourseMaterial", 'String'>
    readonly uploadedById: FieldRef<"CourseMaterial", 'String'>
    readonly title: FieldRef<"CourseMaterial", 'String'>
    readonly description: FieldRef<"CourseMaterial", 'String'>
    readonly type: FieldRef<"CourseMaterial", 'MaterialType'>
    readonly uploadDate: FieldRef<"CourseMaterial", 'DateTime'>
    readonly isRequired: FieldRef<"CourseMaterial", 'Boolean'>
    readonly fileId: FieldRef<"CourseMaterial", 'String'>
    readonly url: FieldRef<"CourseMaterial", 'String'>
    readonly createdAt: FieldRef<"CourseMaterial", 'DateTime'>
    readonly updatedAt: FieldRef<"CourseMaterial", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseMaterial findUnique
   */
  export type CourseMaterialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter, which CourseMaterial to fetch.
     */
    where: CourseMaterialWhereUniqueInput
  }

  /**
   * CourseMaterial findUniqueOrThrow
   */
  export type CourseMaterialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter, which CourseMaterial to fetch.
     */
    where: CourseMaterialWhereUniqueInput
  }

  /**
   * CourseMaterial findFirst
   */
  export type CourseMaterialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter, which CourseMaterial to fetch.
     */
    where?: CourseMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseMaterials to fetch.
     */
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseMaterials.
     */
    cursor?: CourseMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseMaterials.
     */
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * CourseMaterial findFirstOrThrow
   */
  export type CourseMaterialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter, which CourseMaterial to fetch.
     */
    where?: CourseMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseMaterials to fetch.
     */
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseMaterials.
     */
    cursor?: CourseMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseMaterials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseMaterials.
     */
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * CourseMaterial findMany
   */
  export type CourseMaterialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter, which CourseMaterials to fetch.
     */
    where?: CourseMaterialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseMaterials to fetch.
     */
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseMaterials.
     */
    cursor?: CourseMaterialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseMaterials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseMaterials.
     */
    skip?: number
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * CourseMaterial create
   */
  export type CourseMaterialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseMaterial.
     */
    data: XOR<CourseMaterialCreateInput, CourseMaterialUncheckedCreateInput>
  }

  /**
   * CourseMaterial createMany
   */
  export type CourseMaterialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseMaterials.
     */
    data: CourseMaterialCreateManyInput | CourseMaterialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseMaterial createManyAndReturn
   */
  export type CourseMaterialCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CourseMaterials.
     */
    data: CourseMaterialCreateManyInput | CourseMaterialCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseMaterial update
   */
  export type CourseMaterialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseMaterial.
     */
    data: XOR<CourseMaterialUpdateInput, CourseMaterialUncheckedUpdateInput>
    /**
     * Choose, which CourseMaterial to update.
     */
    where: CourseMaterialWhereUniqueInput
  }

  /**
   * CourseMaterial updateMany
   */
  export type CourseMaterialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseMaterials.
     */
    data: XOR<CourseMaterialUpdateManyMutationInput, CourseMaterialUncheckedUpdateManyInput>
    /**
     * Filter which CourseMaterials to update
     */
    where?: CourseMaterialWhereInput
  }

  /**
   * CourseMaterial upsert
   */
  export type CourseMaterialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseMaterial to update in case it exists.
     */
    where: CourseMaterialWhereUniqueInput
    /**
     * In case the CourseMaterial found by the `where` argument doesn't exist, create a new CourseMaterial with this data.
     */
    create: XOR<CourseMaterialCreateInput, CourseMaterialUncheckedCreateInput>
    /**
     * In case the CourseMaterial was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseMaterialUpdateInput, CourseMaterialUncheckedUpdateInput>
  }

  /**
   * CourseMaterial delete
   */
  export type CourseMaterialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    /**
     * Filter which CourseMaterial to delete.
     */
    where: CourseMaterialWhereUniqueInput
  }

  /**
   * CourseMaterial deleteMany
   */
  export type CourseMaterialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseMaterials to delete
     */
    where?: CourseMaterialWhereInput
  }

  /**
   * CourseMaterial.file
   */
  export type CourseMaterial$fileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
  }

  /**
   * CourseMaterial without action
   */
  export type CourseMaterialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
  }


  /**
   * Model Quiz
   */

  export type AggregateQuiz = {
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  export type QuizAvgAggregateOutputType = {
    totalQuestions: number | null
    maxPoints: number | null
    attemptsAllowed: number | null
  }

  export type QuizSumAggregateOutputType = {
    totalQuestions: number | null
    maxPoints: number | null
    attemptsAllowed: number | null
  }

  export type QuizMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    createdById: string | null
    title: string | null
    description: string | null
    duration: string | null
    totalQuestions: number | null
    maxPoints: number | null
    dueDate: Date | null
    isTimed: boolean | null
    attemptsAllowed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    createdById: string | null
    title: string | null
    description: string | null
    duration: string | null
    totalQuestions: number | null
    maxPoints: number | null
    dueDate: Date | null
    isTimed: boolean | null
    attemptsAllowed: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type QuizCountAggregateOutputType = {
    id: number
    courseId: number
    createdById: number
    title: number
    description: number
    duration: number
    totalQuestions: number
    maxPoints: number
    dueDate: number
    isTimed: number
    attemptsAllowed: number
    questionsData: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type QuizAvgAggregateInputType = {
    totalQuestions?: true
    maxPoints?: true
    attemptsAllowed?: true
  }

  export type QuizSumAggregateInputType = {
    totalQuestions?: true
    maxPoints?: true
    attemptsAllowed?: true
  }

  export type QuizMinAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    duration?: true
    totalQuestions?: true
    maxPoints?: true
    dueDate?: true
    isTimed?: true
    attemptsAllowed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizMaxAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    duration?: true
    totalQuestions?: true
    maxPoints?: true
    dueDate?: true
    isTimed?: true
    attemptsAllowed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type QuizCountAggregateInputType = {
    id?: true
    courseId?: true
    createdById?: true
    title?: true
    description?: true
    duration?: true
    totalQuestions?: true
    maxPoints?: true
    dueDate?: true
    isTimed?: true
    attemptsAllowed?: true
    questionsData?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type QuizAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quiz to aggregate.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Quizzes
    **/
    _count?: true | QuizCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizMaxAggregateInputType
  }

  export type GetQuizAggregateType<T extends QuizAggregateArgs> = {
        [P in keyof T & keyof AggregateQuiz]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuiz[P]>
      : GetScalarType<T[P], AggregateQuiz[P]>
  }




  export type QuizGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizWhereInput
    orderBy?: QuizOrderByWithAggregationInput | QuizOrderByWithAggregationInput[]
    by: QuizScalarFieldEnum[] | QuizScalarFieldEnum
    having?: QuizScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizCountAggregateInputType | true
    _avg?: QuizAvgAggregateInputType
    _sum?: QuizSumAggregateInputType
    _min?: QuizMinAggregateInputType
    _max?: QuizMaxAggregateInputType
  }

  export type QuizGroupByOutputType = {
    id: string
    courseId: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date
    isTimed: boolean
    attemptsAllowed: number
    questionsData: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: QuizCountAggregateOutputType | null
    _avg: QuizAvgAggregateOutputType | null
    _sum: QuizSumAggregateOutputType | null
    _min: QuizMinAggregateOutputType | null
    _max: QuizMaxAggregateOutputType | null
  }

  type GetQuizGroupByPayload<T extends QuizGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizGroupByOutputType[P]>
            : GetScalarType<T[P], QuizGroupByOutputType[P]>
        }
      >
    >


  export type QuizSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    totalQuestions?: boolean
    maxPoints?: boolean
    dueDate?: boolean
    isTimed?: boolean
    attemptsAllowed?: boolean
    questionsData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    attempts?: boolean | Quiz$attemptsArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    totalQuestions?: boolean
    maxPoints?: boolean
    dueDate?: boolean
    isTimed?: boolean
    attemptsAllowed?: boolean
    questionsData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quiz"]>

  export type QuizSelectScalar = {
    id?: boolean
    courseId?: boolean
    createdById?: boolean
    title?: boolean
    description?: boolean
    duration?: boolean
    totalQuestions?: boolean
    maxPoints?: boolean
    dueDate?: boolean
    isTimed?: boolean
    attemptsAllowed?: boolean
    questionsData?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type QuizInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    attempts?: boolean | Quiz$attemptsArgs<ExtArgs>
    _count?: boolean | QuizCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuizIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QuizPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Quiz"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
      attempts: Prisma.$QuizAttemptPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      createdById: string
      title: string
      description: string
      duration: string
      totalQuestions: number
      maxPoints: number
      dueDate: Date
      isTimed: boolean
      attemptsAllowed: number
      questionsData: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["quiz"]>
    composites: {}
  }

  type QuizGetPayload<S extends boolean | null | undefined | QuizDefaultArgs> = $Result.GetResult<Prisma.$QuizPayload, S>

  type QuizCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuizFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuizCountAggregateInputType | true
    }

  export interface QuizDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Quiz'], meta: { name: 'Quiz' } }
    /**
     * Find zero or one Quiz that matches the filter.
     * @param {QuizFindUniqueArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuizFindUniqueArgs>(args: SelectSubset<T, QuizFindUniqueArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Quiz that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuizFindUniqueOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuizFindUniqueOrThrowArgs>(args: SelectSubset<T, QuizFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Quiz that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuizFindFirstArgs>(args?: SelectSubset<T, QuizFindFirstArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Quiz that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindFirstOrThrowArgs} args - Arguments to find a Quiz
     * @example
     * // Get one Quiz
     * const quiz = await prisma.quiz.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuizFindFirstOrThrowArgs>(args?: SelectSubset<T, QuizFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Quizzes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Quizzes
     * const quizzes = await prisma.quiz.findMany()
     * 
     * // Get first 10 Quizzes
     * const quizzes = await prisma.quiz.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizWithIdOnly = await prisma.quiz.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuizFindManyArgs>(args?: SelectSubset<T, QuizFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Quiz.
     * @param {QuizCreateArgs} args - Arguments to create a Quiz.
     * @example
     * // Create one Quiz
     * const Quiz = await prisma.quiz.create({
     *   data: {
     *     // ... data to create a Quiz
     *   }
     * })
     * 
     */
    create<T extends QuizCreateArgs>(args: SelectSubset<T, QuizCreateArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Quizzes.
     * @param {QuizCreateManyArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuizCreateManyArgs>(args?: SelectSubset<T, QuizCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Quizzes and returns the data saved in the database.
     * @param {QuizCreateManyAndReturnArgs} args - Arguments to create many Quizzes.
     * @example
     * // Create many Quizzes
     * const quiz = await prisma.quiz.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Quizzes and only return the `id`
     * const quizWithIdOnly = await prisma.quiz.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuizCreateManyAndReturnArgs>(args?: SelectSubset<T, QuizCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Quiz.
     * @param {QuizDeleteArgs} args - Arguments to delete one Quiz.
     * @example
     * // Delete one Quiz
     * const Quiz = await prisma.quiz.delete({
     *   where: {
     *     // ... filter to delete one Quiz
     *   }
     * })
     * 
     */
    delete<T extends QuizDeleteArgs>(args: SelectSubset<T, QuizDeleteArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Quiz.
     * @param {QuizUpdateArgs} args - Arguments to update one Quiz.
     * @example
     * // Update one Quiz
     * const quiz = await prisma.quiz.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuizUpdateArgs>(args: SelectSubset<T, QuizUpdateArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Quizzes.
     * @param {QuizDeleteManyArgs} args - Arguments to filter Quizzes to delete.
     * @example
     * // Delete a few Quizzes
     * const { count } = await prisma.quiz.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuizDeleteManyArgs>(args?: SelectSubset<T, QuizDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Quizzes
     * const quiz = await prisma.quiz.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuizUpdateManyArgs>(args: SelectSubset<T, QuizUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Quiz.
     * @param {QuizUpsertArgs} args - Arguments to update or create a Quiz.
     * @example
     * // Update or create a Quiz
     * const quiz = await prisma.quiz.upsert({
     *   create: {
     *     // ... data to create a Quiz
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Quiz we want to update
     *   }
     * })
     */
    upsert<T extends QuizUpsertArgs>(args: SelectSubset<T, QuizUpsertArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Quizzes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizCountArgs} args - Arguments to filter Quizzes to count.
     * @example
     * // Count the number of Quizzes
     * const count = await prisma.quiz.count({
     *   where: {
     *     // ... the filter for the Quizzes we want to count
     *   }
     * })
    **/
    count<T extends QuizCountArgs>(
      args?: Subset<T, QuizCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAggregateArgs>(args: Subset<T, QuizAggregateArgs>): Prisma.PrismaPromise<GetQuizAggregateType<T>>

    /**
     * Group by Quiz.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizGroupByArgs['orderBy'] }
        : { orderBy?: QuizGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Quiz model
   */
  readonly fields: QuizFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Quiz.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    attempts<T extends Quiz$attemptsArgs<ExtArgs> = {}>(args?: Subset<T, Quiz$attemptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Quiz model
   */ 
  interface QuizFieldRefs {
    readonly id: FieldRef<"Quiz", 'String'>
    readonly courseId: FieldRef<"Quiz", 'String'>
    readonly createdById: FieldRef<"Quiz", 'String'>
    readonly title: FieldRef<"Quiz", 'String'>
    readonly description: FieldRef<"Quiz", 'String'>
    readonly duration: FieldRef<"Quiz", 'String'>
    readonly totalQuestions: FieldRef<"Quiz", 'Int'>
    readonly maxPoints: FieldRef<"Quiz", 'Float'>
    readonly dueDate: FieldRef<"Quiz", 'DateTime'>
    readonly isTimed: FieldRef<"Quiz", 'Boolean'>
    readonly attemptsAllowed: FieldRef<"Quiz", 'Int'>
    readonly questionsData: FieldRef<"Quiz", 'Json'>
    readonly createdAt: FieldRef<"Quiz", 'DateTime'>
    readonly updatedAt: FieldRef<"Quiz", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Quiz findUnique
   */
  export type QuizFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findUniqueOrThrow
   */
  export type QuizFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz findFirst
   */
  export type QuizFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findFirstOrThrow
   */
  export type QuizFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quiz to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Quizzes.
     */
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz findMany
   */
  export type QuizFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter, which Quizzes to fetch.
     */
    where?: QuizWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Quizzes to fetch.
     */
    orderBy?: QuizOrderByWithRelationInput | QuizOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Quizzes.
     */
    cursor?: QuizWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Quizzes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Quizzes.
     */
    skip?: number
    distinct?: QuizScalarFieldEnum | QuizScalarFieldEnum[]
  }

  /**
   * Quiz create
   */
  export type QuizCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to create a Quiz.
     */
    data: XOR<QuizCreateInput, QuizUncheckedCreateInput>
  }

  /**
   * Quiz createMany
   */
  export type QuizCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Quiz createManyAndReturn
   */
  export type QuizCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Quizzes.
     */
    data: QuizCreateManyInput | QuizCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Quiz update
   */
  export type QuizUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The data needed to update a Quiz.
     */
    data: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
    /**
     * Choose, which Quiz to update.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz updateMany
   */
  export type QuizUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Quizzes.
     */
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyInput>
    /**
     * Filter which Quizzes to update
     */
    where?: QuizWhereInput
  }

  /**
   * Quiz upsert
   */
  export type QuizUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * The filter to search for the Quiz to update in case it exists.
     */
    where: QuizWhereUniqueInput
    /**
     * In case the Quiz found by the `where` argument doesn't exist, create a new Quiz with this data.
     */
    create: XOR<QuizCreateInput, QuizUncheckedCreateInput>
    /**
     * In case the Quiz was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizUpdateInput, QuizUncheckedUpdateInput>
  }

  /**
   * Quiz delete
   */
  export type QuizDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
    /**
     * Filter which Quiz to delete.
     */
    where: QuizWhereUniqueInput
  }

  /**
   * Quiz deleteMany
   */
  export type QuizDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Quizzes to delete
     */
    where?: QuizWhereInput
  }

  /**
   * Quiz.attempts
   */
  export type Quiz$attemptsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    where?: QuizAttemptWhereInput
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    cursor?: QuizAttemptWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuizAttemptScalarFieldEnum | QuizAttemptScalarFieldEnum[]
  }

  /**
   * Quiz without action
   */
  export type QuizDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Quiz
     */
    select?: QuizSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizInclude<ExtArgs> | null
  }


  /**
   * Model QuizAttempt
   */

  export type AggregateQuizAttempt = {
    _count: QuizAttemptCountAggregateOutputType | null
    _avg: QuizAttemptAvgAggregateOutputType | null
    _sum: QuizAttemptSumAggregateOutputType | null
    _min: QuizAttemptMinAggregateOutputType | null
    _max: QuizAttemptMaxAggregateOutputType | null
  }

  export type QuizAttemptAvgAggregateOutputType = {
    score: number | null
    maxPoints: number | null
  }

  export type QuizAttemptSumAggregateOutputType = {
    score: number | null
    maxPoints: number | null
  }

  export type QuizAttemptMinAggregateOutputType = {
    id: string | null
    quizId: string | null
    studentId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    score: number | null
    maxPoints: number | null
  }

  export type QuizAttemptMaxAggregateOutputType = {
    id: string | null
    quizId: string | null
    studentId: string | null
    startedAt: Date | null
    submittedAt: Date | null
    score: number | null
    maxPoints: number | null
  }

  export type QuizAttemptCountAggregateOutputType = {
    id: number
    quizId: number
    studentId: number
    startedAt: number
    submittedAt: number
    score: number
    maxPoints: number
    answers: number
    _all: number
  }


  export type QuizAttemptAvgAggregateInputType = {
    score?: true
    maxPoints?: true
  }

  export type QuizAttemptSumAggregateInputType = {
    score?: true
    maxPoints?: true
  }

  export type QuizAttemptMinAggregateInputType = {
    id?: true
    quizId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    score?: true
    maxPoints?: true
  }

  export type QuizAttemptMaxAggregateInputType = {
    id?: true
    quizId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    score?: true
    maxPoints?: true
  }

  export type QuizAttemptCountAggregateInputType = {
    id?: true
    quizId?: true
    studentId?: true
    startedAt?: true
    submittedAt?: true
    score?: true
    maxPoints?: true
    answers?: true
    _all?: true
  }

  export type QuizAttemptAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizAttempt to aggregate.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuizAttempts
    **/
    _count?: true | QuizAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuizAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuizAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuizAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuizAttemptMaxAggregateInputType
  }

  export type GetQuizAttemptAggregateType<T extends QuizAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateQuizAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuizAttempt[P]>
      : GetScalarType<T[P], AggregateQuizAttempt[P]>
  }




  export type QuizAttemptGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuizAttemptWhereInput
    orderBy?: QuizAttemptOrderByWithAggregationInput | QuizAttemptOrderByWithAggregationInput[]
    by: QuizAttemptScalarFieldEnum[] | QuizAttemptScalarFieldEnum
    having?: QuizAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuizAttemptCountAggregateInputType | true
    _avg?: QuizAttemptAvgAggregateInputType
    _sum?: QuizAttemptSumAggregateInputType
    _min?: QuizAttemptMinAggregateInputType
    _max?: QuizAttemptMaxAggregateInputType
  }

  export type QuizAttemptGroupByOutputType = {
    id: string
    quizId: string
    studentId: string
    startedAt: Date
    submittedAt: Date | null
    score: number | null
    maxPoints: number | null
    answers: JsonValue
    _count: QuizAttemptCountAggregateOutputType | null
    _avg: QuizAttemptAvgAggregateOutputType | null
    _sum: QuizAttemptSumAggregateOutputType | null
    _min: QuizAttemptMinAggregateOutputType | null
    _max: QuizAttemptMaxAggregateOutputType | null
  }

  type GetQuizAttemptGroupByPayload<T extends QuizAttemptGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuizAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuizAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], QuizAttemptGroupByOutputType[P]>
        }
      >
    >


  export type QuizAttemptSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quizId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    score?: boolean
    maxPoints?: boolean
    answers?: boolean
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizAttempt"]>

  export type QuizAttemptSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    quizId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    score?: boolean
    maxPoints?: boolean
    answers?: boolean
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["quizAttempt"]>

  export type QuizAttemptSelectScalar = {
    id?: boolean
    quizId?: boolean
    studentId?: boolean
    startedAt?: boolean
    submittedAt?: boolean
    score?: boolean
    maxPoints?: boolean
    answers?: boolean
  }

  export type QuizAttemptInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type QuizAttemptIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    quiz?: boolean | QuizDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QuizAttemptPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuizAttempt"
    objects: {
      quiz: Prisma.$QuizPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      quizId: string
      studentId: string
      startedAt: Date
      submittedAt: Date | null
      score: number | null
      maxPoints: number | null
      answers: Prisma.JsonValue
    }, ExtArgs["result"]["quizAttempt"]>
    composites: {}
  }

  type QuizAttemptGetPayload<S extends boolean | null | undefined | QuizAttemptDefaultArgs> = $Result.GetResult<Prisma.$QuizAttemptPayload, S>

  type QuizAttemptCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuizAttemptFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuizAttemptCountAggregateInputType | true
    }

  export interface QuizAttemptDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuizAttempt'], meta: { name: 'QuizAttempt' } }
    /**
     * Find zero or one QuizAttempt that matches the filter.
     * @param {QuizAttemptFindUniqueArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuizAttemptFindUniqueArgs>(args: SelectSubset<T, QuizAttemptFindUniqueArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QuizAttempt that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuizAttemptFindUniqueOrThrowArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuizAttemptFindUniqueOrThrowArgs>(args: SelectSubset<T, QuizAttemptFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QuizAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindFirstArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuizAttemptFindFirstArgs>(args?: SelectSubset<T, QuizAttemptFindFirstArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QuizAttempt that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindFirstOrThrowArgs} args - Arguments to find a QuizAttempt
     * @example
     * // Get one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuizAttemptFindFirstOrThrowArgs>(args?: SelectSubset<T, QuizAttemptFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QuizAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuizAttempts
     * const quizAttempts = await prisma.quizAttempt.findMany()
     * 
     * // Get first 10 QuizAttempts
     * const quizAttempts = await prisma.quizAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quizAttemptWithIdOnly = await prisma.quizAttempt.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuizAttemptFindManyArgs>(args?: SelectSubset<T, QuizAttemptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QuizAttempt.
     * @param {QuizAttemptCreateArgs} args - Arguments to create a QuizAttempt.
     * @example
     * // Create one QuizAttempt
     * const QuizAttempt = await prisma.quizAttempt.create({
     *   data: {
     *     // ... data to create a QuizAttempt
     *   }
     * })
     * 
     */
    create<T extends QuizAttemptCreateArgs>(args: SelectSubset<T, QuizAttemptCreateArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QuizAttempts.
     * @param {QuizAttemptCreateManyArgs} args - Arguments to create many QuizAttempts.
     * @example
     * // Create many QuizAttempts
     * const quizAttempt = await prisma.quizAttempt.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuizAttemptCreateManyArgs>(args?: SelectSubset<T, QuizAttemptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuizAttempts and returns the data saved in the database.
     * @param {QuizAttemptCreateManyAndReturnArgs} args - Arguments to create many QuizAttempts.
     * @example
     * // Create many QuizAttempts
     * const quizAttempt = await prisma.quizAttempt.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuizAttempts and only return the `id`
     * const quizAttemptWithIdOnly = await prisma.quizAttempt.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuizAttemptCreateManyAndReturnArgs>(args?: SelectSubset<T, QuizAttemptCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QuizAttempt.
     * @param {QuizAttemptDeleteArgs} args - Arguments to delete one QuizAttempt.
     * @example
     * // Delete one QuizAttempt
     * const QuizAttempt = await prisma.quizAttempt.delete({
     *   where: {
     *     // ... filter to delete one QuizAttempt
     *   }
     * })
     * 
     */
    delete<T extends QuizAttemptDeleteArgs>(args: SelectSubset<T, QuizAttemptDeleteArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QuizAttempt.
     * @param {QuizAttemptUpdateArgs} args - Arguments to update one QuizAttempt.
     * @example
     * // Update one QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuizAttemptUpdateArgs>(args: SelectSubset<T, QuizAttemptUpdateArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QuizAttempts.
     * @param {QuizAttemptDeleteManyArgs} args - Arguments to filter QuizAttempts to delete.
     * @example
     * // Delete a few QuizAttempts
     * const { count } = await prisma.quizAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuizAttemptDeleteManyArgs>(args?: SelectSubset<T, QuizAttemptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuizAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuizAttempts
     * const quizAttempt = await prisma.quizAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuizAttemptUpdateManyArgs>(args: SelectSubset<T, QuizAttemptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QuizAttempt.
     * @param {QuizAttemptUpsertArgs} args - Arguments to update or create a QuizAttempt.
     * @example
     * // Update or create a QuizAttempt
     * const quizAttempt = await prisma.quizAttempt.upsert({
     *   create: {
     *     // ... data to create a QuizAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuizAttempt we want to update
     *   }
     * })
     */
    upsert<T extends QuizAttemptUpsertArgs>(args: SelectSubset<T, QuizAttemptUpsertArgs<ExtArgs>>): Prisma__QuizAttemptClient<$Result.GetResult<Prisma.$QuizAttemptPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QuizAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptCountArgs} args - Arguments to filter QuizAttempts to count.
     * @example
     * // Count the number of QuizAttempts
     * const count = await prisma.quizAttempt.count({
     *   where: {
     *     // ... the filter for the QuizAttempts we want to count
     *   }
     * })
    **/
    count<T extends QuizAttemptCountArgs>(
      args?: Subset<T, QuizAttemptCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuizAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuizAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuizAttemptAggregateArgs>(args: Subset<T, QuizAttemptAggregateArgs>): Prisma.PrismaPromise<GetQuizAttemptAggregateType<T>>

    /**
     * Group by QuizAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuizAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuizAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuizAttemptGroupByArgs['orderBy'] }
        : { orderBy?: QuizAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuizAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuizAttemptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuizAttempt model
   */
  readonly fields: QuizAttemptFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuizAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuizAttemptClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    quiz<T extends QuizDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QuizDefaultArgs<ExtArgs>>): Prisma__QuizClient<$Result.GetResult<Prisma.$QuizPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuizAttempt model
   */ 
  interface QuizAttemptFieldRefs {
    readonly id: FieldRef<"QuizAttempt", 'String'>
    readonly quizId: FieldRef<"QuizAttempt", 'String'>
    readonly studentId: FieldRef<"QuizAttempt", 'String'>
    readonly startedAt: FieldRef<"QuizAttempt", 'DateTime'>
    readonly submittedAt: FieldRef<"QuizAttempt", 'DateTime'>
    readonly score: FieldRef<"QuizAttempt", 'Float'>
    readonly maxPoints: FieldRef<"QuizAttempt", 'Float'>
    readonly answers: FieldRef<"QuizAttempt", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * QuizAttempt findUnique
   */
  export type QuizAttemptFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where: QuizAttemptWhereUniqueInput
  }

  /**
   * QuizAttempt findUniqueOrThrow
   */
  export type QuizAttemptFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where: QuizAttemptWhereUniqueInput
  }

  /**
   * QuizAttempt findFirst
   */
  export type QuizAttemptFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizAttempts.
     */
    distinct?: QuizAttemptScalarFieldEnum | QuizAttemptScalarFieldEnum[]
  }

  /**
   * QuizAttempt findFirstOrThrow
   */
  export type QuizAttemptFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempt to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuizAttempts.
     */
    distinct?: QuizAttemptScalarFieldEnum | QuizAttemptScalarFieldEnum[]
  }

  /**
   * QuizAttempt findMany
   */
  export type QuizAttemptFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter, which QuizAttempts to fetch.
     */
    where?: QuizAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuizAttempts to fetch.
     */
    orderBy?: QuizAttemptOrderByWithRelationInput | QuizAttemptOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuizAttempts.
     */
    cursor?: QuizAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuizAttempts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuizAttempts.
     */
    skip?: number
    distinct?: QuizAttemptScalarFieldEnum | QuizAttemptScalarFieldEnum[]
  }

  /**
   * QuizAttempt create
   */
  export type QuizAttemptCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The data needed to create a QuizAttempt.
     */
    data: XOR<QuizAttemptCreateInput, QuizAttemptUncheckedCreateInput>
  }

  /**
   * QuizAttempt createMany
   */
  export type QuizAttemptCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuizAttempts.
     */
    data: QuizAttemptCreateManyInput | QuizAttemptCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuizAttempt createManyAndReturn
   */
  export type QuizAttemptCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QuizAttempts.
     */
    data: QuizAttemptCreateManyInput | QuizAttemptCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuizAttempt update
   */
  export type QuizAttemptUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The data needed to update a QuizAttempt.
     */
    data: XOR<QuizAttemptUpdateInput, QuizAttemptUncheckedUpdateInput>
    /**
     * Choose, which QuizAttempt to update.
     */
    where: QuizAttemptWhereUniqueInput
  }

  /**
   * QuizAttempt updateMany
   */
  export type QuizAttemptUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuizAttempts.
     */
    data: XOR<QuizAttemptUpdateManyMutationInput, QuizAttemptUncheckedUpdateManyInput>
    /**
     * Filter which QuizAttempts to update
     */
    where?: QuizAttemptWhereInput
  }

  /**
   * QuizAttempt upsert
   */
  export type QuizAttemptUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * The filter to search for the QuizAttempt to update in case it exists.
     */
    where: QuizAttemptWhereUniqueInput
    /**
     * In case the QuizAttempt found by the `where` argument doesn't exist, create a new QuizAttempt with this data.
     */
    create: XOR<QuizAttemptCreateInput, QuizAttemptUncheckedCreateInput>
    /**
     * In case the QuizAttempt was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuizAttemptUpdateInput, QuizAttemptUncheckedUpdateInput>
  }

  /**
   * QuizAttempt delete
   */
  export type QuizAttemptDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
    /**
     * Filter which QuizAttempt to delete.
     */
    where: QuizAttemptWhereUniqueInput
  }

  /**
   * QuizAttempt deleteMany
   */
  export type QuizAttemptDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuizAttempts to delete
     */
    where?: QuizAttemptWhereInput
  }

  /**
   * QuizAttempt without action
   */
  export type QuizAttemptDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuizAttempt
     */
    select?: QuizAttemptSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuizAttemptInclude<ExtArgs> | null
  }


  /**
   * Model CourseAnnouncement
   */

  export type AggregateCourseAnnouncement = {
    _count: CourseAnnouncementCountAggregateOutputType | null
    _min: CourseAnnouncementMinAggregateOutputType | null
    _max: CourseAnnouncementMaxAggregateOutputType | null
  }

  export type CourseAnnouncementMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    authorId: string | null
    title: string | null
    content: string | null
    priority: $Enums.AnnouncementPriority | null
    isImportant: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseAnnouncementMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    authorId: string | null
    title: string | null
    content: string | null
    priority: $Enums.AnnouncementPriority | null
    isImportant: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseAnnouncementCountAggregateOutputType = {
    id: number
    courseId: number
    authorId: number
    title: number
    content: number
    priority: number
    isImportant: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseAnnouncementMinAggregateInputType = {
    id?: true
    courseId?: true
    authorId?: true
    title?: true
    content?: true
    priority?: true
    isImportant?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseAnnouncementMaxAggregateInputType = {
    id?: true
    courseId?: true
    authorId?: true
    title?: true
    content?: true
    priority?: true
    isImportant?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseAnnouncementCountAggregateInputType = {
    id?: true
    courseId?: true
    authorId?: true
    title?: true
    content?: true
    priority?: true
    isImportant?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAnnouncementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseAnnouncement to aggregate.
     */
    where?: CourseAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseAnnouncements to fetch.
     */
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseAnnouncements
    **/
    _count?: true | CourseAnnouncementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseAnnouncementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseAnnouncementMaxAggregateInputType
  }

  export type GetCourseAnnouncementAggregateType<T extends CourseAnnouncementAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseAnnouncement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseAnnouncement[P]>
      : GetScalarType<T[P], AggregateCourseAnnouncement[P]>
  }




  export type CourseAnnouncementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseAnnouncementWhereInput
    orderBy?: CourseAnnouncementOrderByWithAggregationInput | CourseAnnouncementOrderByWithAggregationInput[]
    by: CourseAnnouncementScalarFieldEnum[] | CourseAnnouncementScalarFieldEnum
    having?: CourseAnnouncementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseAnnouncementCountAggregateInputType | true
    _min?: CourseAnnouncementMinAggregateInputType
    _max?: CourseAnnouncementMaxAggregateInputType
  }

  export type CourseAnnouncementGroupByOutputType = {
    id: string
    courseId: string
    authorId: string
    title: string
    content: string
    priority: $Enums.AnnouncementPriority
    isImportant: boolean
    createdAt: Date
    updatedAt: Date
    _count: CourseAnnouncementCountAggregateOutputType | null
    _min: CourseAnnouncementMinAggregateOutputType | null
    _max: CourseAnnouncementMaxAggregateOutputType | null
  }

  type GetCourseAnnouncementGroupByPayload<T extends CourseAnnouncementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseAnnouncementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseAnnouncementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseAnnouncementGroupByOutputType[P]>
            : GetScalarType<T[P], CourseAnnouncementGroupByOutputType[P]>
        }
      >
    >


  export type CourseAnnouncementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    authorId?: boolean
    title?: boolean
    content?: boolean
    priority?: boolean
    isImportant?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseAnnouncement"]>

  export type CourseAnnouncementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    authorId?: boolean
    title?: boolean
    content?: boolean
    priority?: boolean
    isImportant?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseAnnouncement"]>

  export type CourseAnnouncementSelectScalar = {
    id?: boolean
    courseId?: boolean
    authorId?: boolean
    title?: boolean
    content?: boolean
    priority?: boolean
    isImportant?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseAnnouncementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseAnnouncementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    author?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CourseAnnouncementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseAnnouncement"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      author: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      authorId: string
      title: string
      content: string
      priority: $Enums.AnnouncementPriority
      isImportant: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["courseAnnouncement"]>
    composites: {}
  }

  type CourseAnnouncementGetPayload<S extends boolean | null | undefined | CourseAnnouncementDefaultArgs> = $Result.GetResult<Prisma.$CourseAnnouncementPayload, S>

  type CourseAnnouncementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseAnnouncementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseAnnouncementCountAggregateInputType | true
    }

  export interface CourseAnnouncementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseAnnouncement'], meta: { name: 'CourseAnnouncement' } }
    /**
     * Find zero or one CourseAnnouncement that matches the filter.
     * @param {CourseAnnouncementFindUniqueArgs} args - Arguments to find a CourseAnnouncement
     * @example
     * // Get one CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseAnnouncementFindUniqueArgs>(args: SelectSubset<T, CourseAnnouncementFindUniqueArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CourseAnnouncement that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseAnnouncementFindUniqueOrThrowArgs} args - Arguments to find a CourseAnnouncement
     * @example
     * // Get one CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseAnnouncementFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseAnnouncementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CourseAnnouncement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementFindFirstArgs} args - Arguments to find a CourseAnnouncement
     * @example
     * // Get one CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseAnnouncementFindFirstArgs>(args?: SelectSubset<T, CourseAnnouncementFindFirstArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CourseAnnouncement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementFindFirstOrThrowArgs} args - Arguments to find a CourseAnnouncement
     * @example
     * // Get one CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseAnnouncementFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseAnnouncementFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CourseAnnouncements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseAnnouncements
     * const courseAnnouncements = await prisma.courseAnnouncement.findMany()
     * 
     * // Get first 10 CourseAnnouncements
     * const courseAnnouncements = await prisma.courseAnnouncement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseAnnouncementWithIdOnly = await prisma.courseAnnouncement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseAnnouncementFindManyArgs>(args?: SelectSubset<T, CourseAnnouncementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CourseAnnouncement.
     * @param {CourseAnnouncementCreateArgs} args - Arguments to create a CourseAnnouncement.
     * @example
     * // Create one CourseAnnouncement
     * const CourseAnnouncement = await prisma.courseAnnouncement.create({
     *   data: {
     *     // ... data to create a CourseAnnouncement
     *   }
     * })
     * 
     */
    create<T extends CourseAnnouncementCreateArgs>(args: SelectSubset<T, CourseAnnouncementCreateArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CourseAnnouncements.
     * @param {CourseAnnouncementCreateManyArgs} args - Arguments to create many CourseAnnouncements.
     * @example
     * // Create many CourseAnnouncements
     * const courseAnnouncement = await prisma.courseAnnouncement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseAnnouncementCreateManyArgs>(args?: SelectSubset<T, CourseAnnouncementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseAnnouncements and returns the data saved in the database.
     * @param {CourseAnnouncementCreateManyAndReturnArgs} args - Arguments to create many CourseAnnouncements.
     * @example
     * // Create many CourseAnnouncements
     * const courseAnnouncement = await prisma.courseAnnouncement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseAnnouncements and only return the `id`
     * const courseAnnouncementWithIdOnly = await prisma.courseAnnouncement.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseAnnouncementCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseAnnouncementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CourseAnnouncement.
     * @param {CourseAnnouncementDeleteArgs} args - Arguments to delete one CourseAnnouncement.
     * @example
     * // Delete one CourseAnnouncement
     * const CourseAnnouncement = await prisma.courseAnnouncement.delete({
     *   where: {
     *     // ... filter to delete one CourseAnnouncement
     *   }
     * })
     * 
     */
    delete<T extends CourseAnnouncementDeleteArgs>(args: SelectSubset<T, CourseAnnouncementDeleteArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CourseAnnouncement.
     * @param {CourseAnnouncementUpdateArgs} args - Arguments to update one CourseAnnouncement.
     * @example
     * // Update one CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseAnnouncementUpdateArgs>(args: SelectSubset<T, CourseAnnouncementUpdateArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CourseAnnouncements.
     * @param {CourseAnnouncementDeleteManyArgs} args - Arguments to filter CourseAnnouncements to delete.
     * @example
     * // Delete a few CourseAnnouncements
     * const { count } = await prisma.courseAnnouncement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseAnnouncementDeleteManyArgs>(args?: SelectSubset<T, CourseAnnouncementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseAnnouncements
     * const courseAnnouncement = await prisma.courseAnnouncement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseAnnouncementUpdateManyArgs>(args: SelectSubset<T, CourseAnnouncementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseAnnouncement.
     * @param {CourseAnnouncementUpsertArgs} args - Arguments to update or create a CourseAnnouncement.
     * @example
     * // Update or create a CourseAnnouncement
     * const courseAnnouncement = await prisma.courseAnnouncement.upsert({
     *   create: {
     *     // ... data to create a CourseAnnouncement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseAnnouncement we want to update
     *   }
     * })
     */
    upsert<T extends CourseAnnouncementUpsertArgs>(args: SelectSubset<T, CourseAnnouncementUpsertArgs<ExtArgs>>): Prisma__CourseAnnouncementClient<$Result.GetResult<Prisma.$CourseAnnouncementPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CourseAnnouncements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementCountArgs} args - Arguments to filter CourseAnnouncements to count.
     * @example
     * // Count the number of CourseAnnouncements
     * const count = await prisma.courseAnnouncement.count({
     *   where: {
     *     // ... the filter for the CourseAnnouncements we want to count
     *   }
     * })
    **/
    count<T extends CourseAnnouncementCountArgs>(
      args?: Subset<T, CourseAnnouncementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseAnnouncementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseAnnouncement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAnnouncementAggregateArgs>(args: Subset<T, CourseAnnouncementAggregateArgs>): Prisma.PrismaPromise<GetCourseAnnouncementAggregateType<T>>

    /**
     * Group by CourseAnnouncement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAnnouncementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseAnnouncementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseAnnouncementGroupByArgs['orderBy'] }
        : { orderBy?: CourseAnnouncementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseAnnouncementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseAnnouncementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseAnnouncement model
   */
  readonly fields: CourseAnnouncementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseAnnouncement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseAnnouncementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseAnnouncement model
   */ 
  interface CourseAnnouncementFieldRefs {
    readonly id: FieldRef<"CourseAnnouncement", 'String'>
    readonly courseId: FieldRef<"CourseAnnouncement", 'String'>
    readonly authorId: FieldRef<"CourseAnnouncement", 'String'>
    readonly title: FieldRef<"CourseAnnouncement", 'String'>
    readonly content: FieldRef<"CourseAnnouncement", 'String'>
    readonly priority: FieldRef<"CourseAnnouncement", 'AnnouncementPriority'>
    readonly isImportant: FieldRef<"CourseAnnouncement", 'Boolean'>
    readonly createdAt: FieldRef<"CourseAnnouncement", 'DateTime'>
    readonly updatedAt: FieldRef<"CourseAnnouncement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CourseAnnouncement findUnique
   */
  export type CourseAnnouncementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which CourseAnnouncement to fetch.
     */
    where: CourseAnnouncementWhereUniqueInput
  }

  /**
   * CourseAnnouncement findUniqueOrThrow
   */
  export type CourseAnnouncementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which CourseAnnouncement to fetch.
     */
    where: CourseAnnouncementWhereUniqueInput
  }

  /**
   * CourseAnnouncement findFirst
   */
  export type CourseAnnouncementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which CourseAnnouncement to fetch.
     */
    where?: CourseAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseAnnouncements to fetch.
     */
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseAnnouncements.
     */
    cursor?: CourseAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseAnnouncements.
     */
    distinct?: CourseAnnouncementScalarFieldEnum | CourseAnnouncementScalarFieldEnum[]
  }

  /**
   * CourseAnnouncement findFirstOrThrow
   */
  export type CourseAnnouncementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which CourseAnnouncement to fetch.
     */
    where?: CourseAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseAnnouncements to fetch.
     */
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseAnnouncements.
     */
    cursor?: CourseAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseAnnouncements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseAnnouncements.
     */
    distinct?: CourseAnnouncementScalarFieldEnum | CourseAnnouncementScalarFieldEnum[]
  }

  /**
   * CourseAnnouncement findMany
   */
  export type CourseAnnouncementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter, which CourseAnnouncements to fetch.
     */
    where?: CourseAnnouncementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseAnnouncements to fetch.
     */
    orderBy?: CourseAnnouncementOrderByWithRelationInput | CourseAnnouncementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseAnnouncements.
     */
    cursor?: CourseAnnouncementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseAnnouncements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseAnnouncements.
     */
    skip?: number
    distinct?: CourseAnnouncementScalarFieldEnum | CourseAnnouncementScalarFieldEnum[]
  }

  /**
   * CourseAnnouncement create
   */
  export type CourseAnnouncementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseAnnouncement.
     */
    data: XOR<CourseAnnouncementCreateInput, CourseAnnouncementUncheckedCreateInput>
  }

  /**
   * CourseAnnouncement createMany
   */
  export type CourseAnnouncementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseAnnouncements.
     */
    data: CourseAnnouncementCreateManyInput | CourseAnnouncementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseAnnouncement createManyAndReturn
   */
  export type CourseAnnouncementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CourseAnnouncements.
     */
    data: CourseAnnouncementCreateManyInput | CourseAnnouncementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseAnnouncement update
   */
  export type CourseAnnouncementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseAnnouncement.
     */
    data: XOR<CourseAnnouncementUpdateInput, CourseAnnouncementUncheckedUpdateInput>
    /**
     * Choose, which CourseAnnouncement to update.
     */
    where: CourseAnnouncementWhereUniqueInput
  }

  /**
   * CourseAnnouncement updateMany
   */
  export type CourseAnnouncementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseAnnouncements.
     */
    data: XOR<CourseAnnouncementUpdateManyMutationInput, CourseAnnouncementUncheckedUpdateManyInput>
    /**
     * Filter which CourseAnnouncements to update
     */
    where?: CourseAnnouncementWhereInput
  }

  /**
   * CourseAnnouncement upsert
   */
  export type CourseAnnouncementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseAnnouncement to update in case it exists.
     */
    where: CourseAnnouncementWhereUniqueInput
    /**
     * In case the CourseAnnouncement found by the `where` argument doesn't exist, create a new CourseAnnouncement with this data.
     */
    create: XOR<CourseAnnouncementCreateInput, CourseAnnouncementUncheckedCreateInput>
    /**
     * In case the CourseAnnouncement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseAnnouncementUpdateInput, CourseAnnouncementUncheckedUpdateInput>
  }

  /**
   * CourseAnnouncement delete
   */
  export type CourseAnnouncementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
    /**
     * Filter which CourseAnnouncement to delete.
     */
    where: CourseAnnouncementWhereUniqueInput
  }

  /**
   * CourseAnnouncement deleteMany
   */
  export type CourseAnnouncementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseAnnouncements to delete
     */
    where?: CourseAnnouncementWhereInput
  }

  /**
   * CourseAnnouncement without action
   */
  export type CourseAnnouncementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseAnnouncement
     */
    select?: CourseAnnouncementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseAnnouncementInclude<ExtArgs> | null
  }


  /**
   * Model ClassSession
   */

  export type AggregateClassSession = {
    _count: ClassSessionCountAggregateOutputType | null
    _min: ClassSessionMinAggregateOutputType | null
    _max: ClassSessionMaxAggregateOutputType | null
  }

  export type ClassSessionMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    date: Date | null
    topic: string | null
    location: string | null
    notes: string | null
    cancelled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassSessionMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    date: Date | null
    topic: string | null
    location: string | null
    notes: string | null
    cancelled: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ClassSessionCountAggregateOutputType = {
    id: number
    courseId: number
    date: number
    topic: number
    location: number
    notes: number
    cancelled: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ClassSessionMinAggregateInputType = {
    id?: true
    courseId?: true
    date?: true
    topic?: true
    location?: true
    notes?: true
    cancelled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassSessionMaxAggregateInputType = {
    id?: true
    courseId?: true
    date?: true
    topic?: true
    location?: true
    notes?: true
    cancelled?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ClassSessionCountAggregateInputType = {
    id?: true
    courseId?: true
    date?: true
    topic?: true
    location?: true
    notes?: true
    cancelled?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ClassSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSession to aggregate.
     */
    where?: ClassSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSessions to fetch.
     */
    orderBy?: ClassSessionOrderByWithRelationInput | ClassSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassSessions
    **/
    _count?: true | ClassSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassSessionMaxAggregateInputType
  }

  export type GetClassSessionAggregateType<T extends ClassSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateClassSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassSession[P]>
      : GetScalarType<T[P], AggregateClassSession[P]>
  }




  export type ClassSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassSessionWhereInput
    orderBy?: ClassSessionOrderByWithAggregationInput | ClassSessionOrderByWithAggregationInput[]
    by: ClassSessionScalarFieldEnum[] | ClassSessionScalarFieldEnum
    having?: ClassSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassSessionCountAggregateInputType | true
    _min?: ClassSessionMinAggregateInputType
    _max?: ClassSessionMaxAggregateInputType
  }

  export type ClassSessionGroupByOutputType = {
    id: string
    courseId: string
    date: Date
    topic: string
    location: string
    notes: string | null
    cancelled: boolean
    createdAt: Date
    updatedAt: Date
    _count: ClassSessionCountAggregateOutputType | null
    _min: ClassSessionMinAggregateOutputType | null
    _max: ClassSessionMaxAggregateOutputType | null
  }

  type GetClassSessionGroupByPayload<T extends ClassSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ClassSessionGroupByOutputType[P]>
        }
      >
    >


  export type ClassSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    date?: boolean
    topic?: boolean
    location?: boolean
    notes?: boolean
    cancelled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    attendances?: boolean | ClassSession$attendancesArgs<ExtArgs>
    _count?: boolean | ClassSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSession"]>

  export type ClassSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    date?: boolean
    topic?: boolean
    location?: boolean
    notes?: boolean
    cancelled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classSession"]>

  export type ClassSessionSelectScalar = {
    id?: boolean
    courseId?: boolean
    date?: boolean
    topic?: boolean
    location?: boolean
    notes?: boolean
    cancelled?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ClassSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    attendances?: boolean | ClassSession$attendancesArgs<ExtArgs>
    _count?: boolean | ClassSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $ClassSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassSession"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      attendances: Prisma.$StudentAttendancePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      date: Date
      topic: string
      location: string
      notes: string | null
      cancelled: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["classSession"]>
    composites: {}
  }

  type ClassSessionGetPayload<S extends boolean | null | undefined | ClassSessionDefaultArgs> = $Result.GetResult<Prisma.$ClassSessionPayload, S>

  type ClassSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassSessionCountAggregateInputType | true
    }

  export interface ClassSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassSession'], meta: { name: 'ClassSession' } }
    /**
     * Find zero or one ClassSession that matches the filter.
     * @param {ClassSessionFindUniqueArgs} args - Arguments to find a ClassSession
     * @example
     * // Get one ClassSession
     * const classSession = await prisma.classSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassSessionFindUniqueArgs>(args: SelectSubset<T, ClassSessionFindUniqueArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ClassSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassSessionFindUniqueOrThrowArgs} args - Arguments to find a ClassSession
     * @example
     * // Get one ClassSession
     * const classSession = await prisma.classSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ClassSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionFindFirstArgs} args - Arguments to find a ClassSession
     * @example
     * // Get one ClassSession
     * const classSession = await prisma.classSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassSessionFindFirstArgs>(args?: SelectSubset<T, ClassSessionFindFirstArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ClassSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionFindFirstOrThrowArgs} args - Arguments to find a ClassSession
     * @example
     * // Get one ClassSession
     * const classSession = await prisma.classSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ClassSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassSessions
     * const classSessions = await prisma.classSession.findMany()
     * 
     * // Get first 10 ClassSessions
     * const classSessions = await prisma.classSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classSessionWithIdOnly = await prisma.classSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassSessionFindManyArgs>(args?: SelectSubset<T, ClassSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ClassSession.
     * @param {ClassSessionCreateArgs} args - Arguments to create a ClassSession.
     * @example
     * // Create one ClassSession
     * const ClassSession = await prisma.classSession.create({
     *   data: {
     *     // ... data to create a ClassSession
     *   }
     * })
     * 
     */
    create<T extends ClassSessionCreateArgs>(args: SelectSubset<T, ClassSessionCreateArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ClassSessions.
     * @param {ClassSessionCreateManyArgs} args - Arguments to create many ClassSessions.
     * @example
     * // Create many ClassSessions
     * const classSession = await prisma.classSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassSessionCreateManyArgs>(args?: SelectSubset<T, ClassSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassSessions and returns the data saved in the database.
     * @param {ClassSessionCreateManyAndReturnArgs} args - Arguments to create many ClassSessions.
     * @example
     * // Create many ClassSessions
     * const classSession = await prisma.classSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassSessions and only return the `id`
     * const classSessionWithIdOnly = await prisma.classSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ClassSession.
     * @param {ClassSessionDeleteArgs} args - Arguments to delete one ClassSession.
     * @example
     * // Delete one ClassSession
     * const ClassSession = await prisma.classSession.delete({
     *   where: {
     *     // ... filter to delete one ClassSession
     *   }
     * })
     * 
     */
    delete<T extends ClassSessionDeleteArgs>(args: SelectSubset<T, ClassSessionDeleteArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ClassSession.
     * @param {ClassSessionUpdateArgs} args - Arguments to update one ClassSession.
     * @example
     * // Update one ClassSession
     * const classSession = await prisma.classSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassSessionUpdateArgs>(args: SelectSubset<T, ClassSessionUpdateArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ClassSessions.
     * @param {ClassSessionDeleteManyArgs} args - Arguments to filter ClassSessions to delete.
     * @example
     * // Delete a few ClassSessions
     * const { count } = await prisma.classSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassSessionDeleteManyArgs>(args?: SelectSubset<T, ClassSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassSessions
     * const classSession = await prisma.classSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassSessionUpdateManyArgs>(args: SelectSubset<T, ClassSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ClassSession.
     * @param {ClassSessionUpsertArgs} args - Arguments to update or create a ClassSession.
     * @example
     * // Update or create a ClassSession
     * const classSession = await prisma.classSession.upsert({
     *   create: {
     *     // ... data to create a ClassSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassSession we want to update
     *   }
     * })
     */
    upsert<T extends ClassSessionUpsertArgs>(args: SelectSubset<T, ClassSessionUpsertArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ClassSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionCountArgs} args - Arguments to filter ClassSessions to count.
     * @example
     * // Count the number of ClassSessions
     * const count = await prisma.classSession.count({
     *   where: {
     *     // ... the filter for the ClassSessions we want to count
     *   }
     * })
    **/
    count<T extends ClassSessionCountArgs>(
      args?: Subset<T, ClassSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassSessionAggregateArgs>(args: Subset<T, ClassSessionAggregateArgs>): Prisma.PrismaPromise<GetClassSessionAggregateType<T>>

    /**
     * Group by ClassSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassSessionGroupByArgs['orderBy'] }
        : { orderBy?: ClassSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassSession model
   */
  readonly fields: ClassSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    attendances<T extends ClassSession$attendancesArgs<ExtArgs> = {}>(args?: Subset<T, ClassSession$attendancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassSession model
   */ 
  interface ClassSessionFieldRefs {
    readonly id: FieldRef<"ClassSession", 'String'>
    readonly courseId: FieldRef<"ClassSession", 'String'>
    readonly date: FieldRef<"ClassSession", 'DateTime'>
    readonly topic: FieldRef<"ClassSession", 'String'>
    readonly location: FieldRef<"ClassSession", 'String'>
    readonly notes: FieldRef<"ClassSession", 'String'>
    readonly cancelled: FieldRef<"ClassSession", 'Boolean'>
    readonly createdAt: FieldRef<"ClassSession", 'DateTime'>
    readonly updatedAt: FieldRef<"ClassSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ClassSession findUnique
   */
  export type ClassSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter, which ClassSession to fetch.
     */
    where: ClassSessionWhereUniqueInput
  }

  /**
   * ClassSession findUniqueOrThrow
   */
  export type ClassSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter, which ClassSession to fetch.
     */
    where: ClassSessionWhereUniqueInput
  }

  /**
   * ClassSession findFirst
   */
  export type ClassSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter, which ClassSession to fetch.
     */
    where?: ClassSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSessions to fetch.
     */
    orderBy?: ClassSessionOrderByWithRelationInput | ClassSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSessions.
     */
    cursor?: ClassSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSessions.
     */
    distinct?: ClassSessionScalarFieldEnum | ClassSessionScalarFieldEnum[]
  }

  /**
   * ClassSession findFirstOrThrow
   */
  export type ClassSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter, which ClassSession to fetch.
     */
    where?: ClassSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSessions to fetch.
     */
    orderBy?: ClassSessionOrderByWithRelationInput | ClassSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassSessions.
     */
    cursor?: ClassSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassSessions.
     */
    distinct?: ClassSessionScalarFieldEnum | ClassSessionScalarFieldEnum[]
  }

  /**
   * ClassSession findMany
   */
  export type ClassSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter, which ClassSessions to fetch.
     */
    where?: ClassSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassSessions to fetch.
     */
    orderBy?: ClassSessionOrderByWithRelationInput | ClassSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassSessions.
     */
    cursor?: ClassSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassSessions.
     */
    skip?: number
    distinct?: ClassSessionScalarFieldEnum | ClassSessionScalarFieldEnum[]
  }

  /**
   * ClassSession create
   */
  export type ClassSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassSession.
     */
    data: XOR<ClassSessionCreateInput, ClassSessionUncheckedCreateInput>
  }

  /**
   * ClassSession createMany
   */
  export type ClassSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassSessions.
     */
    data: ClassSessionCreateManyInput | ClassSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassSession createManyAndReturn
   */
  export type ClassSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ClassSessions.
     */
    data: ClassSessionCreateManyInput | ClassSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassSession update
   */
  export type ClassSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassSession.
     */
    data: XOR<ClassSessionUpdateInput, ClassSessionUncheckedUpdateInput>
    /**
     * Choose, which ClassSession to update.
     */
    where: ClassSessionWhereUniqueInput
  }

  /**
   * ClassSession updateMany
   */
  export type ClassSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassSessions.
     */
    data: XOR<ClassSessionUpdateManyMutationInput, ClassSessionUncheckedUpdateManyInput>
    /**
     * Filter which ClassSessions to update
     */
    where?: ClassSessionWhereInput
  }

  /**
   * ClassSession upsert
   */
  export type ClassSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassSession to update in case it exists.
     */
    where: ClassSessionWhereUniqueInput
    /**
     * In case the ClassSession found by the `where` argument doesn't exist, create a new ClassSession with this data.
     */
    create: XOR<ClassSessionCreateInput, ClassSessionUncheckedCreateInput>
    /**
     * In case the ClassSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassSessionUpdateInput, ClassSessionUncheckedUpdateInput>
  }

  /**
   * ClassSession delete
   */
  export type ClassSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
    /**
     * Filter which ClassSession to delete.
     */
    where: ClassSessionWhereUniqueInput
  }

  /**
   * ClassSession deleteMany
   */
  export type ClassSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassSessions to delete
     */
    where?: ClassSessionWhereInput
  }

  /**
   * ClassSession.attendances
   */
  export type ClassSession$attendancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    cursor?: StudentAttendanceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * ClassSession without action
   */
  export type ClassSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassSession
     */
    select?: ClassSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassSessionInclude<ExtArgs> | null
  }


  /**
   * Model StudentAttendance
   */

  export type AggregateStudentAttendance = {
    _count: StudentAttendanceCountAggregateOutputType | null
    _min: StudentAttendanceMinAggregateOutputType | null
    _max: StudentAttendanceMaxAggregateOutputType | null
  }

  export type StudentAttendanceMinAggregateOutputType = {
    id: string | null
    sessionId: string | null
    studentId: string | null
    status: $Enums.AttendanceStatus | null
    notes: string | null
    createdAt: Date | null
  }

  export type StudentAttendanceMaxAggregateOutputType = {
    id: string | null
    sessionId: string | null
    studentId: string | null
    status: $Enums.AttendanceStatus | null
    notes: string | null
    createdAt: Date | null
  }

  export type StudentAttendanceCountAggregateOutputType = {
    id: number
    sessionId: number
    studentId: number
    status: number
    notes: number
    createdAt: number
    _all: number
  }


  export type StudentAttendanceMinAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    notes?: true
    createdAt?: true
  }

  export type StudentAttendanceMaxAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    notes?: true
    createdAt?: true
  }

  export type StudentAttendanceCountAggregateInputType = {
    id?: true
    sessionId?: true
    studentId?: true
    status?: true
    notes?: true
    createdAt?: true
    _all?: true
  }

  export type StudentAttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAttendance to aggregate.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentAttendances
    **/
    _count?: true | StudentAttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentAttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentAttendanceMaxAggregateInputType
  }

  export type GetStudentAttendanceAggregateType<T extends StudentAttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentAttendance[P]>
      : GetScalarType<T[P], AggregateStudentAttendance[P]>
  }




  export type StudentAttendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentAttendanceWhereInput
    orderBy?: StudentAttendanceOrderByWithAggregationInput | StudentAttendanceOrderByWithAggregationInput[]
    by: StudentAttendanceScalarFieldEnum[] | StudentAttendanceScalarFieldEnum
    having?: StudentAttendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentAttendanceCountAggregateInputType | true
    _min?: StudentAttendanceMinAggregateInputType
    _max?: StudentAttendanceMaxAggregateInputType
  }

  export type StudentAttendanceGroupByOutputType = {
    id: string
    sessionId: string
    studentId: string
    status: $Enums.AttendanceStatus
    notes: string | null
    createdAt: Date
    _count: StudentAttendanceCountAggregateOutputType | null
    _min: StudentAttendanceMinAggregateOutputType | null
    _max: StudentAttendanceMaxAggregateOutputType | null
  }

  type GetStudentAttendanceGroupByPayload<T extends StudentAttendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentAttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentAttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentAttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], StudentAttendanceGroupByOutputType[P]>
        }
      >
    >


  export type StudentAttendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    session?: boolean | ClassSessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAttendance"]>

  export type StudentAttendanceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
    session?: boolean | ClassSessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentAttendance"]>

  export type StudentAttendanceSelectScalar = {
    id?: boolean
    sessionId?: boolean
    studentId?: boolean
    status?: boolean
    notes?: boolean
    createdAt?: boolean
  }

  export type StudentAttendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ClassSessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentAttendanceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ClassSessionDefaultArgs<ExtArgs>
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentAttendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentAttendance"
    objects: {
      session: Prisma.$ClassSessionPayload<ExtArgs>
      student: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionId: string
      studentId: string
      status: $Enums.AttendanceStatus
      notes: string | null
      createdAt: Date
    }, ExtArgs["result"]["studentAttendance"]>
    composites: {}
  }

  type StudentAttendanceGetPayload<S extends boolean | null | undefined | StudentAttendanceDefaultArgs> = $Result.GetResult<Prisma.$StudentAttendancePayload, S>

  type StudentAttendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentAttendanceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentAttendanceCountAggregateInputType | true
    }

  export interface StudentAttendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentAttendance'], meta: { name: 'StudentAttendance' } }
    /**
     * Find zero or one StudentAttendance that matches the filter.
     * @param {StudentAttendanceFindUniqueArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentAttendanceFindUniqueArgs>(args: SelectSubset<T, StudentAttendanceFindUniqueArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one StudentAttendance that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentAttendanceFindUniqueOrThrowArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentAttendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentAttendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first StudentAttendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindFirstArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentAttendanceFindFirstArgs>(args?: SelectSubset<T, StudentAttendanceFindFirstArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first StudentAttendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindFirstOrThrowArgs} args - Arguments to find a StudentAttendance
     * @example
     * // Get one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentAttendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentAttendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more StudentAttendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentAttendances
     * const studentAttendances = await prisma.studentAttendance.findMany()
     * 
     * // Get first 10 StudentAttendances
     * const studentAttendances = await prisma.studentAttendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentAttendanceWithIdOnly = await prisma.studentAttendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentAttendanceFindManyArgs>(args?: SelectSubset<T, StudentAttendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a StudentAttendance.
     * @param {StudentAttendanceCreateArgs} args - Arguments to create a StudentAttendance.
     * @example
     * // Create one StudentAttendance
     * const StudentAttendance = await prisma.studentAttendance.create({
     *   data: {
     *     // ... data to create a StudentAttendance
     *   }
     * })
     * 
     */
    create<T extends StudentAttendanceCreateArgs>(args: SelectSubset<T, StudentAttendanceCreateArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many StudentAttendances.
     * @param {StudentAttendanceCreateManyArgs} args - Arguments to create many StudentAttendances.
     * @example
     * // Create many StudentAttendances
     * const studentAttendance = await prisma.studentAttendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentAttendanceCreateManyArgs>(args?: SelectSubset<T, StudentAttendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentAttendances and returns the data saved in the database.
     * @param {StudentAttendanceCreateManyAndReturnArgs} args - Arguments to create many StudentAttendances.
     * @example
     * // Create many StudentAttendances
     * const studentAttendance = await prisma.studentAttendance.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentAttendances and only return the `id`
     * const studentAttendanceWithIdOnly = await prisma.studentAttendance.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentAttendanceCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentAttendanceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a StudentAttendance.
     * @param {StudentAttendanceDeleteArgs} args - Arguments to delete one StudentAttendance.
     * @example
     * // Delete one StudentAttendance
     * const StudentAttendance = await prisma.studentAttendance.delete({
     *   where: {
     *     // ... filter to delete one StudentAttendance
     *   }
     * })
     * 
     */
    delete<T extends StudentAttendanceDeleteArgs>(args: SelectSubset<T, StudentAttendanceDeleteArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one StudentAttendance.
     * @param {StudentAttendanceUpdateArgs} args - Arguments to update one StudentAttendance.
     * @example
     * // Update one StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentAttendanceUpdateArgs>(args: SelectSubset<T, StudentAttendanceUpdateArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more StudentAttendances.
     * @param {StudentAttendanceDeleteManyArgs} args - Arguments to filter StudentAttendances to delete.
     * @example
     * // Delete a few StudentAttendances
     * const { count } = await prisma.studentAttendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentAttendanceDeleteManyArgs>(args?: SelectSubset<T, StudentAttendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentAttendances
     * const studentAttendance = await prisma.studentAttendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentAttendanceUpdateManyArgs>(args: SelectSubset<T, StudentAttendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentAttendance.
     * @param {StudentAttendanceUpsertArgs} args - Arguments to update or create a StudentAttendance.
     * @example
     * // Update or create a StudentAttendance
     * const studentAttendance = await prisma.studentAttendance.upsert({
     *   create: {
     *     // ... data to create a StudentAttendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentAttendance we want to update
     *   }
     * })
     */
    upsert<T extends StudentAttendanceUpsertArgs>(args: SelectSubset<T, StudentAttendanceUpsertArgs<ExtArgs>>): Prisma__StudentAttendanceClient<$Result.GetResult<Prisma.$StudentAttendancePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of StudentAttendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceCountArgs} args - Arguments to filter StudentAttendances to count.
     * @example
     * // Count the number of StudentAttendances
     * const count = await prisma.studentAttendance.count({
     *   where: {
     *     // ... the filter for the StudentAttendances we want to count
     *   }
     * })
    **/
    count<T extends StudentAttendanceCountArgs>(
      args?: Subset<T, StudentAttendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentAttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAttendanceAggregateArgs>(args: Subset<T, StudentAttendanceAggregateArgs>): Prisma.PrismaPromise<GetStudentAttendanceAggregateType<T>>

    /**
     * Group by StudentAttendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAttendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentAttendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentAttendanceGroupByArgs['orderBy'] }
        : { orderBy?: StudentAttendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentAttendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentAttendance model
   */
  readonly fields: StudentAttendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentAttendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentAttendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ClassSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassSessionDefaultArgs<ExtArgs>>): Prisma__ClassSessionClient<$Result.GetResult<Prisma.$ClassSessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentAttendance model
   */ 
  interface StudentAttendanceFieldRefs {
    readonly id: FieldRef<"StudentAttendance", 'String'>
    readonly sessionId: FieldRef<"StudentAttendance", 'String'>
    readonly studentId: FieldRef<"StudentAttendance", 'String'>
    readonly status: FieldRef<"StudentAttendance", 'AttendanceStatus'>
    readonly notes: FieldRef<"StudentAttendance", 'String'>
    readonly createdAt: FieldRef<"StudentAttendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StudentAttendance findUnique
   */
  export type StudentAttendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance findUniqueOrThrow
   */
  export type StudentAttendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance findFirst
   */
  export type StudentAttendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAttendances.
     */
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance findFirstOrThrow
   */
  export type StudentAttendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendance to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentAttendances.
     */
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance findMany
   */
  export type StudentAttendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter, which StudentAttendances to fetch.
     */
    where?: StudentAttendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentAttendances to fetch.
     */
    orderBy?: StudentAttendanceOrderByWithRelationInput | StudentAttendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentAttendances.
     */
    cursor?: StudentAttendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentAttendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentAttendances.
     */
    skip?: number
    distinct?: StudentAttendanceScalarFieldEnum | StudentAttendanceScalarFieldEnum[]
  }

  /**
   * StudentAttendance create
   */
  export type StudentAttendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentAttendance.
     */
    data: XOR<StudentAttendanceCreateInput, StudentAttendanceUncheckedCreateInput>
  }

  /**
   * StudentAttendance createMany
   */
  export type StudentAttendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentAttendances.
     */
    data: StudentAttendanceCreateManyInput | StudentAttendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentAttendance createManyAndReturn
   */
  export type StudentAttendanceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentAttendances.
     */
    data: StudentAttendanceCreateManyInput | StudentAttendanceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentAttendance update
   */
  export type StudentAttendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentAttendance.
     */
    data: XOR<StudentAttendanceUpdateInput, StudentAttendanceUncheckedUpdateInput>
    /**
     * Choose, which StudentAttendance to update.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance updateMany
   */
  export type StudentAttendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentAttendances.
     */
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyInput>
    /**
     * Filter which StudentAttendances to update
     */
    where?: StudentAttendanceWhereInput
  }

  /**
   * StudentAttendance upsert
   */
  export type StudentAttendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentAttendance to update in case it exists.
     */
    where: StudentAttendanceWhereUniqueInput
    /**
     * In case the StudentAttendance found by the `where` argument doesn't exist, create a new StudentAttendance with this data.
     */
    create: XOR<StudentAttendanceCreateInput, StudentAttendanceUncheckedCreateInput>
    /**
     * In case the StudentAttendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentAttendanceUpdateInput, StudentAttendanceUncheckedUpdateInput>
  }

  /**
   * StudentAttendance delete
   */
  export type StudentAttendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
    /**
     * Filter which StudentAttendance to delete.
     */
    where: StudentAttendanceWhereUniqueInput
  }

  /**
   * StudentAttendance deleteMany
   */
  export type StudentAttendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentAttendances to delete
     */
    where?: StudentAttendanceWhereInput
  }

  /**
   * StudentAttendance without action
   */
  export type StudentAttendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentAttendance
     */
    select?: StudentAttendanceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentAttendanceInclude<ExtArgs> | null
  }


  /**
   * Model TeacherCourseAssignment
   */

  export type AggregateTeacherCourseAssignment = {
    _count: TeacherCourseAssignmentCountAggregateOutputType | null
    _min: TeacherCourseAssignmentMinAggregateOutputType | null
    _max: TeacherCourseAssignmentMaxAggregateOutputType | null
  }

  export type TeacherCourseAssignmentMinAggregateOutputType = {
    id: string | null
    teacherId: string | null
    courseId: string | null
    assignedById: string | null
    assignedDate: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type TeacherCourseAssignmentMaxAggregateOutputType = {
    id: string | null
    teacherId: string | null
    courseId: string | null
    assignedById: string | null
    assignedDate: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type TeacherCourseAssignmentCountAggregateOutputType = {
    id: number
    teacherId: number
    courseId: number
    assignedById: number
    assignedDate: number
    isActive: number
    notes: number
    _all: number
  }


  export type TeacherCourseAssignmentMinAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
  }

  export type TeacherCourseAssignmentMaxAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
  }

  export type TeacherCourseAssignmentCountAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
    _all?: true
  }

  export type TeacherCourseAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherCourseAssignment to aggregate.
     */
    where?: TeacherCourseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourseAssignments to fetch.
     */
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherCourseAssignments
    **/
    _count?: true | TeacherCourseAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherCourseAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherCourseAssignmentMaxAggregateInputType
  }

  export type GetTeacherCourseAssignmentAggregateType<T extends TeacherCourseAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherCourseAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherCourseAssignment[P]>
      : GetScalarType<T[P], AggregateTeacherCourseAssignment[P]>
  }




  export type TeacherCourseAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseAssignmentWhereInput
    orderBy?: TeacherCourseAssignmentOrderByWithAggregationInput | TeacherCourseAssignmentOrderByWithAggregationInput[]
    by: TeacherCourseAssignmentScalarFieldEnum[] | TeacherCourseAssignmentScalarFieldEnum
    having?: TeacherCourseAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCourseAssignmentCountAggregateInputType | true
    _min?: TeacherCourseAssignmentMinAggregateInputType
    _max?: TeacherCourseAssignmentMaxAggregateInputType
  }

  export type TeacherCourseAssignmentGroupByOutputType = {
    id: string
    teacherId: string
    courseId: string
    assignedById: string
    assignedDate: Date
    isActive: boolean
    notes: string | null
    _count: TeacherCourseAssignmentCountAggregateOutputType | null
    _min: TeacherCourseAssignmentMinAggregateOutputType | null
    _max: TeacherCourseAssignmentMaxAggregateOutputType | null
  }

  type GetTeacherCourseAssignmentGroupByPayload<T extends TeacherCourseAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherCourseAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherCourseAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherCourseAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherCourseAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type TeacherCourseAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherCourseAssignment"]>

  export type TeacherCourseAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherCourseAssignment"]>

  export type TeacherCourseAssignmentSelectScalar = {
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
  }

  export type TeacherCourseAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeacherCourseAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeacherCourseAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherCourseAssignment"
    objects: {
      teacher: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
      assignedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teacherId: string
      courseId: string
      assignedById: string
      assignedDate: Date
      isActive: boolean
      notes: string | null
    }, ExtArgs["result"]["teacherCourseAssignment"]>
    composites: {}
  }

  type TeacherCourseAssignmentGetPayload<S extends boolean | null | undefined | TeacherCourseAssignmentDefaultArgs> = $Result.GetResult<Prisma.$TeacherCourseAssignmentPayload, S>

  type TeacherCourseAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherCourseAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCourseAssignmentCountAggregateInputType | true
    }

  export interface TeacherCourseAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherCourseAssignment'], meta: { name: 'TeacherCourseAssignment' } }
    /**
     * Find zero or one TeacherCourseAssignment that matches the filter.
     * @param {TeacherCourseAssignmentFindUniqueArgs} args - Arguments to find a TeacherCourseAssignment
     * @example
     * // Get one TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherCourseAssignmentFindUniqueArgs>(args: SelectSubset<T, TeacherCourseAssignmentFindUniqueArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TeacherCourseAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeacherCourseAssignmentFindUniqueOrThrowArgs} args - Arguments to find a TeacherCourseAssignment
     * @example
     * // Get one TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherCourseAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherCourseAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TeacherCourseAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentFindFirstArgs} args - Arguments to find a TeacherCourseAssignment
     * @example
     * // Get one TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherCourseAssignmentFindFirstArgs>(args?: SelectSubset<T, TeacherCourseAssignmentFindFirstArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TeacherCourseAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentFindFirstOrThrowArgs} args - Arguments to find a TeacherCourseAssignment
     * @example
     * // Get one TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherCourseAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherCourseAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TeacherCourseAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherCourseAssignments
     * const teacherCourseAssignments = await prisma.teacherCourseAssignment.findMany()
     * 
     * // Get first 10 TeacherCourseAssignments
     * const teacherCourseAssignments = await prisma.teacherCourseAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherCourseAssignmentWithIdOnly = await prisma.teacherCourseAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherCourseAssignmentFindManyArgs>(args?: SelectSubset<T, TeacherCourseAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TeacherCourseAssignment.
     * @param {TeacherCourseAssignmentCreateArgs} args - Arguments to create a TeacherCourseAssignment.
     * @example
     * // Create one TeacherCourseAssignment
     * const TeacherCourseAssignment = await prisma.teacherCourseAssignment.create({
     *   data: {
     *     // ... data to create a TeacherCourseAssignment
     *   }
     * })
     * 
     */
    create<T extends TeacherCourseAssignmentCreateArgs>(args: SelectSubset<T, TeacherCourseAssignmentCreateArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TeacherCourseAssignments.
     * @param {TeacherCourseAssignmentCreateManyArgs} args - Arguments to create many TeacherCourseAssignments.
     * @example
     * // Create many TeacherCourseAssignments
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCourseAssignmentCreateManyArgs>(args?: SelectSubset<T, TeacherCourseAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherCourseAssignments and returns the data saved in the database.
     * @param {TeacherCourseAssignmentCreateManyAndReturnArgs} args - Arguments to create many TeacherCourseAssignments.
     * @example
     * // Create many TeacherCourseAssignments
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherCourseAssignments and only return the `id`
     * const teacherCourseAssignmentWithIdOnly = await prisma.teacherCourseAssignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCourseAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCourseAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TeacherCourseAssignment.
     * @param {TeacherCourseAssignmentDeleteArgs} args - Arguments to delete one TeacherCourseAssignment.
     * @example
     * // Delete one TeacherCourseAssignment
     * const TeacherCourseAssignment = await prisma.teacherCourseAssignment.delete({
     *   where: {
     *     // ... filter to delete one TeacherCourseAssignment
     *   }
     * })
     * 
     */
    delete<T extends TeacherCourseAssignmentDeleteArgs>(args: SelectSubset<T, TeacherCourseAssignmentDeleteArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TeacherCourseAssignment.
     * @param {TeacherCourseAssignmentUpdateArgs} args - Arguments to update one TeacherCourseAssignment.
     * @example
     * // Update one TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherCourseAssignmentUpdateArgs>(args: SelectSubset<T, TeacherCourseAssignmentUpdateArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TeacherCourseAssignments.
     * @param {TeacherCourseAssignmentDeleteManyArgs} args - Arguments to filter TeacherCourseAssignments to delete.
     * @example
     * // Delete a few TeacherCourseAssignments
     * const { count } = await prisma.teacherCourseAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherCourseAssignmentDeleteManyArgs>(args?: SelectSubset<T, TeacherCourseAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherCourseAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherCourseAssignments
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherCourseAssignmentUpdateManyArgs>(args: SelectSubset<T, TeacherCourseAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TeacherCourseAssignment.
     * @param {TeacherCourseAssignmentUpsertArgs} args - Arguments to update or create a TeacherCourseAssignment.
     * @example
     * // Update or create a TeacherCourseAssignment
     * const teacherCourseAssignment = await prisma.teacherCourseAssignment.upsert({
     *   create: {
     *     // ... data to create a TeacherCourseAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherCourseAssignment we want to update
     *   }
     * })
     */
    upsert<T extends TeacherCourseAssignmentUpsertArgs>(args: SelectSubset<T, TeacherCourseAssignmentUpsertArgs<ExtArgs>>): Prisma__TeacherCourseAssignmentClient<$Result.GetResult<Prisma.$TeacherCourseAssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TeacherCourseAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentCountArgs} args - Arguments to filter TeacherCourseAssignments to count.
     * @example
     * // Count the number of TeacherCourseAssignments
     * const count = await prisma.teacherCourseAssignment.count({
     *   where: {
     *     // ... the filter for the TeacherCourseAssignments we want to count
     *   }
     * })
    **/
    count<T extends TeacherCourseAssignmentCountArgs>(
      args?: Subset<T, TeacherCourseAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCourseAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherCourseAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherCourseAssignmentAggregateArgs>(args: Subset<T, TeacherCourseAssignmentAggregateArgs>): Prisma.PrismaPromise<GetTeacherCourseAssignmentAggregateType<T>>

    /**
     * Group by TeacherCourseAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherCourseAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherCourseAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: TeacherCourseAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherCourseAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherCourseAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherCourseAssignment model
   */
  readonly fields: TeacherCourseAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherCourseAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherCourseAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherCourseAssignment model
   */ 
  interface TeacherCourseAssignmentFieldRefs {
    readonly id: FieldRef<"TeacherCourseAssignment", 'String'>
    readonly teacherId: FieldRef<"TeacherCourseAssignment", 'String'>
    readonly courseId: FieldRef<"TeacherCourseAssignment", 'String'>
    readonly assignedById: FieldRef<"TeacherCourseAssignment", 'String'>
    readonly assignedDate: FieldRef<"TeacherCourseAssignment", 'DateTime'>
    readonly isActive: FieldRef<"TeacherCourseAssignment", 'Boolean'>
    readonly notes: FieldRef<"TeacherCourseAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeacherCourseAssignment findUnique
   */
  export type TeacherCourseAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourseAssignment to fetch.
     */
    where: TeacherCourseAssignmentWhereUniqueInput
  }

  /**
   * TeacherCourseAssignment findUniqueOrThrow
   */
  export type TeacherCourseAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourseAssignment to fetch.
     */
    where: TeacherCourseAssignmentWhereUniqueInput
  }

  /**
   * TeacherCourseAssignment findFirst
   */
  export type TeacherCourseAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourseAssignment to fetch.
     */
    where?: TeacherCourseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourseAssignments to fetch.
     */
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherCourseAssignments.
     */
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherCourseAssignments.
     */
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * TeacherCourseAssignment findFirstOrThrow
   */
  export type TeacherCourseAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourseAssignment to fetch.
     */
    where?: TeacherCourseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourseAssignments to fetch.
     */
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherCourseAssignments.
     */
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourseAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherCourseAssignments.
     */
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * TeacherCourseAssignment findMany
   */
  export type TeacherCourseAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourseAssignments to fetch.
     */
    where?: TeacherCourseAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourseAssignments to fetch.
     */
    orderBy?: TeacherCourseAssignmentOrderByWithRelationInput | TeacherCourseAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherCourseAssignments.
     */
    cursor?: TeacherCourseAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourseAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourseAssignments.
     */
    skip?: number
    distinct?: TeacherCourseAssignmentScalarFieldEnum | TeacherCourseAssignmentScalarFieldEnum[]
  }

  /**
   * TeacherCourseAssignment create
   */
  export type TeacherCourseAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherCourseAssignment.
     */
    data: XOR<TeacherCourseAssignmentCreateInput, TeacherCourseAssignmentUncheckedCreateInput>
  }

  /**
   * TeacherCourseAssignment createMany
   */
  export type TeacherCourseAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherCourseAssignments.
     */
    data: TeacherCourseAssignmentCreateManyInput | TeacherCourseAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherCourseAssignment createManyAndReturn
   */
  export type TeacherCourseAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TeacherCourseAssignments.
     */
    data: TeacherCourseAssignmentCreateManyInput | TeacherCourseAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherCourseAssignment update
   */
  export type TeacherCourseAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherCourseAssignment.
     */
    data: XOR<TeacherCourseAssignmentUpdateInput, TeacherCourseAssignmentUncheckedUpdateInput>
    /**
     * Choose, which TeacherCourseAssignment to update.
     */
    where: TeacherCourseAssignmentWhereUniqueInput
  }

  /**
   * TeacherCourseAssignment updateMany
   */
  export type TeacherCourseAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherCourseAssignments.
     */
    data: XOR<TeacherCourseAssignmentUpdateManyMutationInput, TeacherCourseAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which TeacherCourseAssignments to update
     */
    where?: TeacherCourseAssignmentWhereInput
  }

  /**
   * TeacherCourseAssignment upsert
   */
  export type TeacherCourseAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherCourseAssignment to update in case it exists.
     */
    where: TeacherCourseAssignmentWhereUniqueInput
    /**
     * In case the TeacherCourseAssignment found by the `where` argument doesn't exist, create a new TeacherCourseAssignment with this data.
     */
    create: XOR<TeacherCourseAssignmentCreateInput, TeacherCourseAssignmentUncheckedCreateInput>
    /**
     * In case the TeacherCourseAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherCourseAssignmentUpdateInput, TeacherCourseAssignmentUncheckedUpdateInput>
  }

  /**
   * TeacherCourseAssignment delete
   */
  export type TeacherCourseAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
    /**
     * Filter which TeacherCourseAssignment to delete.
     */
    where: TeacherCourseAssignmentWhereUniqueInput
  }

  /**
   * TeacherCourseAssignment deleteMany
   */
  export type TeacherCourseAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherCourseAssignments to delete
     */
    where?: TeacherCourseAssignmentWhereInput
  }

  /**
   * TeacherCourseAssignment without action
   */
  export type TeacherCourseAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseAssignment
     */
    select?: TeacherCourseAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model AdvisoryAssignment
   */

  export type AggregateAdvisoryAssignment = {
    _count: AdvisoryAssignmentCountAggregateOutputType | null
    _min: AdvisoryAssignmentMinAggregateOutputType | null
    _max: AdvisoryAssignmentMaxAggregateOutputType | null
  }

  export type AdvisoryAssignmentMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    advisoryTeacherId: string | null
    assignedById: string | null
    assignedDate: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type AdvisoryAssignmentMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    advisoryTeacherId: string | null
    assignedById: string | null
    assignedDate: Date | null
    isActive: boolean | null
    notes: string | null
  }

  export type AdvisoryAssignmentCountAggregateOutputType = {
    id: number
    studentId: number
    advisoryTeacherId: number
    assignedById: number
    assignedDate: number
    isActive: number
    notes: number
    _all: number
  }


  export type AdvisoryAssignmentMinAggregateInputType = {
    id?: true
    studentId?: true
    advisoryTeacherId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
  }

  export type AdvisoryAssignmentMaxAggregateInputType = {
    id?: true
    studentId?: true
    advisoryTeacherId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
  }

  export type AdvisoryAssignmentCountAggregateInputType = {
    id?: true
    studentId?: true
    advisoryTeacherId?: true
    assignedById?: true
    assignedDate?: true
    isActive?: true
    notes?: true
    _all?: true
  }

  export type AdvisoryAssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdvisoryAssignment to aggregate.
     */
    where?: AdvisoryAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdvisoryAssignments to fetch.
     */
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdvisoryAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdvisoryAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdvisoryAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdvisoryAssignments
    **/
    _count?: true | AdvisoryAssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdvisoryAssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdvisoryAssignmentMaxAggregateInputType
  }

  export type GetAdvisoryAssignmentAggregateType<T extends AdvisoryAssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAdvisoryAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdvisoryAssignment[P]>
      : GetScalarType<T[P], AggregateAdvisoryAssignment[P]>
  }




  export type AdvisoryAssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisoryAssignmentWhereInput
    orderBy?: AdvisoryAssignmentOrderByWithAggregationInput | AdvisoryAssignmentOrderByWithAggregationInput[]
    by: AdvisoryAssignmentScalarFieldEnum[] | AdvisoryAssignmentScalarFieldEnum
    having?: AdvisoryAssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdvisoryAssignmentCountAggregateInputType | true
    _min?: AdvisoryAssignmentMinAggregateInputType
    _max?: AdvisoryAssignmentMaxAggregateInputType
  }

  export type AdvisoryAssignmentGroupByOutputType = {
    id: string
    studentId: string
    advisoryTeacherId: string
    assignedById: string
    assignedDate: Date
    isActive: boolean
    notes: string | null
    _count: AdvisoryAssignmentCountAggregateOutputType | null
    _min: AdvisoryAssignmentMinAggregateOutputType | null
    _max: AdvisoryAssignmentMaxAggregateOutputType | null
  }

  type GetAdvisoryAssignmentGroupByPayload<T extends AdvisoryAssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdvisoryAssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdvisoryAssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdvisoryAssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AdvisoryAssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AdvisoryAssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    advisoryTeacherId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["advisoryAssignment"]>

  export type AdvisoryAssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    advisoryTeacherId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["advisoryAssignment"]>

  export type AdvisoryAssignmentSelectScalar = {
    id?: boolean
    studentId?: boolean
    advisoryTeacherId?: boolean
    assignedById?: boolean
    assignedDate?: boolean
    isActive?: boolean
    notes?: boolean
  }

  export type AdvisoryAssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AdvisoryAssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    advisoryTeacher?: boolean | UserDefaultArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AdvisoryAssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdvisoryAssignment"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      advisoryTeacher: Prisma.$UserPayload<ExtArgs>
      assignedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      advisoryTeacherId: string
      assignedById: string
      assignedDate: Date
      isActive: boolean
      notes: string | null
    }, ExtArgs["result"]["advisoryAssignment"]>
    composites: {}
  }

  type AdvisoryAssignmentGetPayload<S extends boolean | null | undefined | AdvisoryAssignmentDefaultArgs> = $Result.GetResult<Prisma.$AdvisoryAssignmentPayload, S>

  type AdvisoryAssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdvisoryAssignmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdvisoryAssignmentCountAggregateInputType | true
    }

  export interface AdvisoryAssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdvisoryAssignment'], meta: { name: 'AdvisoryAssignment' } }
    /**
     * Find zero or one AdvisoryAssignment that matches the filter.
     * @param {AdvisoryAssignmentFindUniqueArgs} args - Arguments to find a AdvisoryAssignment
     * @example
     * // Get one AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdvisoryAssignmentFindUniqueArgs>(args: SelectSubset<T, AdvisoryAssignmentFindUniqueArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AdvisoryAssignment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdvisoryAssignmentFindUniqueOrThrowArgs} args - Arguments to find a AdvisoryAssignment
     * @example
     * // Get one AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdvisoryAssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AdvisoryAssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AdvisoryAssignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentFindFirstArgs} args - Arguments to find a AdvisoryAssignment
     * @example
     * // Get one AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdvisoryAssignmentFindFirstArgs>(args?: SelectSubset<T, AdvisoryAssignmentFindFirstArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AdvisoryAssignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentFindFirstOrThrowArgs} args - Arguments to find a AdvisoryAssignment
     * @example
     * // Get one AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdvisoryAssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AdvisoryAssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AdvisoryAssignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdvisoryAssignments
     * const advisoryAssignments = await prisma.advisoryAssignment.findMany()
     * 
     * // Get first 10 AdvisoryAssignments
     * const advisoryAssignments = await prisma.advisoryAssignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const advisoryAssignmentWithIdOnly = await prisma.advisoryAssignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdvisoryAssignmentFindManyArgs>(args?: SelectSubset<T, AdvisoryAssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AdvisoryAssignment.
     * @param {AdvisoryAssignmentCreateArgs} args - Arguments to create a AdvisoryAssignment.
     * @example
     * // Create one AdvisoryAssignment
     * const AdvisoryAssignment = await prisma.advisoryAssignment.create({
     *   data: {
     *     // ... data to create a AdvisoryAssignment
     *   }
     * })
     * 
     */
    create<T extends AdvisoryAssignmentCreateArgs>(args: SelectSubset<T, AdvisoryAssignmentCreateArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AdvisoryAssignments.
     * @param {AdvisoryAssignmentCreateManyArgs} args - Arguments to create many AdvisoryAssignments.
     * @example
     * // Create many AdvisoryAssignments
     * const advisoryAssignment = await prisma.advisoryAssignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdvisoryAssignmentCreateManyArgs>(args?: SelectSubset<T, AdvisoryAssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdvisoryAssignments and returns the data saved in the database.
     * @param {AdvisoryAssignmentCreateManyAndReturnArgs} args - Arguments to create many AdvisoryAssignments.
     * @example
     * // Create many AdvisoryAssignments
     * const advisoryAssignment = await prisma.advisoryAssignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdvisoryAssignments and only return the `id`
     * const advisoryAssignmentWithIdOnly = await prisma.advisoryAssignment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AdvisoryAssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AdvisoryAssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AdvisoryAssignment.
     * @param {AdvisoryAssignmentDeleteArgs} args - Arguments to delete one AdvisoryAssignment.
     * @example
     * // Delete one AdvisoryAssignment
     * const AdvisoryAssignment = await prisma.advisoryAssignment.delete({
     *   where: {
     *     // ... filter to delete one AdvisoryAssignment
     *   }
     * })
     * 
     */
    delete<T extends AdvisoryAssignmentDeleteArgs>(args: SelectSubset<T, AdvisoryAssignmentDeleteArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AdvisoryAssignment.
     * @param {AdvisoryAssignmentUpdateArgs} args - Arguments to update one AdvisoryAssignment.
     * @example
     * // Update one AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdvisoryAssignmentUpdateArgs>(args: SelectSubset<T, AdvisoryAssignmentUpdateArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AdvisoryAssignments.
     * @param {AdvisoryAssignmentDeleteManyArgs} args - Arguments to filter AdvisoryAssignments to delete.
     * @example
     * // Delete a few AdvisoryAssignments
     * const { count } = await prisma.advisoryAssignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdvisoryAssignmentDeleteManyArgs>(args?: SelectSubset<T, AdvisoryAssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdvisoryAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdvisoryAssignments
     * const advisoryAssignment = await prisma.advisoryAssignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdvisoryAssignmentUpdateManyArgs>(args: SelectSubset<T, AdvisoryAssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdvisoryAssignment.
     * @param {AdvisoryAssignmentUpsertArgs} args - Arguments to update or create a AdvisoryAssignment.
     * @example
     * // Update or create a AdvisoryAssignment
     * const advisoryAssignment = await prisma.advisoryAssignment.upsert({
     *   create: {
     *     // ... data to create a AdvisoryAssignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdvisoryAssignment we want to update
     *   }
     * })
     */
    upsert<T extends AdvisoryAssignmentUpsertArgs>(args: SelectSubset<T, AdvisoryAssignmentUpsertArgs<ExtArgs>>): Prisma__AdvisoryAssignmentClient<$Result.GetResult<Prisma.$AdvisoryAssignmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AdvisoryAssignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentCountArgs} args - Arguments to filter AdvisoryAssignments to count.
     * @example
     * // Count the number of AdvisoryAssignments
     * const count = await prisma.advisoryAssignment.count({
     *   where: {
     *     // ... the filter for the AdvisoryAssignments we want to count
     *   }
     * })
    **/
    count<T extends AdvisoryAssignmentCountArgs>(
      args?: Subset<T, AdvisoryAssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdvisoryAssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdvisoryAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdvisoryAssignmentAggregateArgs>(args: Subset<T, AdvisoryAssignmentAggregateArgs>): Prisma.PrismaPromise<GetAdvisoryAssignmentAggregateType<T>>

    /**
     * Group by AdvisoryAssignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisoryAssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdvisoryAssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdvisoryAssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AdvisoryAssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdvisoryAssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdvisoryAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdvisoryAssignment model
   */
  readonly fields: AdvisoryAssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdvisoryAssignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdvisoryAssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    advisoryTeacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AdvisoryAssignment model
   */ 
  interface AdvisoryAssignmentFieldRefs {
    readonly id: FieldRef<"AdvisoryAssignment", 'String'>
    readonly studentId: FieldRef<"AdvisoryAssignment", 'String'>
    readonly advisoryTeacherId: FieldRef<"AdvisoryAssignment", 'String'>
    readonly assignedById: FieldRef<"AdvisoryAssignment", 'String'>
    readonly assignedDate: FieldRef<"AdvisoryAssignment", 'DateTime'>
    readonly isActive: FieldRef<"AdvisoryAssignment", 'Boolean'>
    readonly notes: FieldRef<"AdvisoryAssignment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AdvisoryAssignment findUnique
   */
  export type AdvisoryAssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which AdvisoryAssignment to fetch.
     */
    where: AdvisoryAssignmentWhereUniqueInput
  }

  /**
   * AdvisoryAssignment findUniqueOrThrow
   */
  export type AdvisoryAssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which AdvisoryAssignment to fetch.
     */
    where: AdvisoryAssignmentWhereUniqueInput
  }

  /**
   * AdvisoryAssignment findFirst
   */
  export type AdvisoryAssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which AdvisoryAssignment to fetch.
     */
    where?: AdvisoryAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdvisoryAssignments to fetch.
     */
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdvisoryAssignments.
     */
    cursor?: AdvisoryAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdvisoryAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdvisoryAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdvisoryAssignments.
     */
    distinct?: AdvisoryAssignmentScalarFieldEnum | AdvisoryAssignmentScalarFieldEnum[]
  }

  /**
   * AdvisoryAssignment findFirstOrThrow
   */
  export type AdvisoryAssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which AdvisoryAssignment to fetch.
     */
    where?: AdvisoryAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdvisoryAssignments to fetch.
     */
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdvisoryAssignments.
     */
    cursor?: AdvisoryAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdvisoryAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdvisoryAssignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdvisoryAssignments.
     */
    distinct?: AdvisoryAssignmentScalarFieldEnum | AdvisoryAssignmentScalarFieldEnum[]
  }

  /**
   * AdvisoryAssignment findMany
   */
  export type AdvisoryAssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter, which AdvisoryAssignments to fetch.
     */
    where?: AdvisoryAssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdvisoryAssignments to fetch.
     */
    orderBy?: AdvisoryAssignmentOrderByWithRelationInput | AdvisoryAssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdvisoryAssignments.
     */
    cursor?: AdvisoryAssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdvisoryAssignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdvisoryAssignments.
     */
    skip?: number
    distinct?: AdvisoryAssignmentScalarFieldEnum | AdvisoryAssignmentScalarFieldEnum[]
  }

  /**
   * AdvisoryAssignment create
   */
  export type AdvisoryAssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a AdvisoryAssignment.
     */
    data: XOR<AdvisoryAssignmentCreateInput, AdvisoryAssignmentUncheckedCreateInput>
  }

  /**
   * AdvisoryAssignment createMany
   */
  export type AdvisoryAssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdvisoryAssignments.
     */
    data: AdvisoryAssignmentCreateManyInput | AdvisoryAssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdvisoryAssignment createManyAndReturn
   */
  export type AdvisoryAssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdvisoryAssignments.
     */
    data: AdvisoryAssignmentCreateManyInput | AdvisoryAssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdvisoryAssignment update
   */
  export type AdvisoryAssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a AdvisoryAssignment.
     */
    data: XOR<AdvisoryAssignmentUpdateInput, AdvisoryAssignmentUncheckedUpdateInput>
    /**
     * Choose, which AdvisoryAssignment to update.
     */
    where: AdvisoryAssignmentWhereUniqueInput
  }

  /**
   * AdvisoryAssignment updateMany
   */
  export type AdvisoryAssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdvisoryAssignments.
     */
    data: XOR<AdvisoryAssignmentUpdateManyMutationInput, AdvisoryAssignmentUncheckedUpdateManyInput>
    /**
     * Filter which AdvisoryAssignments to update
     */
    where?: AdvisoryAssignmentWhereInput
  }

  /**
   * AdvisoryAssignment upsert
   */
  export type AdvisoryAssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the AdvisoryAssignment to update in case it exists.
     */
    where: AdvisoryAssignmentWhereUniqueInput
    /**
     * In case the AdvisoryAssignment found by the `where` argument doesn't exist, create a new AdvisoryAssignment with this data.
     */
    create: XOR<AdvisoryAssignmentCreateInput, AdvisoryAssignmentUncheckedCreateInput>
    /**
     * In case the AdvisoryAssignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdvisoryAssignmentUpdateInput, AdvisoryAssignmentUncheckedUpdateInput>
  }

  /**
   * AdvisoryAssignment delete
   */
  export type AdvisoryAssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
    /**
     * Filter which AdvisoryAssignment to delete.
     */
    where: AdvisoryAssignmentWhereUniqueInput
  }

  /**
   * AdvisoryAssignment deleteMany
   */
  export type AdvisoryAssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdvisoryAssignments to delete
     */
    where?: AdvisoryAssignmentWhereInput
  }

  /**
   * AdvisoryAssignment without action
   */
  export type AdvisoryAssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdvisoryAssignment
     */
    select?: AdvisoryAssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisoryAssignmentInclude<ExtArgs> | null
  }


  /**
   * Model FileAttachment
   */

  export type AggregateFileAttachment = {
    _count: FileAttachmentCountAggregateOutputType | null
    _avg: FileAttachmentAvgAggregateOutputType | null
    _sum: FileAttachmentSumAggregateOutputType | null
    _min: FileAttachmentMinAggregateOutputType | null
    _max: FileAttachmentMaxAggregateOutputType | null
  }

  export type FileAttachmentAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type FileAttachmentSumAggregateOutputType = {
    fileSize: bigint | null
  }

  export type FileAttachmentMinAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    fileSize: bigint | null
    path: string | null
    uploadedById: string | null
    createdAt: Date | null
  }

  export type FileAttachmentMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    originalName: string | null
    mimeType: string | null
    fileSize: bigint | null
    path: string | null
    uploadedById: string | null
    createdAt: Date | null
  }

  export type FileAttachmentCountAggregateOutputType = {
    id: number
    filename: number
    originalName: number
    mimeType: number
    fileSize: number
    path: number
    uploadedById: number
    createdAt: number
    _all: number
  }


  export type FileAttachmentAvgAggregateInputType = {
    fileSize?: true
  }

  export type FileAttachmentSumAggregateInputType = {
    fileSize?: true
  }

  export type FileAttachmentMinAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    fileSize?: true
    path?: true
    uploadedById?: true
    createdAt?: true
  }

  export type FileAttachmentMaxAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    fileSize?: true
    path?: true
    uploadedById?: true
    createdAt?: true
  }

  export type FileAttachmentCountAggregateInputType = {
    id?: true
    filename?: true
    originalName?: true
    mimeType?: true
    fileSize?: true
    path?: true
    uploadedById?: true
    createdAt?: true
    _all?: true
  }

  export type FileAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileAttachment to aggregate.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileAttachments
    **/
    _count?: true | FileAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileAttachmentMaxAggregateInputType
  }

  export type GetFileAttachmentAggregateType<T extends FileAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateFileAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileAttachment[P]>
      : GetScalarType<T[P], AggregateFileAttachment[P]>
  }




  export type FileAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithAggregationInput | FileAttachmentOrderByWithAggregationInput[]
    by: FileAttachmentScalarFieldEnum[] | FileAttachmentScalarFieldEnum
    having?: FileAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileAttachmentCountAggregateInputType | true
    _avg?: FileAttachmentAvgAggregateInputType
    _sum?: FileAttachmentSumAggregateInputType
    _min?: FileAttachmentMinAggregateInputType
    _max?: FileAttachmentMaxAggregateInputType
  }

  export type FileAttachmentGroupByOutputType = {
    id: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint
    path: string
    uploadedById: string
    createdAt: Date
    _count: FileAttachmentCountAggregateOutputType | null
    _avg: FileAttachmentAvgAggregateOutputType | null
    _sum: FileAttachmentSumAggregateOutputType | null
    _min: FileAttachmentMinAggregateOutputType | null
    _max: FileAttachmentMaxAggregateOutputType | null
  }

  type GetFileAttachmentGroupByPayload<T extends FileAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], FileAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type FileAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    fileSize?: boolean
    path?: boolean
    uploadedById?: boolean
    createdAt?: boolean
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    courseMaterials?: boolean | FileAttachment$courseMaterialsArgs<ExtArgs>
    assignmentAttachments?: boolean | FileAttachment$assignmentAttachmentsArgs<ExtArgs>
    submissionFiles?: boolean | FileAttachment$submissionFilesArgs<ExtArgs>
    _count?: boolean | FileAttachmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileAttachment"]>

  export type FileAttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    fileSize?: boolean
    path?: boolean
    uploadedById?: boolean
    createdAt?: boolean
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileAttachment"]>

  export type FileAttachmentSelectScalar = {
    id?: boolean
    filename?: boolean
    originalName?: boolean
    mimeType?: boolean
    fileSize?: boolean
    path?: boolean
    uploadedById?: boolean
    createdAt?: boolean
  }

  export type FileAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
    courseMaterials?: boolean | FileAttachment$courseMaterialsArgs<ExtArgs>
    assignmentAttachments?: boolean | FileAttachment$assignmentAttachmentsArgs<ExtArgs>
    submissionFiles?: boolean | FileAttachment$submissionFilesArgs<ExtArgs>
    _count?: boolean | FileAttachmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FileAttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploadedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FileAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileAttachment"
    objects: {
      uploadedBy: Prisma.$UserPayload<ExtArgs>
      courseMaterials: Prisma.$CourseMaterialPayload<ExtArgs>[]
      assignmentAttachments: Prisma.$AssignmentPayload<ExtArgs>[]
      submissionFiles: Prisma.$AssignmentSubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      originalName: string
      mimeType: string
      fileSize: bigint
      path: string
      uploadedById: string
      createdAt: Date
    }, ExtArgs["result"]["fileAttachment"]>
    composites: {}
  }

  type FileAttachmentGetPayload<S extends boolean | null | undefined | FileAttachmentDefaultArgs> = $Result.GetResult<Prisma.$FileAttachmentPayload, S>

  type FileAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileAttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileAttachmentCountAggregateInputType | true
    }

  export interface FileAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileAttachment'], meta: { name: 'FileAttachment' } }
    /**
     * Find zero or one FileAttachment that matches the filter.
     * @param {FileAttachmentFindUniqueArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileAttachmentFindUniqueArgs>(args: SelectSubset<T, FileAttachmentFindUniqueArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FileAttachment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FileAttachmentFindUniqueOrThrowArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileAttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, FileAttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FileAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindFirstArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileAttachmentFindFirstArgs>(args?: SelectSubset<T, FileAttachmentFindFirstArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FileAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindFirstOrThrowArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileAttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, FileAttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FileAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileAttachments
     * const fileAttachments = await prisma.fileAttachment.findMany()
     * 
     * // Get first 10 FileAttachments
     * const fileAttachments = await prisma.fileAttachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileAttachmentWithIdOnly = await prisma.fileAttachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileAttachmentFindManyArgs>(args?: SelectSubset<T, FileAttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FileAttachment.
     * @param {FileAttachmentCreateArgs} args - Arguments to create a FileAttachment.
     * @example
     * // Create one FileAttachment
     * const FileAttachment = await prisma.fileAttachment.create({
     *   data: {
     *     // ... data to create a FileAttachment
     *   }
     * })
     * 
     */
    create<T extends FileAttachmentCreateArgs>(args: SelectSubset<T, FileAttachmentCreateArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FileAttachments.
     * @param {FileAttachmentCreateManyArgs} args - Arguments to create many FileAttachments.
     * @example
     * // Create many FileAttachments
     * const fileAttachment = await prisma.fileAttachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileAttachmentCreateManyArgs>(args?: SelectSubset<T, FileAttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FileAttachments and returns the data saved in the database.
     * @param {FileAttachmentCreateManyAndReturnArgs} args - Arguments to create many FileAttachments.
     * @example
     * // Create many FileAttachments
     * const fileAttachment = await prisma.fileAttachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FileAttachments and only return the `id`
     * const fileAttachmentWithIdOnly = await prisma.fileAttachment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileAttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, FileAttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FileAttachment.
     * @param {FileAttachmentDeleteArgs} args - Arguments to delete one FileAttachment.
     * @example
     * // Delete one FileAttachment
     * const FileAttachment = await prisma.fileAttachment.delete({
     *   where: {
     *     // ... filter to delete one FileAttachment
     *   }
     * })
     * 
     */
    delete<T extends FileAttachmentDeleteArgs>(args: SelectSubset<T, FileAttachmentDeleteArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FileAttachment.
     * @param {FileAttachmentUpdateArgs} args - Arguments to update one FileAttachment.
     * @example
     * // Update one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileAttachmentUpdateArgs>(args: SelectSubset<T, FileAttachmentUpdateArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FileAttachments.
     * @param {FileAttachmentDeleteManyArgs} args - Arguments to filter FileAttachments to delete.
     * @example
     * // Delete a few FileAttachments
     * const { count } = await prisma.fileAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileAttachmentDeleteManyArgs>(args?: SelectSubset<T, FileAttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileAttachments
     * const fileAttachment = await prisma.fileAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileAttachmentUpdateManyArgs>(args: SelectSubset<T, FileAttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FileAttachment.
     * @param {FileAttachmentUpsertArgs} args - Arguments to update or create a FileAttachment.
     * @example
     * // Update or create a FileAttachment
     * const fileAttachment = await prisma.fileAttachment.upsert({
     *   create: {
     *     // ... data to create a FileAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileAttachment we want to update
     *   }
     * })
     */
    upsert<T extends FileAttachmentUpsertArgs>(args: SelectSubset<T, FileAttachmentUpsertArgs<ExtArgs>>): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FileAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentCountArgs} args - Arguments to filter FileAttachments to count.
     * @example
     * // Count the number of FileAttachments
     * const count = await prisma.fileAttachment.count({
     *   where: {
     *     // ... the filter for the FileAttachments we want to count
     *   }
     * })
    **/
    count<T extends FileAttachmentCountArgs>(
      args?: Subset<T, FileAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAttachmentAggregateArgs>(args: Subset<T, FileAttachmentAggregateArgs>): Prisma.PrismaPromise<GetFileAttachmentAggregateType<T>>

    /**
     * Group by FileAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: FileAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileAttachment model
   */
  readonly fields: FileAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploadedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    courseMaterials<T extends FileAttachment$courseMaterialsArgs<ExtArgs> = {}>(args?: Subset<T, FileAttachment$courseMaterialsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseMaterialPayload<ExtArgs>, T, "findMany"> | Null>
    assignmentAttachments<T extends FileAttachment$assignmentAttachmentsArgs<ExtArgs> = {}>(args?: Subset<T, FileAttachment$assignmentAttachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany"> | Null>
    submissionFiles<T extends FileAttachment$submissionFilesArgs<ExtArgs> = {}>(args?: Subset<T, FileAttachment$submissionFilesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentSubmissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FileAttachment model
   */ 
  interface FileAttachmentFieldRefs {
    readonly id: FieldRef<"FileAttachment", 'String'>
    readonly filename: FieldRef<"FileAttachment", 'String'>
    readonly originalName: FieldRef<"FileAttachment", 'String'>
    readonly mimeType: FieldRef<"FileAttachment", 'String'>
    readonly fileSize: FieldRef<"FileAttachment", 'BigInt'>
    readonly path: FieldRef<"FileAttachment", 'String'>
    readonly uploadedById: FieldRef<"FileAttachment", 'String'>
    readonly createdAt: FieldRef<"FileAttachment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FileAttachment findUnique
   */
  export type FileAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where: FileAttachmentWhereUniqueInput
  }

  /**
   * FileAttachment findUniqueOrThrow
   */
  export type FileAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where: FileAttachmentWhereUniqueInput
  }

  /**
   * FileAttachment findFirst
   */
  export type FileAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileAttachments.
     */
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * FileAttachment findFirstOrThrow
   */
  export type FileAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileAttachments.
     */
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * FileAttachment findMany
   */
  export type FileAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachments to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }

  /**
   * FileAttachment create
   */
  export type FileAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a FileAttachment.
     */
    data: XOR<FileAttachmentCreateInput, FileAttachmentUncheckedCreateInput>
  }

  /**
   * FileAttachment createMany
   */
  export type FileAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileAttachments.
     */
    data: FileAttachmentCreateManyInput | FileAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FileAttachment createManyAndReturn
   */
  export type FileAttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FileAttachments.
     */
    data: FileAttachmentCreateManyInput | FileAttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FileAttachment update
   */
  export type FileAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a FileAttachment.
     */
    data: XOR<FileAttachmentUpdateInput, FileAttachmentUncheckedUpdateInput>
    /**
     * Choose, which FileAttachment to update.
     */
    where: FileAttachmentWhereUniqueInput
  }

  /**
   * FileAttachment updateMany
   */
  export type FileAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileAttachments.
     */
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which FileAttachments to update
     */
    where?: FileAttachmentWhereInput
  }

  /**
   * FileAttachment upsert
   */
  export type FileAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the FileAttachment to update in case it exists.
     */
    where: FileAttachmentWhereUniqueInput
    /**
     * In case the FileAttachment found by the `where` argument doesn't exist, create a new FileAttachment with this data.
     */
    create: XOR<FileAttachmentCreateInput, FileAttachmentUncheckedCreateInput>
    /**
     * In case the FileAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileAttachmentUpdateInput, FileAttachmentUncheckedUpdateInput>
  }

  /**
   * FileAttachment delete
   */
  export type FileAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter which FileAttachment to delete.
     */
    where: FileAttachmentWhereUniqueInput
  }

  /**
   * FileAttachment deleteMany
   */
  export type FileAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileAttachments to delete
     */
    where?: FileAttachmentWhereInput
  }

  /**
   * FileAttachment.courseMaterials
   */
  export type FileAttachment$courseMaterialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseMaterial
     */
    select?: CourseMaterialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseMaterialInclude<ExtArgs> | null
    where?: CourseMaterialWhereInput
    orderBy?: CourseMaterialOrderByWithRelationInput | CourseMaterialOrderByWithRelationInput[]
    cursor?: CourseMaterialWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseMaterialScalarFieldEnum | CourseMaterialScalarFieldEnum[]
  }

  /**
   * FileAttachment.assignmentAttachments
   */
  export type FileAttachment$assignmentAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * FileAttachment.submissionFiles
   */
  export type FileAttachment$submissionFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentSubmission
     */
    select?: AssignmentSubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentSubmissionInclude<ExtArgs> | null
    where?: AssignmentSubmissionWhereInput
    orderBy?: AssignmentSubmissionOrderByWithRelationInput | AssignmentSubmissionOrderByWithRelationInput[]
    cursor?: AssignmentSubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentSubmissionScalarFieldEnum | AssignmentSubmissionScalarFieldEnum[]
  }

  /**
   * FileAttachment without action
   */
  export type FileAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileAttachmentInclude<ExtArgs> | null
  }


  /**
   * Model PageConfiguration
   */

  export type AggregatePageConfiguration = {
    _count: PageConfigurationCountAggregateOutputType | null
    _min: PageConfigurationMinAggregateOutputType | null
    _max: PageConfigurationMaxAggregateOutputType | null
  }

  export type PageConfigurationMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    userType: $Enums.UserRole | null
    layoutType: string | null
    layoutClass: string | null
    requiresAuth: boolean | null
    requiresSupervisor: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageConfigurationMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    userType: $Enums.UserRole | null
    layoutType: string | null
    layoutClass: string | null
    requiresAuth: boolean | null
    requiresSupervisor: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PageConfigurationCountAggregateOutputType = {
    id: number
    title: number
    description: number
    userType: number
    layoutType: number
    layoutClass: number
    sections: number
    requiresAuth: number
    permissions: number
    requiresSupervisor: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PageConfigurationMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    userType?: true
    layoutType?: true
    layoutClass?: true
    requiresAuth?: true
    requiresSupervisor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageConfigurationMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    userType?: true
    layoutType?: true
    layoutClass?: true
    requiresAuth?: true
    requiresSupervisor?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PageConfigurationCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    userType?: true
    layoutType?: true
    layoutClass?: true
    sections?: true
    requiresAuth?: true
    permissions?: true
    requiresSupervisor?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PageConfigurationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageConfiguration to aggregate.
     */
    where?: PageConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageConfigurations to fetch.
     */
    orderBy?: PageConfigurationOrderByWithRelationInput | PageConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PageConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PageConfigurations
    **/
    _count?: true | PageConfigurationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PageConfigurationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PageConfigurationMaxAggregateInputType
  }

  export type GetPageConfigurationAggregateType<T extends PageConfigurationAggregateArgs> = {
        [P in keyof T & keyof AggregatePageConfiguration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePageConfiguration[P]>
      : GetScalarType<T[P], AggregatePageConfiguration[P]>
  }




  export type PageConfigurationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PageConfigurationWhereInput
    orderBy?: PageConfigurationOrderByWithAggregationInput | PageConfigurationOrderByWithAggregationInput[]
    by: PageConfigurationScalarFieldEnum[] | PageConfigurationScalarFieldEnum
    having?: PageConfigurationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PageConfigurationCountAggregateInputType | true
    _min?: PageConfigurationMinAggregateInputType
    _max?: PageConfigurationMaxAggregateInputType
  }

  export type PageConfigurationGroupByOutputType = {
    id: string
    title: string
    description: string | null
    userType: $Enums.UserRole | null
    layoutType: string
    layoutClass: string | null
    sections: JsonValue
    requiresAuth: boolean
    permissions: string[]
    requiresSupervisor: boolean
    createdAt: Date
    updatedAt: Date
    _count: PageConfigurationCountAggregateOutputType | null
    _min: PageConfigurationMinAggregateOutputType | null
    _max: PageConfigurationMaxAggregateOutputType | null
  }

  type GetPageConfigurationGroupByPayload<T extends PageConfigurationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PageConfigurationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PageConfigurationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PageConfigurationGroupByOutputType[P]>
            : GetScalarType<T[P], PageConfigurationGroupByOutputType[P]>
        }
      >
    >


  export type PageConfigurationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    userType?: boolean
    layoutType?: boolean
    layoutClass?: boolean
    sections?: boolean
    requiresAuth?: boolean
    permissions?: boolean
    requiresSupervisor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pageConfiguration"]>

  export type PageConfigurationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    userType?: boolean
    layoutType?: boolean
    layoutClass?: boolean
    sections?: boolean
    requiresAuth?: boolean
    permissions?: boolean
    requiresSupervisor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pageConfiguration"]>

  export type PageConfigurationSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    userType?: boolean
    layoutType?: boolean
    layoutClass?: boolean
    sections?: boolean
    requiresAuth?: boolean
    permissions?: boolean
    requiresSupervisor?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PageConfigurationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PageConfiguration"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      userType: $Enums.UserRole | null
      layoutType: string
      layoutClass: string | null
      sections: Prisma.JsonValue
      requiresAuth: boolean
      permissions: string[]
      requiresSupervisor: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pageConfiguration"]>
    composites: {}
  }

  type PageConfigurationGetPayload<S extends boolean | null | undefined | PageConfigurationDefaultArgs> = $Result.GetResult<Prisma.$PageConfigurationPayload, S>

  type PageConfigurationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PageConfigurationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PageConfigurationCountAggregateInputType | true
    }

  export interface PageConfigurationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PageConfiguration'], meta: { name: 'PageConfiguration' } }
    /**
     * Find zero or one PageConfiguration that matches the filter.
     * @param {PageConfigurationFindUniqueArgs} args - Arguments to find a PageConfiguration
     * @example
     * // Get one PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PageConfigurationFindUniqueArgs>(args: SelectSubset<T, PageConfigurationFindUniqueArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PageConfiguration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PageConfigurationFindUniqueOrThrowArgs} args - Arguments to find a PageConfiguration
     * @example
     * // Get one PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PageConfigurationFindUniqueOrThrowArgs>(args: SelectSubset<T, PageConfigurationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PageConfiguration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationFindFirstArgs} args - Arguments to find a PageConfiguration
     * @example
     * // Get one PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PageConfigurationFindFirstArgs>(args?: SelectSubset<T, PageConfigurationFindFirstArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PageConfiguration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationFindFirstOrThrowArgs} args - Arguments to find a PageConfiguration
     * @example
     * // Get one PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PageConfigurationFindFirstOrThrowArgs>(args?: SelectSubset<T, PageConfigurationFindFirstOrThrowArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PageConfigurations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PageConfigurations
     * const pageConfigurations = await prisma.pageConfiguration.findMany()
     * 
     * // Get first 10 PageConfigurations
     * const pageConfigurations = await prisma.pageConfiguration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pageConfigurationWithIdOnly = await prisma.pageConfiguration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PageConfigurationFindManyArgs>(args?: SelectSubset<T, PageConfigurationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PageConfiguration.
     * @param {PageConfigurationCreateArgs} args - Arguments to create a PageConfiguration.
     * @example
     * // Create one PageConfiguration
     * const PageConfiguration = await prisma.pageConfiguration.create({
     *   data: {
     *     // ... data to create a PageConfiguration
     *   }
     * })
     * 
     */
    create<T extends PageConfigurationCreateArgs>(args: SelectSubset<T, PageConfigurationCreateArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PageConfigurations.
     * @param {PageConfigurationCreateManyArgs} args - Arguments to create many PageConfigurations.
     * @example
     * // Create many PageConfigurations
     * const pageConfiguration = await prisma.pageConfiguration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PageConfigurationCreateManyArgs>(args?: SelectSubset<T, PageConfigurationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PageConfigurations and returns the data saved in the database.
     * @param {PageConfigurationCreateManyAndReturnArgs} args - Arguments to create many PageConfigurations.
     * @example
     * // Create many PageConfigurations
     * const pageConfiguration = await prisma.pageConfiguration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PageConfigurations and only return the `id`
     * const pageConfigurationWithIdOnly = await prisma.pageConfiguration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PageConfigurationCreateManyAndReturnArgs>(args?: SelectSubset<T, PageConfigurationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PageConfiguration.
     * @param {PageConfigurationDeleteArgs} args - Arguments to delete one PageConfiguration.
     * @example
     * // Delete one PageConfiguration
     * const PageConfiguration = await prisma.pageConfiguration.delete({
     *   where: {
     *     // ... filter to delete one PageConfiguration
     *   }
     * })
     * 
     */
    delete<T extends PageConfigurationDeleteArgs>(args: SelectSubset<T, PageConfigurationDeleteArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PageConfiguration.
     * @param {PageConfigurationUpdateArgs} args - Arguments to update one PageConfiguration.
     * @example
     * // Update one PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PageConfigurationUpdateArgs>(args: SelectSubset<T, PageConfigurationUpdateArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PageConfigurations.
     * @param {PageConfigurationDeleteManyArgs} args - Arguments to filter PageConfigurations to delete.
     * @example
     * // Delete a few PageConfigurations
     * const { count } = await prisma.pageConfiguration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PageConfigurationDeleteManyArgs>(args?: SelectSubset<T, PageConfigurationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PageConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PageConfigurations
     * const pageConfiguration = await prisma.pageConfiguration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PageConfigurationUpdateManyArgs>(args: SelectSubset<T, PageConfigurationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PageConfiguration.
     * @param {PageConfigurationUpsertArgs} args - Arguments to update or create a PageConfiguration.
     * @example
     * // Update or create a PageConfiguration
     * const pageConfiguration = await prisma.pageConfiguration.upsert({
     *   create: {
     *     // ... data to create a PageConfiguration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PageConfiguration we want to update
     *   }
     * })
     */
    upsert<T extends PageConfigurationUpsertArgs>(args: SelectSubset<T, PageConfigurationUpsertArgs<ExtArgs>>): Prisma__PageConfigurationClient<$Result.GetResult<Prisma.$PageConfigurationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PageConfigurations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationCountArgs} args - Arguments to filter PageConfigurations to count.
     * @example
     * // Count the number of PageConfigurations
     * const count = await prisma.pageConfiguration.count({
     *   where: {
     *     // ... the filter for the PageConfigurations we want to count
     *   }
     * })
    **/
    count<T extends PageConfigurationCountArgs>(
      args?: Subset<T, PageConfigurationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PageConfigurationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PageConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PageConfigurationAggregateArgs>(args: Subset<T, PageConfigurationAggregateArgs>): Prisma.PrismaPromise<GetPageConfigurationAggregateType<T>>

    /**
     * Group by PageConfiguration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PageConfigurationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PageConfigurationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PageConfigurationGroupByArgs['orderBy'] }
        : { orderBy?: PageConfigurationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PageConfigurationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPageConfigurationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PageConfiguration model
   */
  readonly fields: PageConfigurationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PageConfiguration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PageConfigurationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PageConfiguration model
   */ 
  interface PageConfigurationFieldRefs {
    readonly id: FieldRef<"PageConfiguration", 'String'>
    readonly title: FieldRef<"PageConfiguration", 'String'>
    readonly description: FieldRef<"PageConfiguration", 'String'>
    readonly userType: FieldRef<"PageConfiguration", 'UserRole'>
    readonly layoutType: FieldRef<"PageConfiguration", 'String'>
    readonly layoutClass: FieldRef<"PageConfiguration", 'String'>
    readonly sections: FieldRef<"PageConfiguration", 'Json'>
    readonly requiresAuth: FieldRef<"PageConfiguration", 'Boolean'>
    readonly permissions: FieldRef<"PageConfiguration", 'String[]'>
    readonly requiresSupervisor: FieldRef<"PageConfiguration", 'Boolean'>
    readonly createdAt: FieldRef<"PageConfiguration", 'DateTime'>
    readonly updatedAt: FieldRef<"PageConfiguration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PageConfiguration findUnique
   */
  export type PageConfigurationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PageConfiguration to fetch.
     */
    where: PageConfigurationWhereUniqueInput
  }

  /**
   * PageConfiguration findUniqueOrThrow
   */
  export type PageConfigurationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PageConfiguration to fetch.
     */
    where: PageConfigurationWhereUniqueInput
  }

  /**
   * PageConfiguration findFirst
   */
  export type PageConfigurationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PageConfiguration to fetch.
     */
    where?: PageConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageConfigurations to fetch.
     */
    orderBy?: PageConfigurationOrderByWithRelationInput | PageConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageConfigurations.
     */
    cursor?: PageConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageConfigurations.
     */
    distinct?: PageConfigurationScalarFieldEnum | PageConfigurationScalarFieldEnum[]
  }

  /**
   * PageConfiguration findFirstOrThrow
   */
  export type PageConfigurationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PageConfiguration to fetch.
     */
    where?: PageConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageConfigurations to fetch.
     */
    orderBy?: PageConfigurationOrderByWithRelationInput | PageConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PageConfigurations.
     */
    cursor?: PageConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageConfigurations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PageConfigurations.
     */
    distinct?: PageConfigurationScalarFieldEnum | PageConfigurationScalarFieldEnum[]
  }

  /**
   * PageConfiguration findMany
   */
  export type PageConfigurationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter, which PageConfigurations to fetch.
     */
    where?: PageConfigurationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PageConfigurations to fetch.
     */
    orderBy?: PageConfigurationOrderByWithRelationInput | PageConfigurationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PageConfigurations.
     */
    cursor?: PageConfigurationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PageConfigurations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PageConfigurations.
     */
    skip?: number
    distinct?: PageConfigurationScalarFieldEnum | PageConfigurationScalarFieldEnum[]
  }

  /**
   * PageConfiguration create
   */
  export type PageConfigurationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to create a PageConfiguration.
     */
    data: XOR<PageConfigurationCreateInput, PageConfigurationUncheckedCreateInput>
  }

  /**
   * PageConfiguration createMany
   */
  export type PageConfigurationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PageConfigurations.
     */
    data: PageConfigurationCreateManyInput | PageConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PageConfiguration createManyAndReturn
   */
  export type PageConfigurationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PageConfigurations.
     */
    data: PageConfigurationCreateManyInput | PageConfigurationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PageConfiguration update
   */
  export type PageConfigurationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * The data needed to update a PageConfiguration.
     */
    data: XOR<PageConfigurationUpdateInput, PageConfigurationUncheckedUpdateInput>
    /**
     * Choose, which PageConfiguration to update.
     */
    where: PageConfigurationWhereUniqueInput
  }

  /**
   * PageConfiguration updateMany
   */
  export type PageConfigurationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PageConfigurations.
     */
    data: XOR<PageConfigurationUpdateManyMutationInput, PageConfigurationUncheckedUpdateManyInput>
    /**
     * Filter which PageConfigurations to update
     */
    where?: PageConfigurationWhereInput
  }

  /**
   * PageConfiguration upsert
   */
  export type PageConfigurationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * The filter to search for the PageConfiguration to update in case it exists.
     */
    where: PageConfigurationWhereUniqueInput
    /**
     * In case the PageConfiguration found by the `where` argument doesn't exist, create a new PageConfiguration with this data.
     */
    create: XOR<PageConfigurationCreateInput, PageConfigurationUncheckedCreateInput>
    /**
     * In case the PageConfiguration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PageConfigurationUpdateInput, PageConfigurationUncheckedUpdateInput>
  }

  /**
   * PageConfiguration delete
   */
  export type PageConfigurationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
    /**
     * Filter which PageConfiguration to delete.
     */
    where: PageConfigurationWhereUniqueInput
  }

  /**
   * PageConfiguration deleteMany
   */
  export type PageConfigurationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PageConfigurations to delete
     */
    where?: PageConfigurationWhereInput
  }

  /**
   * PageConfiguration without action
   */
  export type PageConfigurationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PageConfiguration
     */
    select?: PageConfigurationSelect<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    priority: $Enums.NotificationPriority | null
    isRead: boolean | null
    readAt: Date | null
    courseId: string | null
    assignmentId: string | null
    gradeId: string | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    title: string | null
    message: string | null
    type: $Enums.NotificationType | null
    priority: $Enums.NotificationPriority | null
    isRead: boolean | null
    readAt: Date | null
    courseId: string | null
    assignmentId: string | null
    gradeId: string | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    type: number
    priority: number
    isRead: number
    readAt: number
    courseId: number
    assignmentId: number
    gradeId: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    priority?: true
    isRead?: true
    readAt?: true
    courseId?: true
    assignmentId?: true
    gradeId?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    priority?: true
    isRead?: true
    readAt?: true
    courseId?: true
    assignmentId?: true
    gradeId?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    type?: true
    priority?: true
    isRead?: true
    readAt?: true
    courseId?: true
    assignmentId?: true
    gradeId?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority: $Enums.NotificationPriority
    isRead: boolean
    readAt: Date | null
    courseId: string | null
    assignmentId: string | null
    gradeId: string | null
    metadata: JsonValue | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    courseId?: boolean
    assignmentId?: boolean
    gradeId?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    courseId?: boolean
    assignmentId?: boolean
    gradeId?: boolean
    metadata?: boolean
    createdAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    type?: boolean
    priority?: boolean
    isRead?: boolean
    readAt?: boolean
    courseId?: boolean
    assignmentId?: boolean
    gradeId?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      title: string
      message: string
      type: $Enums.NotificationType
      priority: $Enums.NotificationPriority
      isRead: boolean
      readAt: Date | null
      courseId: string | null
      assignmentId: string | null
      gradeId: string | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly priority: FieldRef<"Notification", 'NotificationPriority'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly courseId: FieldRef<"Notification", 'String'>
    readonly assignmentId: FieldRef<"Notification", 'String'>
    readonly gradeId: FieldRef<"Notification", 'String'>
    readonly metadata: FieldRef<"Notification", 'Json'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model SystemSetting
   */

  export type AggregateSystemSetting = {
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  export type SystemSettingMinAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingMaxAggregateOutputType = {
    id: string | null
    key: string | null
    value: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemSettingCountAggregateOutputType = {
    id: number
    key: number
    value: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemSettingMinAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingMaxAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemSettingCountAggregateInputType = {
    id?: true
    key?: true
    value?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSetting to aggregate.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingMaxAggregateInputType
  }

  export type GetSystemSettingAggregateType<T extends SystemSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSetting[P]>
      : GetScalarType<T[P], AggregateSystemSetting[P]>
  }




  export type SystemSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingWhereInput
    orderBy?: SystemSettingOrderByWithAggregationInput | SystemSettingOrderByWithAggregationInput[]
    by: SystemSettingScalarFieldEnum[] | SystemSettingScalarFieldEnum
    having?: SystemSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingCountAggregateInputType | true
    _min?: SystemSettingMinAggregateInputType
    _max?: SystemSettingMaxAggregateInputType
  }

  export type SystemSettingGroupByOutputType = {
    id: string
    key: string
    value: string
    type: string
    createdAt: Date
    updatedAt: Date
    _count: SystemSettingCountAggregateOutputType | null
    _min: SystemSettingMinAggregateOutputType | null
    _max: SystemSettingMaxAggregateOutputType | null
  }

  type GetSystemSettingGroupByPayload<T extends SystemSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemSetting"]>

  export type SystemSettingSelectScalar = {
    id?: boolean
    key?: boolean
    value?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SystemSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSetting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      key: string
      value: string
      type: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemSetting"]>
    composites: {}
  }

  type SystemSettingGetPayload<S extends boolean | null | undefined | SystemSettingDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingPayload, S>

  type SystemSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemSettingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemSettingCountAggregateInputType | true
    }

  export interface SystemSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSetting'], meta: { name: 'SystemSetting' } }
    /**
     * Find zero or one SystemSetting that matches the filter.
     * @param {SystemSettingFindUniqueArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingFindUniqueArgs>(args: SelectSubset<T, SystemSettingFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemSetting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemSettingFindUniqueOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingFindFirstArgs>(args?: SelectSubset<T, SystemSettingFindFirstArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindFirstOrThrowArgs} args - Arguments to find a SystemSetting
     * @example
     * // Get one SystemSetting
     * const systemSetting = await prisma.systemSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingFindManyArgs>(args?: SelectSubset<T, SystemSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemSetting.
     * @param {SystemSettingCreateArgs} args - Arguments to create a SystemSetting.
     * @example
     * // Create one SystemSetting
     * const SystemSetting = await prisma.systemSetting.create({
     *   data: {
     *     // ... data to create a SystemSetting
     *   }
     * })
     * 
     */
    create<T extends SystemSettingCreateArgs>(args: SelectSubset<T, SystemSettingCreateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingCreateManyArgs>(args?: SelectSubset<T, SystemSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSetting = await prisma.systemSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingWithIdOnly = await prisma.systemSetting.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemSetting.
     * @param {SystemSettingDeleteArgs} args - Arguments to delete one SystemSetting.
     * @example
     * // Delete one SystemSetting
     * const SystemSetting = await prisma.systemSetting.delete({
     *   where: {
     *     // ... filter to delete one SystemSetting
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingDeleteArgs>(args: SelectSubset<T, SystemSettingDeleteArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemSetting.
     * @param {SystemSettingUpdateArgs} args - Arguments to update one SystemSetting.
     * @example
     * // Update one SystemSetting
     * const systemSetting = await prisma.systemSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingUpdateArgs>(args: SelectSubset<T, SystemSettingUpdateArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingDeleteManyArgs>(args?: SelectSubset<T, SystemSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSetting = await prisma.systemSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingUpdateManyArgs>(args: SelectSubset<T, SystemSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemSetting.
     * @param {SystemSettingUpsertArgs} args - Arguments to update or create a SystemSetting.
     * @example
     * // Update or create a SystemSetting
     * const systemSetting = await prisma.systemSetting.upsert({
     *   create: {
     *     // ... data to create a SystemSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSetting we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingUpsertArgs>(args: SelectSubset<T, SystemSettingUpsertArgs<ExtArgs>>): Prisma__SystemSettingClient<$Result.GetResult<Prisma.$SystemSettingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSetting.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingCountArgs>(
      args?: Subset<T, SystemSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingAggregateArgs>(args: Subset<T, SystemSettingAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingAggregateType<T>>

    /**
     * Group by SystemSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSetting model
   */
  readonly fields: SystemSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSetting model
   */ 
  interface SystemSettingFieldRefs {
    readonly id: FieldRef<"SystemSetting", 'String'>
    readonly key: FieldRef<"SystemSetting", 'String'>
    readonly value: FieldRef<"SystemSetting", 'String'>
    readonly type: FieldRef<"SystemSetting", 'String'>
    readonly createdAt: FieldRef<"SystemSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemSetting findUnique
   */
  export type SystemSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findUniqueOrThrow
   */
  export type SystemSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting findFirst
   */
  export type SystemSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findFirstOrThrow
   */
  export type SystemSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter, which SystemSetting to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting findMany
   */
  export type SystemSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingOrderByWithRelationInput | SystemSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingScalarFieldEnum | SystemSettingScalarFieldEnum[]
  }

  /**
   * SystemSetting create
   */
  export type SystemSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemSetting.
     */
    data: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
  }

  /**
   * SystemSetting createMany
   */
  export type SystemSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting createManyAndReturn
   */
  export type SystemSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingCreateManyInput | SystemSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSetting update
   */
  export type SystemSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemSetting.
     */
    data: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
    /**
     * Choose, which SystemSetting to update.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting updateMany
   */
  export type SystemSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingUpdateManyMutationInput, SystemSettingUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingWhereInput
  }

  /**
   * SystemSetting upsert
   */
  export type SystemSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemSetting to update in case it exists.
     */
    where: SystemSettingWhereUniqueInput
    /**
     * In case the SystemSetting found by the `where` argument doesn't exist, create a new SystemSetting with this data.
     */
    create: XOR<SystemSettingCreateInput, SystemSettingUncheckedCreateInput>
    /**
     * In case the SystemSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingUpdateInput, SystemSettingUncheckedUpdateInput>
  }

  /**
   * SystemSetting delete
   */
  export type SystemSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
    /**
     * Filter which SystemSetting to delete.
     */
    where: SystemSettingWhereUniqueInput
  }

  /**
   * SystemSetting deleteMany
   */
  export type SystemSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingWhereInput
  }

  /**
   * SystemSetting without action
   */
  export type SystemSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSetting
     */
    select?: SystemSettingSelect<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    action: string | null
    resource: string | null
    resourceId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    resource: number
    resourceId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    resource?: true
    resourceId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: string | null
    action: string
    resource: string
    resourceId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    resource?: boolean
    resourceId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      action: string
      resource: string
      resourceId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'String'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly resource: FieldRef<"AuditLog", 'String'>
    readonly resourceId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    isActive: boolean | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    token: string | null
    expiresAt: Date | null
    isActive: boolean | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    token: number
    expiresAt: number
    isActive: number
    ipAddress: number
    userAgent: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    isActive?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    isActive?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    token?: true
    expiresAt?: true
    isActive?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    userId: string
    token: string
    expiresAt: Date
    isActive: boolean
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    userId?: boolean
    token?: boolean
    expiresAt?: boolean
    isActive?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      token: string
      expiresAt: Date
      isActive: boolean
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly token: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly isActive: FieldRef<"Session", 'Boolean'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    passwordHash: 'passwordHash',
    role: 'role',
    isActive: 'isActive',
    avatar: 'avatar',
    isSupervisor: 'isSupervisor',
    teacherRegisteredById: 'teacherRegisteredById',
    studentRegisteredById: 'studentRegisteredById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserProfileScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    lastName: 'lastName',
    dateOfBirth: 'dateOfBirth',
    phone: 'phone',
    street: 'street',
    city: 'city',
    state: 'state',
    zipCode: 'zipCode',
    country: 'country',
    studentId: 'studentId',
    grade: 'grade',
    gpa: 'gpa',
    enrollmentDate: 'enrollmentDate',
    graduationDate: 'graduationDate',
    major: 'major',
    minor: 'minor',
    employeeId: 'employeeId',
    department: 'department',
    position: 'position',
    hireDate: 'hireDate',
    specialization: 'specialization',
    officeLocation: 'officeLocation',
    officeHours: 'officeHours',
    advisoryTeacherId: 'advisoryTeacherId',
    emergencyContactName: 'emergencyContactName',
    emergencyContactRelationship: 'emergencyContactRelationship',
    emergencyContactPhone: 'emergencyContactPhone',
    emergencyContactEmail: 'emergencyContactEmail',
    theme: 'theme',
    language: 'language',
    timezone: 'timezone',
    emailNotifications: 'emailNotifications',
    pushNotifications: 'pushNotifications',
    smsNotifications: 'smsNotifications',
    profileVisibility: 'profileVisibility',
    showEmail: 'showEmail',
    showPhone: 'showPhone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserProfileScalarFieldEnum = (typeof UserProfileScalarFieldEnum)[keyof typeof UserProfileScalarFieldEnum]


  export const UserActivityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    details: 'details',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type UserActivityScalarFieldEnum = (typeof UserActivityScalarFieldEnum)[keyof typeof UserActivityScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    category: 'category',
    createdAt: 'createdAt'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    id: 'id',
    role: 'role',
    permissionId: 'permissionId',
    requiresSupervisor: 'requiresSupervisor'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    departmentHeadId: 'departmentHeadId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    description: 'description',
    credits: 'credits',
    scheduleDays: 'scheduleDays',
    startTime: 'startTime',
    endTime: 'endTime',
    location: 'location',
    building: 'building',
    room: 'room',
    createdById: 'createdById',
    instructorId: 'instructorId',
    semester: 'semester',
    year: 'year',
    capacity: 'capacity',
    enrolled: 'enrolled',
    status: 'status',
    category: 'category',
    departmentId: 'departmentId',
    level: 'level',
    startDate: 'startDate',
    endDate: 'endDate',
    enrollmentDeadline: 'enrollmentDeadline',
    syllabusUrl: 'syllabusUrl',
    studyPlan: 'studyPlan',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const EnrollmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    courseId: 'courseId',
    enrolledById: 'enrolledById',
    enrollmentDate: 'enrollmentDate',
    status: 'status',
    finalGrade: 'finalGrade',
    finalPoints: 'finalPoints',
    completed: 'completed',
    total: 'total',
    currentGrade: 'currentGrade',
    attendance: 'attendance',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EnrollmentScalarFieldEnum = (typeof EnrollmentScalarFieldEnum)[keyof typeof EnrollmentScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    createdById: 'createdById',
    title: 'title',
    description: 'description',
    type: 'type',
    assignedDate: 'assignedDate',
    dueDate: 'dueDate',
    maxPoints: 'maxPoints',
    isGroupWork: 'isGroupWork',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const AssignmentSubmissionScalarFieldEnum: {
    id: 'id',
    assignmentId: 'assignmentId',
    studentId: 'studentId',
    submittedAt: 'submittedAt',
    textContent: 'textContent'
  };

  export type AssignmentSubmissionScalarFieldEnum = (typeof AssignmentSubmissionScalarFieldEnum)[keyof typeof AssignmentSubmissionScalarFieldEnum]


  export const GradeScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    courseId: 'courseId',
    assignmentId: 'assignmentId',
    submissionId: 'submissionId',
    letterGrade: 'letterGrade',
    score: 'score',
    maxPoints: 'maxPoints',
    percentage: 'percentage',
    gradedById: 'gradedById',
    gradedDate: 'gradedDate',
    gradingPeriod: 'gradingPeriod',
    feedback: 'feedback',
    isExtraCredit: 'isExtraCredit',
    weight: 'weight',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GradeScalarFieldEnum = (typeof GradeScalarFieldEnum)[keyof typeof GradeScalarFieldEnum]


  export const CourseMaterialScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    uploadedById: 'uploadedById',
    title: 'title',
    description: 'description',
    type: 'type',
    uploadDate: 'uploadDate',
    isRequired: 'isRequired',
    fileId: 'fileId',
    url: 'url',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseMaterialScalarFieldEnum = (typeof CourseMaterialScalarFieldEnum)[keyof typeof CourseMaterialScalarFieldEnum]


  export const QuizScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    createdById: 'createdById',
    title: 'title',
    description: 'description',
    duration: 'duration',
    totalQuestions: 'totalQuestions',
    maxPoints: 'maxPoints',
    dueDate: 'dueDate',
    isTimed: 'isTimed',
    attemptsAllowed: 'attemptsAllowed',
    questionsData: 'questionsData',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type QuizScalarFieldEnum = (typeof QuizScalarFieldEnum)[keyof typeof QuizScalarFieldEnum]


  export const QuizAttemptScalarFieldEnum: {
    id: 'id',
    quizId: 'quizId',
    studentId: 'studentId',
    startedAt: 'startedAt',
    submittedAt: 'submittedAt',
    score: 'score',
    maxPoints: 'maxPoints',
    answers: 'answers'
  };

  export type QuizAttemptScalarFieldEnum = (typeof QuizAttemptScalarFieldEnum)[keyof typeof QuizAttemptScalarFieldEnum]


  export const CourseAnnouncementScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    authorId: 'authorId',
    title: 'title',
    content: 'content',
    priority: 'priority',
    isImportant: 'isImportant',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseAnnouncementScalarFieldEnum = (typeof CourseAnnouncementScalarFieldEnum)[keyof typeof CourseAnnouncementScalarFieldEnum]


  export const ClassSessionScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    date: 'date',
    topic: 'topic',
    location: 'location',
    notes: 'notes',
    cancelled: 'cancelled',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ClassSessionScalarFieldEnum = (typeof ClassSessionScalarFieldEnum)[keyof typeof ClassSessionScalarFieldEnum]


  export const StudentAttendanceScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    studentId: 'studentId',
    status: 'status',
    notes: 'notes',
    createdAt: 'createdAt'
  };

  export type StudentAttendanceScalarFieldEnum = (typeof StudentAttendanceScalarFieldEnum)[keyof typeof StudentAttendanceScalarFieldEnum]


  export const TeacherCourseAssignmentScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    courseId: 'courseId',
    assignedById: 'assignedById',
    assignedDate: 'assignedDate',
    isActive: 'isActive',
    notes: 'notes'
  };

  export type TeacherCourseAssignmentScalarFieldEnum = (typeof TeacherCourseAssignmentScalarFieldEnum)[keyof typeof TeacherCourseAssignmentScalarFieldEnum]


  export const AdvisoryAssignmentScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    advisoryTeacherId: 'advisoryTeacherId',
    assignedById: 'assignedById',
    assignedDate: 'assignedDate',
    isActive: 'isActive',
    notes: 'notes'
  };

  export type AdvisoryAssignmentScalarFieldEnum = (typeof AdvisoryAssignmentScalarFieldEnum)[keyof typeof AdvisoryAssignmentScalarFieldEnum]


  export const FileAttachmentScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    originalName: 'originalName',
    mimeType: 'mimeType',
    fileSize: 'fileSize',
    path: 'path',
    uploadedById: 'uploadedById',
    createdAt: 'createdAt'
  };

  export type FileAttachmentScalarFieldEnum = (typeof FileAttachmentScalarFieldEnum)[keyof typeof FileAttachmentScalarFieldEnum]


  export const PageConfigurationScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    userType: 'userType',
    layoutType: 'layoutType',
    layoutClass: 'layoutClass',
    sections: 'sections',
    requiresAuth: 'requiresAuth',
    permissions: 'permissions',
    requiresSupervisor: 'requiresSupervisor',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PageConfigurationScalarFieldEnum = (typeof PageConfigurationScalarFieldEnum)[keyof typeof PageConfigurationScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    type: 'type',
    priority: 'priority',
    isRead: 'isRead',
    readAt: 'readAt',
    courseId: 'courseId',
    assignmentId: 'assignmentId',
    gradeId: 'gradeId',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SystemSettingScalarFieldEnum: {
    id: 'id',
    key: 'key',
    value: 'value',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemSettingScalarFieldEnum = (typeof SystemSettingScalarFieldEnum)[keyof typeof SystemSettingScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    resource: 'resource',
    resourceId: 'resourceId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    token: 'token',
    expiresAt: 'expiresAt',
    isActive: 'isActive',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ThemeMode'
   */
  export type EnumThemeModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ThemeMode'>
    


  /**
   * Reference to a field of type 'ThemeMode[]'
   */
  export type ListEnumThemeModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ThemeMode[]'>
    


  /**
   * Reference to a field of type 'Visibility'
   */
  export type EnumVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Visibility'>
    


  /**
   * Reference to a field of type 'Visibility[]'
   */
  export type ListEnumVisibilityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Visibility[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CourseStatus'
   */
  export type EnumCourseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseStatus'>
    


  /**
   * Reference to a field of type 'CourseStatus[]'
   */
  export type ListEnumCourseStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseStatus[]'>
    


  /**
   * Reference to a field of type 'CourseLevel'
   */
  export type EnumCourseLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseLevel'>
    


  /**
   * Reference to a field of type 'CourseLevel[]'
   */
  export type ListEnumCourseLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseLevel[]'>
    


  /**
   * Reference to a field of type 'EnrollmentStatus'
   */
  export type EnumEnrollmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnrollmentStatus'>
    


  /**
   * Reference to a field of type 'EnrollmentStatus[]'
   */
  export type ListEnumEnrollmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EnrollmentStatus[]'>
    


  /**
   * Reference to a field of type 'AssignmentType'
   */
  export type EnumAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentType'>
    


  /**
   * Reference to a field of type 'AssignmentType[]'
   */
  export type ListEnumAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentType[]'>
    


  /**
   * Reference to a field of type 'AssignmentStatus'
   */
  export type EnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus'>
    


  /**
   * Reference to a field of type 'AssignmentStatus[]'
   */
  export type ListEnumAssignmentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AssignmentStatus[]'>
    


  /**
   * Reference to a field of type 'MaterialType'
   */
  export type EnumMaterialTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialType'>
    


  /**
   * Reference to a field of type 'MaterialType[]'
   */
  export type ListEnumMaterialTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MaterialType[]'>
    


  /**
   * Reference to a field of type 'AnnouncementPriority'
   */
  export type EnumAnnouncementPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnnouncementPriority'>
    


  /**
   * Reference to a field of type 'AnnouncementPriority[]'
   */
  export type ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AnnouncementPriority[]'>
    


  /**
   * Reference to a field of type 'AttendanceStatus'
   */
  export type EnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus'>
    


  /**
   * Reference to a field of type 'AttendanceStatus[]'
   */
  export type ListEnumAttendanceStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AttendanceStatus[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationPriority'
   */
  export type EnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority'>
    


  /**
   * Reference to a field of type 'NotificationPriority[]'
   */
  export type ListEnumNotificationPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationPriority[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    isSupervisor?: BoolFilter<"User"> | boolean
    teacherRegisteredById?: StringNullableFilter<"User"> | string | null
    studentRegisteredById?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    studentEnrollments?: EnrollmentListRelationFilter
    assignmentSubmissions?: AssignmentSubmissionListRelationFilter
    quizAttempts?: QuizAttemptListRelationFilter
    grades?: GradeListRelationFilter
    attendances?: StudentAttendanceListRelationFilter
    taughtCourses?: CourseListRelationFilter
    advisoryStudents?: UserProfileListRelationFilter
    gradedAssignments?: GradeListRelationFilter
    courseAnnouncements?: CourseAnnouncementListRelationFilter
    createdAssignments?: AssignmentListRelationFilter
    createdQuizzes?: QuizListRelationFilter
    uploadedMaterials?: CourseMaterialListRelationFilter
    createdCourses?: CourseListRelationFilter
    registeredTeachers?: UserListRelationFilter
    registeredStudents?: UserListRelationFilter
    assignedTeachers?: TeacherCourseAssignmentListRelationFilter
    teacherCourseAssignments?: TeacherCourseAssignmentListRelationFilter
    assignedAdvisories?: AdvisoryAssignmentListRelationFilter
    advisoryAssignments?: AdvisoryAssignmentListRelationFilter
    studentAdvisoryAssignment?: XOR<AdvisoryAssignmentNullableRelationFilter, AdvisoryAssignmentWhereInput> | null
    managedDepartments?: DepartmentListRelationFilter
    teacherRegisteredBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    studentRegisteredBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    userActivity?: UserActivityListRelationFilter
    uploadedFiles?: FileAttachmentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    enrollmentsManaged?: EnrollmentListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isSupervisor?: SortOrder
    teacherRegisteredById?: SortOrderInput | SortOrder
    studentRegisteredById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    profile?: UserProfileOrderByWithRelationInput
    studentEnrollments?: EnrollmentOrderByRelationAggregateInput
    assignmentSubmissions?: AssignmentSubmissionOrderByRelationAggregateInput
    quizAttempts?: QuizAttemptOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
    attendances?: StudentAttendanceOrderByRelationAggregateInput
    taughtCourses?: CourseOrderByRelationAggregateInput
    advisoryStudents?: UserProfileOrderByRelationAggregateInput
    gradedAssignments?: GradeOrderByRelationAggregateInput
    courseAnnouncements?: CourseAnnouncementOrderByRelationAggregateInput
    createdAssignments?: AssignmentOrderByRelationAggregateInput
    createdQuizzes?: QuizOrderByRelationAggregateInput
    uploadedMaterials?: CourseMaterialOrderByRelationAggregateInput
    createdCourses?: CourseOrderByRelationAggregateInput
    registeredTeachers?: UserOrderByRelationAggregateInput
    registeredStudents?: UserOrderByRelationAggregateInput
    assignedTeachers?: TeacherCourseAssignmentOrderByRelationAggregateInput
    teacherCourseAssignments?: TeacherCourseAssignmentOrderByRelationAggregateInput
    assignedAdvisories?: AdvisoryAssignmentOrderByRelationAggregateInput
    advisoryAssignments?: AdvisoryAssignmentOrderByRelationAggregateInput
    studentAdvisoryAssignment?: AdvisoryAssignmentOrderByWithRelationInput
    managedDepartments?: DepartmentOrderByRelationAggregateInput
    teacherRegisteredBy?: UserOrderByWithRelationInput
    studentRegisteredBy?: UserOrderByWithRelationInput
    userActivity?: UserActivityOrderByRelationAggregateInput
    uploadedFiles?: FileAttachmentOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    enrollmentsManaged?: EnrollmentOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    isSupervisor?: BoolFilter<"User"> | boolean
    teacherRegisteredById?: StringNullableFilter<"User"> | string | null
    studentRegisteredById?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    profile?: XOR<UserProfileNullableRelationFilter, UserProfileWhereInput> | null
    studentEnrollments?: EnrollmentListRelationFilter
    assignmentSubmissions?: AssignmentSubmissionListRelationFilter
    quizAttempts?: QuizAttemptListRelationFilter
    grades?: GradeListRelationFilter
    attendances?: StudentAttendanceListRelationFilter
    taughtCourses?: CourseListRelationFilter
    advisoryStudents?: UserProfileListRelationFilter
    gradedAssignments?: GradeListRelationFilter
    courseAnnouncements?: CourseAnnouncementListRelationFilter
    createdAssignments?: AssignmentListRelationFilter
    createdQuizzes?: QuizListRelationFilter
    uploadedMaterials?: CourseMaterialListRelationFilter
    createdCourses?: CourseListRelationFilter
    registeredTeachers?: UserListRelationFilter
    registeredStudents?: UserListRelationFilter
    assignedTeachers?: TeacherCourseAssignmentListRelationFilter
    teacherCourseAssignments?: TeacherCourseAssignmentListRelationFilter
    assignedAdvisories?: AdvisoryAssignmentListRelationFilter
    advisoryAssignments?: AdvisoryAssignmentListRelationFilter
    studentAdvisoryAssignment?: XOR<AdvisoryAssignmentNullableRelationFilter, AdvisoryAssignmentWhereInput> | null
    managedDepartments?: DepartmentListRelationFilter
    teacherRegisteredBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    studentRegisteredBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    userActivity?: UserActivityListRelationFilter
    uploadedFiles?: FileAttachmentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
    enrollmentsManaged?: EnrollmentListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    avatar?: SortOrderInput | SortOrder
    isSupervisor?: SortOrder
    teacherRegisteredById?: SortOrderInput | SortOrder
    studentRegisteredById?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    isSupervisor?: BoolWithAggregatesFilter<"User"> | boolean
    teacherRegisteredById?: StringNullableWithAggregatesFilter<"User"> | string | null
    studentRegisteredById?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type UserProfileWhereInput = {
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    firstName?: StringFilter<"UserProfile"> | string
    lastName?: StringFilter<"UserProfile"> | string
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    phone?: StringNullableFilter<"UserProfile"> | string | null
    street?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringNullableFilter<"UserProfile"> | string | null
    state?: StringNullableFilter<"UserProfile"> | string | null
    zipCode?: StringNullableFilter<"UserProfile"> | string | null
    country?: StringNullableFilter<"UserProfile"> | string | null
    studentId?: StringNullableFilter<"UserProfile"> | string | null
    grade?: StringNullableFilter<"UserProfile"> | string | null
    gpa?: FloatNullableFilter<"UserProfile"> | number | null
    enrollmentDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    major?: StringNullableFilter<"UserProfile"> | string | null
    minor?: StringNullableFilter<"UserProfile"> | string | null
    employeeId?: StringNullableFilter<"UserProfile"> | string | null
    department?: StringNullableFilter<"UserProfile"> | string | null
    position?: StringNullableFilter<"UserProfile"> | string | null
    hireDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    specialization?: StringNullableListFilter<"UserProfile">
    officeLocation?: StringNullableFilter<"UserProfile"> | string | null
    officeHours?: StringNullableFilter<"UserProfile"> | string | null
    advisoryTeacherId?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactName?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactEmail?: StringNullableFilter<"UserProfile"> | string | null
    theme?: EnumThemeModeFilter<"UserProfile"> | $Enums.ThemeMode
    language?: StringFilter<"UserProfile"> | string
    timezone?: StringFilter<"UserProfile"> | string
    emailNotifications?: BoolFilter<"UserProfile"> | boolean
    pushNotifications?: BoolFilter<"UserProfile"> | boolean
    smsNotifications?: BoolFilter<"UserProfile"> | boolean
    profileVisibility?: EnumVisibilityFilter<"UserProfile"> | $Enums.Visibility
    showEmail?: BoolFilter<"UserProfile"> | boolean
    showPhone?: BoolFilter<"UserProfile"> | boolean
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    advisoryTeacher?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type UserProfileOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    studentId?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    gpa?: SortOrderInput | SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    graduationDate?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    minor?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    specialization?: SortOrder
    officeLocation?: SortOrderInput | SortOrder
    officeHours?: SortOrderInput | SortOrder
    advisoryTeacherId?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    theme?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    smsNotifications?: SortOrder
    profileVisibility?: SortOrder
    showEmail?: SortOrder
    showPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    advisoryTeacher?: UserOrderByWithRelationInput
  }

  export type UserProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserProfileWhereInput | UserProfileWhereInput[]
    OR?: UserProfileWhereInput[]
    NOT?: UserProfileWhereInput | UserProfileWhereInput[]
    firstName?: StringFilter<"UserProfile"> | string
    lastName?: StringFilter<"UserProfile"> | string
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    phone?: StringNullableFilter<"UserProfile"> | string | null
    street?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringNullableFilter<"UserProfile"> | string | null
    state?: StringNullableFilter<"UserProfile"> | string | null
    zipCode?: StringNullableFilter<"UserProfile"> | string | null
    country?: StringNullableFilter<"UserProfile"> | string | null
    studentId?: StringNullableFilter<"UserProfile"> | string | null
    grade?: StringNullableFilter<"UserProfile"> | string | null
    gpa?: FloatNullableFilter<"UserProfile"> | number | null
    enrollmentDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    major?: StringNullableFilter<"UserProfile"> | string | null
    minor?: StringNullableFilter<"UserProfile"> | string | null
    employeeId?: StringNullableFilter<"UserProfile"> | string | null
    department?: StringNullableFilter<"UserProfile"> | string | null
    position?: StringNullableFilter<"UserProfile"> | string | null
    hireDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    specialization?: StringNullableListFilter<"UserProfile">
    officeLocation?: StringNullableFilter<"UserProfile"> | string | null
    officeHours?: StringNullableFilter<"UserProfile"> | string | null
    advisoryTeacherId?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactName?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactEmail?: StringNullableFilter<"UserProfile"> | string | null
    theme?: EnumThemeModeFilter<"UserProfile"> | $Enums.ThemeMode
    language?: StringFilter<"UserProfile"> | string
    timezone?: StringFilter<"UserProfile"> | string
    emailNotifications?: BoolFilter<"UserProfile"> | boolean
    pushNotifications?: BoolFilter<"UserProfile"> | boolean
    smsNotifications?: BoolFilter<"UserProfile"> | boolean
    profileVisibility?: EnumVisibilityFilter<"UserProfile"> | $Enums.Visibility
    showEmail?: BoolFilter<"UserProfile"> | boolean
    showPhone?: BoolFilter<"UserProfile"> | boolean
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    advisoryTeacher?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id" | "userId">

  export type UserProfileOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    street?: SortOrderInput | SortOrder
    city?: SortOrderInput | SortOrder
    state?: SortOrderInput | SortOrder
    zipCode?: SortOrderInput | SortOrder
    country?: SortOrderInput | SortOrder
    studentId?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    gpa?: SortOrderInput | SortOrder
    enrollmentDate?: SortOrderInput | SortOrder
    graduationDate?: SortOrderInput | SortOrder
    major?: SortOrderInput | SortOrder
    minor?: SortOrderInput | SortOrder
    employeeId?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    hireDate?: SortOrderInput | SortOrder
    specialization?: SortOrder
    officeLocation?: SortOrderInput | SortOrder
    officeHours?: SortOrderInput | SortOrder
    advisoryTeacherId?: SortOrderInput | SortOrder
    emergencyContactName?: SortOrderInput | SortOrder
    emergencyContactRelationship?: SortOrderInput | SortOrder
    emergencyContactPhone?: SortOrderInput | SortOrder
    emergencyContactEmail?: SortOrderInput | SortOrder
    theme?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    smsNotifications?: SortOrder
    profileVisibility?: SortOrder
    showEmail?: SortOrder
    showPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserProfileCountOrderByAggregateInput
    _avg?: UserProfileAvgOrderByAggregateInput
    _max?: UserProfileMaxOrderByAggregateInput
    _min?: UserProfileMinOrderByAggregateInput
    _sum?: UserProfileSumOrderByAggregateInput
  }

  export type UserProfileScalarWhereWithAggregatesInput = {
    AND?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    OR?: UserProfileScalarWhereWithAggregatesInput[]
    NOT?: UserProfileScalarWhereWithAggregatesInput | UserProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserProfile"> | string
    userId?: StringWithAggregatesFilter<"UserProfile"> | string
    firstName?: StringWithAggregatesFilter<"UserProfile"> | string
    lastName?: StringWithAggregatesFilter<"UserProfile"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    phone?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    street?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    city?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    state?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    zipCode?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    country?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    studentId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    grade?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    gpa?: FloatNullableWithAggregatesFilter<"UserProfile"> | number | null
    enrollmentDate?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    graduationDate?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    major?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    minor?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    employeeId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    department?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    position?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    hireDate?: DateTimeNullableWithAggregatesFilter<"UserProfile"> | Date | string | null
    specialization?: StringNullableListFilter<"UserProfile">
    officeLocation?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    officeHours?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    advisoryTeacherId?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    emergencyContactName?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    emergencyContactRelationship?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    emergencyContactPhone?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    emergencyContactEmail?: StringNullableWithAggregatesFilter<"UserProfile"> | string | null
    theme?: EnumThemeModeWithAggregatesFilter<"UserProfile"> | $Enums.ThemeMode
    language?: StringWithAggregatesFilter<"UserProfile"> | string
    timezone?: StringWithAggregatesFilter<"UserProfile"> | string
    emailNotifications?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    pushNotifications?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    smsNotifications?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    profileVisibility?: EnumVisibilityWithAggregatesFilter<"UserProfile"> | $Enums.Visibility
    showEmail?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    showPhone?: BoolWithAggregatesFilter<"UserProfile"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserProfile"> | Date | string
  }

  export type UserActivityWhereInput = {
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    userId?: StringFilter<"UserActivity"> | string
    action?: StringFilter<"UserActivity"> | string
    details?: JsonNullableFilter<"UserActivity">
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserActivityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    userId?: StringFilter<"UserActivity"> | string
    action?: StringFilter<"UserActivity"> | string
    details?: JsonNullableFilter<"UserActivity">
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type UserActivityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: UserActivityCountOrderByAggregateInput
    _max?: UserActivityMaxOrderByAggregateInput
    _min?: UserActivityMinOrderByAggregateInput
  }

  export type UserActivityScalarWhereWithAggregatesInput = {
    AND?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    OR?: UserActivityScalarWhereWithAggregatesInput[]
    NOT?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserActivity"> | string
    userId?: StringWithAggregatesFilter<"UserActivity"> | string
    action?: StringWithAggregatesFilter<"UserActivity"> | string
    details?: JsonNullableWithAggregatesFilter<"UserActivity">
    ipAddress?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserActivity"> | Date | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    category?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    rolePermissions?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    description?: StringNullableFilter<"Permission"> | string | null
    category?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    rolePermissions?: RolePermissionListRelationFilter
  }, "id" | "name">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    category?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    role?: EnumUserRoleFilter<"RolePermission"> | $Enums.UserRole
    permissionId?: StringFilter<"RolePermission"> | string
    requiresSupervisor?: BoolFilter<"RolePermission"> | boolean
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    permissionId?: SortOrder
    requiresSupervisor?: SortOrder
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    role_permissionId?: RolePermissionRolePermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    role?: EnumUserRoleFilter<"RolePermission"> | $Enums.UserRole
    permissionId?: StringFilter<"RolePermission"> | string
    requiresSupervisor?: BoolFilter<"RolePermission"> | boolean
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "id" | "role_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    permissionId?: SortOrder
    requiresSupervisor?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RolePermission"> | string
    role?: EnumUserRoleWithAggregatesFilter<"RolePermission"> | $Enums.UserRole
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
    requiresSupervisor?: BoolWithAggregatesFilter<"RolePermission"> | boolean
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    departmentHeadId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    departmentHead?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    courses?: CourseListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentHeadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentHead?: UserOrderByWithRelationInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    description?: StringNullableFilter<"Department"> | string | null
    departmentHeadId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
    departmentHead?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    courses?: CourseListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentHeadId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    departmentHeadId?: StringNullableWithAggregatesFilter<"Department"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Department"> | Date | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    credits?: IntFilter<"Course"> | number
    scheduleDays?: StringNullableListFilter<"Course">
    startTime?: StringFilter<"Course"> | string
    endTime?: StringFilter<"Course"> | string
    location?: StringFilter<"Course"> | string
    building?: StringNullableFilter<"Course"> | string | null
    room?: StringNullableFilter<"Course"> | string | null
    createdById?: StringFilter<"Course"> | string
    instructorId?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    year?: IntFilter<"Course"> | number
    capacity?: IntFilter<"Course"> | number
    enrolled?: IntFilter<"Course"> | number
    status?: EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
    category?: StringFilter<"Course"> | string
    departmentId?: StringFilter<"Course"> | string
    level?: EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeFilter<"Course"> | Date | string
    enrollmentDeadline?: DateTimeNullableFilter<"Course"> | Date | string | null
    syllabusUrl?: StringNullableFilter<"Course"> | string | null
    studyPlan?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    instructor?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    prerequisites?: CourseListRelationFilter
    prerequisiteFor?: CourseListRelationFilter
    enrollments?: EnrollmentListRelationFilter
    assignments?: AssignmentListRelationFilter
    courseMaterials?: CourseMaterialListRelationFilter
    quizzes?: QuizListRelationFilter
    announcements?: CourseAnnouncementListRelationFilter
    classSessions?: ClassSessionListRelationFilter
    grades?: GradeListRelationFilter
    teacherAssignments?: TeacherCourseAssignmentListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    scheduleDays?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    building?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    createdById?: SortOrder
    instructorId?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
    status?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    enrollmentDeadline?: SortOrderInput | SortOrder
    syllabusUrl?: SortOrderInput | SortOrder
    studyPlan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    instructor?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    prerequisites?: CourseOrderByRelationAggregateInput
    prerequisiteFor?: CourseOrderByRelationAggregateInput
    enrollments?: EnrollmentOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
    courseMaterials?: CourseMaterialOrderByRelationAggregateInput
    quizzes?: QuizOrderByRelationAggregateInput
    announcements?: CourseAnnouncementOrderByRelationAggregateInput
    classSessions?: ClassSessionOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
    teacherAssignments?: TeacherCourseAssignmentOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    credits?: IntFilter<"Course"> | number
    scheduleDays?: StringNullableListFilter<"Course">
    startTime?: StringFilter<"Course"> | string
    endTime?: StringFilter<"Course"> | string
    location?: StringFilter<"Course"> | string
    building?: StringNullableFilter<"Course"> | string | null
    room?: StringNullableFilter<"Course"> | string | null
    createdById?: StringFilter<"Course"> | string
    instructorId?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    year?: IntFilter<"Course"> | number
    capacity?: IntFilter<"Course"> | number
    enrolled?: IntFilter<"Course"> | number
    status?: EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
    category?: StringFilter<"Course"> | string
    departmentId?: StringFilter<"Course"> | string
    level?: EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeFilter<"Course"> | Date | string
    enrollmentDeadline?: DateTimeNullableFilter<"Course"> | Date | string | null
    syllabusUrl?: StringNullableFilter<"Course"> | string | null
    studyPlan?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    instructor?: XOR<UserRelationFilter, UserWhereInput>
    department?: XOR<DepartmentRelationFilter, DepartmentWhereInput>
    prerequisites?: CourseListRelationFilter
    prerequisiteFor?: CourseListRelationFilter
    enrollments?: EnrollmentListRelationFilter
    assignments?: AssignmentListRelationFilter
    courseMaterials?: CourseMaterialListRelationFilter
    quizzes?: QuizListRelationFilter
    announcements?: CourseAnnouncementListRelationFilter
    classSessions?: ClassSessionListRelationFilter
    grades?: GradeListRelationFilter
    teacherAssignments?: TeacherCourseAssignmentListRelationFilter
  }, "id" | "code">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    scheduleDays?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    building?: SortOrderInput | SortOrder
    room?: SortOrderInput | SortOrder
    createdById?: SortOrder
    instructorId?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
    status?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    enrollmentDeadline?: SortOrderInput | SortOrder
    syllabusUrl?: SortOrderInput | SortOrder
    studyPlan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    code?: StringWithAggregatesFilter<"Course"> | string
    name?: StringWithAggregatesFilter<"Course"> | string
    description?: StringWithAggregatesFilter<"Course"> | string
    credits?: IntWithAggregatesFilter<"Course"> | number
    scheduleDays?: StringNullableListFilter<"Course">
    startTime?: StringWithAggregatesFilter<"Course"> | string
    endTime?: StringWithAggregatesFilter<"Course"> | string
    location?: StringWithAggregatesFilter<"Course"> | string
    building?: StringNullableWithAggregatesFilter<"Course"> | string | null
    room?: StringNullableWithAggregatesFilter<"Course"> | string | null
    createdById?: StringWithAggregatesFilter<"Course"> | string
    instructorId?: StringWithAggregatesFilter<"Course"> | string
    semester?: StringWithAggregatesFilter<"Course"> | string
    year?: IntWithAggregatesFilter<"Course"> | number
    capacity?: IntWithAggregatesFilter<"Course"> | number
    enrolled?: IntWithAggregatesFilter<"Course"> | number
    status?: EnumCourseStatusWithAggregatesFilter<"Course"> | $Enums.CourseStatus
    category?: StringWithAggregatesFilter<"Course"> | string
    departmentId?: StringWithAggregatesFilter<"Course"> | string
    level?: EnumCourseLevelWithAggregatesFilter<"Course"> | $Enums.CourseLevel
    startDate?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    enrollmentDeadline?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
    syllabusUrl?: StringNullableWithAggregatesFilter<"Course"> | string | null
    studyPlan?: JsonNullableWithAggregatesFilter<"Course">
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
  }

  export type EnrollmentWhereInput = {
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    enrolledById?: StringFilter<"Enrollment"> | string
    enrollmentDate?: DateTimeFilter<"Enrollment"> | Date | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    finalGrade?: StringNullableFilter<"Enrollment"> | string | null
    finalPoints?: FloatNullableFilter<"Enrollment"> | number | null
    completed?: IntFilter<"Enrollment"> | number
    total?: IntFilter<"Enrollment"> | number
    currentGrade?: FloatNullableFilter<"Enrollment"> | number | null
    attendance?: FloatNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    enrolledBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EnrollmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    enrolledById?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    finalGrade?: SortOrderInput | SortOrder
    finalPoints?: SortOrderInput | SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrderInput | SortOrder
    attendance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: UserOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    enrolledBy?: UserOrderByWithRelationInput
  }

  export type EnrollmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId_courseId?: EnrollmentStudentIdCourseIdCompoundUniqueInput
    AND?: EnrollmentWhereInput | EnrollmentWhereInput[]
    OR?: EnrollmentWhereInput[]
    NOT?: EnrollmentWhereInput | EnrollmentWhereInput[]
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    enrolledById?: StringFilter<"Enrollment"> | string
    enrollmentDate?: DateTimeFilter<"Enrollment"> | Date | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    finalGrade?: StringNullableFilter<"Enrollment"> | string | null
    finalPoints?: FloatNullableFilter<"Enrollment"> | number | null
    completed?: IntFilter<"Enrollment"> | number
    total?: IntFilter<"Enrollment"> | number
    currentGrade?: FloatNullableFilter<"Enrollment"> | number | null
    attendance?: FloatNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    enrolledBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "studentId_courseId">

  export type EnrollmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    enrolledById?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    finalGrade?: SortOrderInput | SortOrder
    finalPoints?: SortOrderInput | SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrderInput | SortOrder
    attendance?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EnrollmentCountOrderByAggregateInput
    _avg?: EnrollmentAvgOrderByAggregateInput
    _max?: EnrollmentMaxOrderByAggregateInput
    _min?: EnrollmentMinOrderByAggregateInput
    _sum?: EnrollmentSumOrderByAggregateInput
  }

  export type EnrollmentScalarWhereWithAggregatesInput = {
    AND?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    OR?: EnrollmentScalarWhereWithAggregatesInput[]
    NOT?: EnrollmentScalarWhereWithAggregatesInput | EnrollmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Enrollment"> | string
    studentId?: StringWithAggregatesFilter<"Enrollment"> | string
    courseId?: StringWithAggregatesFilter<"Enrollment"> | string
    enrolledById?: StringWithAggregatesFilter<"Enrollment"> | string
    enrollmentDate?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    status?: EnumEnrollmentStatusWithAggregatesFilter<"Enrollment"> | $Enums.EnrollmentStatus
    finalGrade?: StringNullableWithAggregatesFilter<"Enrollment"> | string | null
    finalPoints?: FloatNullableWithAggregatesFilter<"Enrollment"> | number | null
    completed?: IntWithAggregatesFilter<"Enrollment"> | number
    total?: IntWithAggregatesFilter<"Enrollment"> | number
    currentGrade?: FloatNullableWithAggregatesFilter<"Enrollment"> | number | null
    attendance?: FloatNullableWithAggregatesFilter<"Enrollment"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Enrollment"> | Date | string
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: StringFilter<"Assignment"> | string
    courseId?: StringFilter<"Assignment"> | string
    createdById?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    assignedDate?: DateTimeFilter<"Assignment"> | Date | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    maxPoints?: FloatFilter<"Assignment"> | number
    isGroupWork?: BoolFilter<"Assignment"> | boolean
    status?: EnumAssignmentStatusFilter<"Assignment"> | $Enums.AssignmentStatus
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updatedAt?: DateTimeFilter<"Assignment"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    submissions?: AssignmentSubmissionListRelationFilter
    grades?: GradeListRelationFilter
    attachments?: FileAttachmentListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    assignedDate?: SortOrder
    dueDate?: SortOrder
    maxPoints?: SortOrder
    isGroupWork?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    submissions?: AssignmentSubmissionOrderByRelationAggregateInput
    grades?: GradeOrderByRelationAggregateInput
    attachments?: FileAttachmentOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    courseId?: StringFilter<"Assignment"> | string
    createdById?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    assignedDate?: DateTimeFilter<"Assignment"> | Date | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    maxPoints?: FloatFilter<"Assignment"> | number
    isGroupWork?: BoolFilter<"Assignment"> | boolean
    status?: EnumAssignmentStatusFilter<"Assignment"> | $Enums.AssignmentStatus
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updatedAt?: DateTimeFilter<"Assignment"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    submissions?: AssignmentSubmissionListRelationFilter
    grades?: GradeListRelationFilter
    attachments?: FileAttachmentListRelationFilter
  }, "id">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    assignedDate?: SortOrder
    dueDate?: SortOrder
    maxPoints?: SortOrder
    isGroupWork?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assignment"> | string
    courseId?: StringWithAggregatesFilter<"Assignment"> | string
    createdById?: StringWithAggregatesFilter<"Assignment"> | string
    title?: StringWithAggregatesFilter<"Assignment"> | string
    description?: StringWithAggregatesFilter<"Assignment"> | string
    type?: EnumAssignmentTypeWithAggregatesFilter<"Assignment"> | $Enums.AssignmentType
    assignedDate?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    dueDate?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    maxPoints?: FloatWithAggregatesFilter<"Assignment"> | number
    isGroupWork?: BoolWithAggregatesFilter<"Assignment"> | boolean
    status?: EnumAssignmentStatusWithAggregatesFilter<"Assignment"> | $Enums.AssignmentStatus
    createdAt?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
  }

  export type AssignmentSubmissionWhereInput = {
    AND?: AssignmentSubmissionWhereInput | AssignmentSubmissionWhereInput[]
    OR?: AssignmentSubmissionWhereInput[]
    NOT?: AssignmentSubmissionWhereInput | AssignmentSubmissionWhereInput[]
    id?: StringFilter<"AssignmentSubmission"> | string
    assignmentId?: StringFilter<"AssignmentSubmission"> | string
    studentId?: StringFilter<"AssignmentSubmission"> | string
    submittedAt?: DateTimeFilter<"AssignmentSubmission"> | Date | string
    textContent?: StringNullableFilter<"AssignmentSubmission"> | string | null
    assignment?: XOR<AssignmentRelationFilter, AssignmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    files?: FileAttachmentListRelationFilter
    grade?: XOR<GradeNullableRelationFilter, GradeWhereInput> | null
  }

  export type AssignmentSubmissionOrderByWithRelationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    submittedAt?: SortOrder
    textContent?: SortOrderInput | SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
    files?: FileAttachmentOrderByRelationAggregateInput
    grade?: GradeOrderByWithRelationInput
  }

  export type AssignmentSubmissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    assignmentId_studentId?: AssignmentSubmissionAssignmentIdStudentIdCompoundUniqueInput
    AND?: AssignmentSubmissionWhereInput | AssignmentSubmissionWhereInput[]
    OR?: AssignmentSubmissionWhereInput[]
    NOT?: AssignmentSubmissionWhereInput | AssignmentSubmissionWhereInput[]
    assignmentId?: StringFilter<"AssignmentSubmission"> | string
    studentId?: StringFilter<"AssignmentSubmission"> | string
    submittedAt?: DateTimeFilter<"AssignmentSubmission"> | Date | string
    textContent?: StringNullableFilter<"AssignmentSubmission"> | string | null
    assignment?: XOR<AssignmentRelationFilter, AssignmentWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
    files?: FileAttachmentListRelationFilter
    grade?: XOR<GradeNullableRelationFilter, GradeWhereInput> | null
  }, "id" | "assignmentId_studentId">

  export type AssignmentSubmissionOrderByWithAggregationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    submittedAt?: SortOrder
    textContent?: SortOrderInput | SortOrder
    _count?: AssignmentSubmissionCountOrderByAggregateInput
    _max?: AssignmentSubmissionMaxOrderByAggregateInput
    _min?: AssignmentSubmissionMinOrderByAggregateInput
  }

  export type AssignmentSubmissionScalarWhereWithAggregatesInput = {
    AND?: AssignmentSubmissionScalarWhereWithAggregatesInput | AssignmentSubmissionScalarWhereWithAggregatesInput[]
    OR?: AssignmentSubmissionScalarWhereWithAggregatesInput[]
    NOT?: AssignmentSubmissionScalarWhereWithAggregatesInput | AssignmentSubmissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssignmentSubmission"> | string
    assignmentId?: StringWithAggregatesFilter<"AssignmentSubmission"> | string
    studentId?: StringWithAggregatesFilter<"AssignmentSubmission"> | string
    submittedAt?: DateTimeWithAggregatesFilter<"AssignmentSubmission"> | Date | string
    textContent?: StringNullableWithAggregatesFilter<"AssignmentSubmission"> | string | null
  }

  export type GradeWhereInput = {
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    id?: StringFilter<"Grade"> | string
    studentId?: StringFilter<"Grade"> | string
    courseId?: StringNullableFilter<"Grade"> | string | null
    assignmentId?: StringNullableFilter<"Grade"> | string | null
    submissionId?: StringNullableFilter<"Grade"> | string | null
    letterGrade?: StringFilter<"Grade"> | string
    score?: FloatFilter<"Grade"> | number
    maxPoints?: FloatFilter<"Grade"> | number
    percentage?: FloatNullableFilter<"Grade"> | number | null
    gradedById?: StringFilter<"Grade"> | string
    gradedDate?: DateTimeFilter<"Grade"> | Date | string
    gradingPeriod?: StringNullableFilter<"Grade"> | string | null
    feedback?: StringNullableFilter<"Grade"> | string | null
    isExtraCredit?: BoolFilter<"Grade"> | boolean
    weight?: FloatNullableFilter<"Grade"> | number | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
    assignment?: XOR<AssignmentNullableRelationFilter, AssignmentWhereInput> | null
    submission?: XOR<AssignmentSubmissionNullableRelationFilter, AssignmentSubmissionWhereInput> | null
    gradedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type GradeOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    submissionId?: SortOrderInput | SortOrder
    letterGrade?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrderInput | SortOrder
    gradedById?: SortOrder
    gradedDate?: SortOrder
    gradingPeriod?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    isExtraCredit?: SortOrder
    weight?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: UserOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    assignment?: AssignmentOrderByWithRelationInput
    submission?: AssignmentSubmissionOrderByWithRelationInput
    gradedBy?: UserOrderByWithRelationInput
  }

  export type GradeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    submissionId?: string
    AND?: GradeWhereInput | GradeWhereInput[]
    OR?: GradeWhereInput[]
    NOT?: GradeWhereInput | GradeWhereInput[]
    studentId?: StringFilter<"Grade"> | string
    courseId?: StringNullableFilter<"Grade"> | string | null
    assignmentId?: StringNullableFilter<"Grade"> | string | null
    letterGrade?: StringFilter<"Grade"> | string
    score?: FloatFilter<"Grade"> | number
    maxPoints?: FloatFilter<"Grade"> | number
    percentage?: FloatNullableFilter<"Grade"> | number | null
    gradedById?: StringFilter<"Grade"> | string
    gradedDate?: DateTimeFilter<"Grade"> | Date | string
    gradingPeriod?: StringNullableFilter<"Grade"> | string | null
    feedback?: StringNullableFilter<"Grade"> | string | null
    isExtraCredit?: BoolFilter<"Grade"> | boolean
    weight?: FloatNullableFilter<"Grade"> | number | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
    student?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
    assignment?: XOR<AssignmentNullableRelationFilter, AssignmentWhereInput> | null
    submission?: XOR<AssignmentSubmissionNullableRelationFilter, AssignmentSubmissionWhereInput> | null
    gradedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "submissionId">

  export type GradeOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    submissionId?: SortOrderInput | SortOrder
    letterGrade?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrderInput | SortOrder
    gradedById?: SortOrder
    gradedDate?: SortOrder
    gradingPeriod?: SortOrderInput | SortOrder
    feedback?: SortOrderInput | SortOrder
    isExtraCredit?: SortOrder
    weight?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GradeCountOrderByAggregateInput
    _avg?: GradeAvgOrderByAggregateInput
    _max?: GradeMaxOrderByAggregateInput
    _min?: GradeMinOrderByAggregateInput
    _sum?: GradeSumOrderByAggregateInput
  }

  export type GradeScalarWhereWithAggregatesInput = {
    AND?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    OR?: GradeScalarWhereWithAggregatesInput[]
    NOT?: GradeScalarWhereWithAggregatesInput | GradeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Grade"> | string
    studentId?: StringWithAggregatesFilter<"Grade"> | string
    courseId?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    assignmentId?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    submissionId?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    letterGrade?: StringWithAggregatesFilter<"Grade"> | string
    score?: FloatWithAggregatesFilter<"Grade"> | number
    maxPoints?: FloatWithAggregatesFilter<"Grade"> | number
    percentage?: FloatNullableWithAggregatesFilter<"Grade"> | number | null
    gradedById?: StringWithAggregatesFilter<"Grade"> | string
    gradedDate?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    gradingPeriod?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    feedback?: StringNullableWithAggregatesFilter<"Grade"> | string | null
    isExtraCredit?: BoolWithAggregatesFilter<"Grade"> | boolean
    weight?: FloatNullableWithAggregatesFilter<"Grade"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Grade"> | Date | string
  }

  export type CourseMaterialWhereInput = {
    AND?: CourseMaterialWhereInput | CourseMaterialWhereInput[]
    OR?: CourseMaterialWhereInput[]
    NOT?: CourseMaterialWhereInput | CourseMaterialWhereInput[]
    id?: StringFilter<"CourseMaterial"> | string
    courseId?: StringFilter<"CourseMaterial"> | string
    uploadedById?: StringFilter<"CourseMaterial"> | string
    title?: StringFilter<"CourseMaterial"> | string
    description?: StringNullableFilter<"CourseMaterial"> | string | null
    type?: EnumMaterialTypeFilter<"CourseMaterial"> | $Enums.MaterialType
    uploadDate?: DateTimeFilter<"CourseMaterial"> | Date | string
    isRequired?: BoolFilter<"CourseMaterial"> | boolean
    fileId?: StringNullableFilter<"CourseMaterial"> | string | null
    url?: StringNullableFilter<"CourseMaterial"> | string | null
    createdAt?: DateTimeFilter<"CourseMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"CourseMaterial"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    file?: XOR<FileAttachmentNullableRelationFilter, FileAttachmentWhereInput> | null
  }

  export type CourseMaterialOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    uploadedById?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    uploadDate?: SortOrder
    isRequired?: SortOrder
    fileId?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    uploadedBy?: UserOrderByWithRelationInput
    file?: FileAttachmentOrderByWithRelationInput
  }

  export type CourseMaterialWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseMaterialWhereInput | CourseMaterialWhereInput[]
    OR?: CourseMaterialWhereInput[]
    NOT?: CourseMaterialWhereInput | CourseMaterialWhereInput[]
    courseId?: StringFilter<"CourseMaterial"> | string
    uploadedById?: StringFilter<"CourseMaterial"> | string
    title?: StringFilter<"CourseMaterial"> | string
    description?: StringNullableFilter<"CourseMaterial"> | string | null
    type?: EnumMaterialTypeFilter<"CourseMaterial"> | $Enums.MaterialType
    uploadDate?: DateTimeFilter<"CourseMaterial"> | Date | string
    isRequired?: BoolFilter<"CourseMaterial"> | boolean
    fileId?: StringNullableFilter<"CourseMaterial"> | string | null
    url?: StringNullableFilter<"CourseMaterial"> | string | null
    createdAt?: DateTimeFilter<"CourseMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"CourseMaterial"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    file?: XOR<FileAttachmentNullableRelationFilter, FileAttachmentWhereInput> | null
  }, "id">

  export type CourseMaterialOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    uploadedById?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    uploadDate?: SortOrder
    isRequired?: SortOrder
    fileId?: SortOrderInput | SortOrder
    url?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseMaterialCountOrderByAggregateInput
    _max?: CourseMaterialMaxOrderByAggregateInput
    _min?: CourseMaterialMinOrderByAggregateInput
  }

  export type CourseMaterialScalarWhereWithAggregatesInput = {
    AND?: CourseMaterialScalarWhereWithAggregatesInput | CourseMaterialScalarWhereWithAggregatesInput[]
    OR?: CourseMaterialScalarWhereWithAggregatesInput[]
    NOT?: CourseMaterialScalarWhereWithAggregatesInput | CourseMaterialScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourseMaterial"> | string
    courseId?: StringWithAggregatesFilter<"CourseMaterial"> | string
    uploadedById?: StringWithAggregatesFilter<"CourseMaterial"> | string
    title?: StringWithAggregatesFilter<"CourseMaterial"> | string
    description?: StringNullableWithAggregatesFilter<"CourseMaterial"> | string | null
    type?: EnumMaterialTypeWithAggregatesFilter<"CourseMaterial"> | $Enums.MaterialType
    uploadDate?: DateTimeWithAggregatesFilter<"CourseMaterial"> | Date | string
    isRequired?: BoolWithAggregatesFilter<"CourseMaterial"> | boolean
    fileId?: StringNullableWithAggregatesFilter<"CourseMaterial"> | string | null
    url?: StringNullableWithAggregatesFilter<"CourseMaterial"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"CourseMaterial"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CourseMaterial"> | Date | string
  }

  export type QuizWhereInput = {
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    id?: StringFilter<"Quiz"> | string
    courseId?: StringFilter<"Quiz"> | string
    createdById?: StringFilter<"Quiz"> | string
    title?: StringFilter<"Quiz"> | string
    description?: StringFilter<"Quiz"> | string
    duration?: StringFilter<"Quiz"> | string
    totalQuestions?: IntFilter<"Quiz"> | number
    maxPoints?: FloatFilter<"Quiz"> | number
    dueDate?: DateTimeFilter<"Quiz"> | Date | string
    isTimed?: BoolFilter<"Quiz"> | boolean
    attemptsAllowed?: IntFilter<"Quiz"> | number
    questionsData?: JsonFilter<"Quiz">
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
    updatedAt?: DateTimeFilter<"Quiz"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    attempts?: QuizAttemptListRelationFilter
  }

  export type QuizOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    dueDate?: SortOrder
    isTimed?: SortOrder
    attemptsAllowed?: SortOrder
    questionsData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    attempts?: QuizAttemptOrderByRelationAggregateInput
  }

  export type QuizWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuizWhereInput | QuizWhereInput[]
    OR?: QuizWhereInput[]
    NOT?: QuizWhereInput | QuizWhereInput[]
    courseId?: StringFilter<"Quiz"> | string
    createdById?: StringFilter<"Quiz"> | string
    title?: StringFilter<"Quiz"> | string
    description?: StringFilter<"Quiz"> | string
    duration?: StringFilter<"Quiz"> | string
    totalQuestions?: IntFilter<"Quiz"> | number
    maxPoints?: FloatFilter<"Quiz"> | number
    dueDate?: DateTimeFilter<"Quiz"> | Date | string
    isTimed?: BoolFilter<"Quiz"> | boolean
    attemptsAllowed?: IntFilter<"Quiz"> | number
    questionsData?: JsonFilter<"Quiz">
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
    updatedAt?: DateTimeFilter<"Quiz"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    createdBy?: XOR<UserRelationFilter, UserWhereInput>
    attempts?: QuizAttemptListRelationFilter
  }, "id">

  export type QuizOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    dueDate?: SortOrder
    isTimed?: SortOrder
    attemptsAllowed?: SortOrder
    questionsData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: QuizCountOrderByAggregateInput
    _avg?: QuizAvgOrderByAggregateInput
    _max?: QuizMaxOrderByAggregateInput
    _min?: QuizMinOrderByAggregateInput
    _sum?: QuizSumOrderByAggregateInput
  }

  export type QuizScalarWhereWithAggregatesInput = {
    AND?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    OR?: QuizScalarWhereWithAggregatesInput[]
    NOT?: QuizScalarWhereWithAggregatesInput | QuizScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Quiz"> | string
    courseId?: StringWithAggregatesFilter<"Quiz"> | string
    createdById?: StringWithAggregatesFilter<"Quiz"> | string
    title?: StringWithAggregatesFilter<"Quiz"> | string
    description?: StringWithAggregatesFilter<"Quiz"> | string
    duration?: StringWithAggregatesFilter<"Quiz"> | string
    totalQuestions?: IntWithAggregatesFilter<"Quiz"> | number
    maxPoints?: FloatWithAggregatesFilter<"Quiz"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Quiz"> | Date | string
    isTimed?: BoolWithAggregatesFilter<"Quiz"> | boolean
    attemptsAllowed?: IntWithAggregatesFilter<"Quiz"> | number
    questionsData?: JsonWithAggregatesFilter<"Quiz">
    createdAt?: DateTimeWithAggregatesFilter<"Quiz"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Quiz"> | Date | string
  }

  export type QuizAttemptWhereInput = {
    AND?: QuizAttemptWhereInput | QuizAttemptWhereInput[]
    OR?: QuizAttemptWhereInput[]
    NOT?: QuizAttemptWhereInput | QuizAttemptWhereInput[]
    id?: StringFilter<"QuizAttempt"> | string
    quizId?: StringFilter<"QuizAttempt"> | string
    studentId?: StringFilter<"QuizAttempt"> | string
    startedAt?: DateTimeFilter<"QuizAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"QuizAttempt"> | Date | string | null
    score?: FloatNullableFilter<"QuizAttempt"> | number | null
    maxPoints?: FloatNullableFilter<"QuizAttempt"> | number | null
    answers?: JsonFilter<"QuizAttempt">
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type QuizAttemptOrderByWithRelationInput = {
    id?: SortOrder
    quizId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    maxPoints?: SortOrderInput | SortOrder
    answers?: SortOrder
    quiz?: QuizOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type QuizAttemptWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QuizAttemptWhereInput | QuizAttemptWhereInput[]
    OR?: QuizAttemptWhereInput[]
    NOT?: QuizAttemptWhereInput | QuizAttemptWhereInput[]
    quizId?: StringFilter<"QuizAttempt"> | string
    studentId?: StringFilter<"QuizAttempt"> | string
    startedAt?: DateTimeFilter<"QuizAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"QuizAttempt"> | Date | string | null
    score?: FloatNullableFilter<"QuizAttempt"> | number | null
    maxPoints?: FloatNullableFilter<"QuizAttempt"> | number | null
    answers?: JsonFilter<"QuizAttempt">
    quiz?: XOR<QuizRelationFilter, QuizWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type QuizAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    quizId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrderInput | SortOrder
    score?: SortOrderInput | SortOrder
    maxPoints?: SortOrderInput | SortOrder
    answers?: SortOrder
    _count?: QuizAttemptCountOrderByAggregateInput
    _avg?: QuizAttemptAvgOrderByAggregateInput
    _max?: QuizAttemptMaxOrderByAggregateInput
    _min?: QuizAttemptMinOrderByAggregateInput
    _sum?: QuizAttemptSumOrderByAggregateInput
  }

  export type QuizAttemptScalarWhereWithAggregatesInput = {
    AND?: QuizAttemptScalarWhereWithAggregatesInput | QuizAttemptScalarWhereWithAggregatesInput[]
    OR?: QuizAttemptScalarWhereWithAggregatesInput[]
    NOT?: QuizAttemptScalarWhereWithAggregatesInput | QuizAttemptScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QuizAttempt"> | string
    quizId?: StringWithAggregatesFilter<"QuizAttempt"> | string
    studentId?: StringWithAggregatesFilter<"QuizAttempt"> | string
    startedAt?: DateTimeWithAggregatesFilter<"QuizAttempt"> | Date | string
    submittedAt?: DateTimeNullableWithAggregatesFilter<"QuizAttempt"> | Date | string | null
    score?: FloatNullableWithAggregatesFilter<"QuizAttempt"> | number | null
    maxPoints?: FloatNullableWithAggregatesFilter<"QuizAttempt"> | number | null
    answers?: JsonWithAggregatesFilter<"QuizAttempt">
  }

  export type CourseAnnouncementWhereInput = {
    AND?: CourseAnnouncementWhereInput | CourseAnnouncementWhereInput[]
    OR?: CourseAnnouncementWhereInput[]
    NOT?: CourseAnnouncementWhereInput | CourseAnnouncementWhereInput[]
    id?: StringFilter<"CourseAnnouncement"> | string
    courseId?: StringFilter<"CourseAnnouncement"> | string
    authorId?: StringFilter<"CourseAnnouncement"> | string
    title?: StringFilter<"CourseAnnouncement"> | string
    content?: StringFilter<"CourseAnnouncement"> | string
    priority?: EnumAnnouncementPriorityFilter<"CourseAnnouncement"> | $Enums.AnnouncementPriority
    isImportant?: BoolFilter<"CourseAnnouncement"> | boolean
    createdAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CourseAnnouncementOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    isImportant?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    author?: UserOrderByWithRelationInput
  }

  export type CourseAnnouncementWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseAnnouncementWhereInput | CourseAnnouncementWhereInput[]
    OR?: CourseAnnouncementWhereInput[]
    NOT?: CourseAnnouncementWhereInput | CourseAnnouncementWhereInput[]
    courseId?: StringFilter<"CourseAnnouncement"> | string
    authorId?: StringFilter<"CourseAnnouncement"> | string
    title?: StringFilter<"CourseAnnouncement"> | string
    content?: StringFilter<"CourseAnnouncement"> | string
    priority?: EnumAnnouncementPriorityFilter<"CourseAnnouncement"> | $Enums.AnnouncementPriority
    isImportant?: BoolFilter<"CourseAnnouncement"> | boolean
    createdAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    author?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CourseAnnouncementOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    isImportant?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseAnnouncementCountOrderByAggregateInput
    _max?: CourseAnnouncementMaxOrderByAggregateInput
    _min?: CourseAnnouncementMinOrderByAggregateInput
  }

  export type CourseAnnouncementScalarWhereWithAggregatesInput = {
    AND?: CourseAnnouncementScalarWhereWithAggregatesInput | CourseAnnouncementScalarWhereWithAggregatesInput[]
    OR?: CourseAnnouncementScalarWhereWithAggregatesInput[]
    NOT?: CourseAnnouncementScalarWhereWithAggregatesInput | CourseAnnouncementScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourseAnnouncement"> | string
    courseId?: StringWithAggregatesFilter<"CourseAnnouncement"> | string
    authorId?: StringWithAggregatesFilter<"CourseAnnouncement"> | string
    title?: StringWithAggregatesFilter<"CourseAnnouncement"> | string
    content?: StringWithAggregatesFilter<"CourseAnnouncement"> | string
    priority?: EnumAnnouncementPriorityWithAggregatesFilter<"CourseAnnouncement"> | $Enums.AnnouncementPriority
    isImportant?: BoolWithAggregatesFilter<"CourseAnnouncement"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"CourseAnnouncement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CourseAnnouncement"> | Date | string
  }

  export type ClassSessionWhereInput = {
    AND?: ClassSessionWhereInput | ClassSessionWhereInput[]
    OR?: ClassSessionWhereInput[]
    NOT?: ClassSessionWhereInput | ClassSessionWhereInput[]
    id?: StringFilter<"ClassSession"> | string
    courseId?: StringFilter<"ClassSession"> | string
    date?: DateTimeFilter<"ClassSession"> | Date | string
    topic?: StringFilter<"ClassSession"> | string
    location?: StringFilter<"ClassSession"> | string
    notes?: StringNullableFilter<"ClassSession"> | string | null
    cancelled?: BoolFilter<"ClassSession"> | boolean
    createdAt?: DateTimeFilter<"ClassSession"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSession"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    attendances?: StudentAttendanceListRelationFilter
  }

  export type ClassSessionOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    date?: SortOrder
    topic?: SortOrder
    location?: SortOrder
    notes?: SortOrderInput | SortOrder
    cancelled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    course?: CourseOrderByWithRelationInput
    attendances?: StudentAttendanceOrderByRelationAggregateInput
  }

  export type ClassSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ClassSessionWhereInput | ClassSessionWhereInput[]
    OR?: ClassSessionWhereInput[]
    NOT?: ClassSessionWhereInput | ClassSessionWhereInput[]
    courseId?: StringFilter<"ClassSession"> | string
    date?: DateTimeFilter<"ClassSession"> | Date | string
    topic?: StringFilter<"ClassSession"> | string
    location?: StringFilter<"ClassSession"> | string
    notes?: StringNullableFilter<"ClassSession"> | string | null
    cancelled?: BoolFilter<"ClassSession"> | boolean
    createdAt?: DateTimeFilter<"ClassSession"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSession"> | Date | string
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    attendances?: StudentAttendanceListRelationFilter
  }, "id">

  export type ClassSessionOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    date?: SortOrder
    topic?: SortOrder
    location?: SortOrder
    notes?: SortOrderInput | SortOrder
    cancelled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ClassSessionCountOrderByAggregateInput
    _max?: ClassSessionMaxOrderByAggregateInput
    _min?: ClassSessionMinOrderByAggregateInput
  }

  export type ClassSessionScalarWhereWithAggregatesInput = {
    AND?: ClassSessionScalarWhereWithAggregatesInput | ClassSessionScalarWhereWithAggregatesInput[]
    OR?: ClassSessionScalarWhereWithAggregatesInput[]
    NOT?: ClassSessionScalarWhereWithAggregatesInput | ClassSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ClassSession"> | string
    courseId?: StringWithAggregatesFilter<"ClassSession"> | string
    date?: DateTimeWithAggregatesFilter<"ClassSession"> | Date | string
    topic?: StringWithAggregatesFilter<"ClassSession"> | string
    location?: StringWithAggregatesFilter<"ClassSession"> | string
    notes?: StringNullableWithAggregatesFilter<"ClassSession"> | string | null
    cancelled?: BoolWithAggregatesFilter<"ClassSession"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ClassSession"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ClassSession"> | Date | string
  }

  export type StudentAttendanceWhereInput = {
    AND?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    OR?: StudentAttendanceWhereInput[]
    NOT?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    id?: StringFilter<"StudentAttendance"> | string
    sessionId?: StringFilter<"StudentAttendance"> | string
    studentId?: StringFilter<"StudentAttendance"> | string
    status?: EnumAttendanceStatusFilter<"StudentAttendance"> | $Enums.AttendanceStatus
    notes?: StringNullableFilter<"StudentAttendance"> | string | null
    createdAt?: DateTimeFilter<"StudentAttendance"> | Date | string
    session?: XOR<ClassSessionRelationFilter, ClassSessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type StudentAttendanceOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: ClassSessionOrderByWithRelationInput
    student?: UserOrderByWithRelationInput
  }

  export type StudentAttendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionId_studentId?: StudentAttendanceSessionIdStudentIdCompoundUniqueInput
    AND?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    OR?: StudentAttendanceWhereInput[]
    NOT?: StudentAttendanceWhereInput | StudentAttendanceWhereInput[]
    sessionId?: StringFilter<"StudentAttendance"> | string
    studentId?: StringFilter<"StudentAttendance"> | string
    status?: EnumAttendanceStatusFilter<"StudentAttendance"> | $Enums.AttendanceStatus
    notes?: StringNullableFilter<"StudentAttendance"> | string | null
    createdAt?: DateTimeFilter<"StudentAttendance"> | Date | string
    session?: XOR<ClassSessionRelationFilter, ClassSessionWhereInput>
    student?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionId_studentId">

  export type StudentAttendanceOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: StudentAttendanceCountOrderByAggregateInput
    _max?: StudentAttendanceMaxOrderByAggregateInput
    _min?: StudentAttendanceMinOrderByAggregateInput
  }

  export type StudentAttendanceScalarWhereWithAggregatesInput = {
    AND?: StudentAttendanceScalarWhereWithAggregatesInput | StudentAttendanceScalarWhereWithAggregatesInput[]
    OR?: StudentAttendanceScalarWhereWithAggregatesInput[]
    NOT?: StudentAttendanceScalarWhereWithAggregatesInput | StudentAttendanceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentAttendance"> | string
    sessionId?: StringWithAggregatesFilter<"StudentAttendance"> | string
    studentId?: StringWithAggregatesFilter<"StudentAttendance"> | string
    status?: EnumAttendanceStatusWithAggregatesFilter<"StudentAttendance"> | $Enums.AttendanceStatus
    notes?: StringNullableWithAggregatesFilter<"StudentAttendance"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"StudentAttendance"> | Date | string
  }

  export type TeacherCourseAssignmentWhereInput = {
    AND?: TeacherCourseAssignmentWhereInput | TeacherCourseAssignmentWhereInput[]
    OR?: TeacherCourseAssignmentWhereInput[]
    NOT?: TeacherCourseAssignmentWhereInput | TeacherCourseAssignmentWhereInput[]
    id?: StringFilter<"TeacherCourseAssignment"> | string
    teacherId?: StringFilter<"TeacherCourseAssignment"> | string
    courseId?: StringFilter<"TeacherCourseAssignment"> | string
    assignedById?: StringFilter<"TeacherCourseAssignment"> | string
    assignedDate?: DateTimeFilter<"TeacherCourseAssignment"> | Date | string
    isActive?: BoolFilter<"TeacherCourseAssignment"> | boolean
    notes?: StringNullableFilter<"TeacherCourseAssignment"> | string | null
    teacher?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type TeacherCourseAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    teacher?: UserOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    assignedBy?: UserOrderByWithRelationInput
  }

  export type TeacherCourseAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    teacherId_courseId?: TeacherCourseAssignmentTeacherIdCourseIdCompoundUniqueInput
    AND?: TeacherCourseAssignmentWhereInput | TeacherCourseAssignmentWhereInput[]
    OR?: TeacherCourseAssignmentWhereInput[]
    NOT?: TeacherCourseAssignmentWhereInput | TeacherCourseAssignmentWhereInput[]
    teacherId?: StringFilter<"TeacherCourseAssignment"> | string
    courseId?: StringFilter<"TeacherCourseAssignment"> | string
    assignedById?: StringFilter<"TeacherCourseAssignment"> | string
    assignedDate?: DateTimeFilter<"TeacherCourseAssignment"> | Date | string
    isActive?: BoolFilter<"TeacherCourseAssignment"> | boolean
    notes?: StringNullableFilter<"TeacherCourseAssignment"> | string | null
    teacher?: XOR<UserRelationFilter, UserWhereInput>
    course?: XOR<CourseRelationFilter, CourseWhereInput>
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "teacherId_courseId">

  export type TeacherCourseAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: TeacherCourseAssignmentCountOrderByAggregateInput
    _max?: TeacherCourseAssignmentMaxOrderByAggregateInput
    _min?: TeacherCourseAssignmentMinOrderByAggregateInput
  }

  export type TeacherCourseAssignmentScalarWhereWithAggregatesInput = {
    AND?: TeacherCourseAssignmentScalarWhereWithAggregatesInput | TeacherCourseAssignmentScalarWhereWithAggregatesInput[]
    OR?: TeacherCourseAssignmentScalarWhereWithAggregatesInput[]
    NOT?: TeacherCourseAssignmentScalarWhereWithAggregatesInput | TeacherCourseAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeacherCourseAssignment"> | string
    teacherId?: StringWithAggregatesFilter<"TeacherCourseAssignment"> | string
    courseId?: StringWithAggregatesFilter<"TeacherCourseAssignment"> | string
    assignedById?: StringWithAggregatesFilter<"TeacherCourseAssignment"> | string
    assignedDate?: DateTimeWithAggregatesFilter<"TeacherCourseAssignment"> | Date | string
    isActive?: BoolWithAggregatesFilter<"TeacherCourseAssignment"> | boolean
    notes?: StringNullableWithAggregatesFilter<"TeacherCourseAssignment"> | string | null
  }

  export type AdvisoryAssignmentWhereInput = {
    AND?: AdvisoryAssignmentWhereInput | AdvisoryAssignmentWhereInput[]
    OR?: AdvisoryAssignmentWhereInput[]
    NOT?: AdvisoryAssignmentWhereInput | AdvisoryAssignmentWhereInput[]
    id?: StringFilter<"AdvisoryAssignment"> | string
    studentId?: StringFilter<"AdvisoryAssignment"> | string
    advisoryTeacherId?: StringFilter<"AdvisoryAssignment"> | string
    assignedById?: StringFilter<"AdvisoryAssignment"> | string
    assignedDate?: DateTimeFilter<"AdvisoryAssignment"> | Date | string
    isActive?: BoolFilter<"AdvisoryAssignment"> | boolean
    notes?: StringNullableFilter<"AdvisoryAssignment"> | string | null
    student?: XOR<UserRelationFilter, UserWhereInput>
    advisoryTeacher?: XOR<UserRelationFilter, UserWhereInput>
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AdvisoryAssignmentOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    advisoryTeacherId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    student?: UserOrderByWithRelationInput
    advisoryTeacher?: UserOrderByWithRelationInput
    assignedBy?: UserOrderByWithRelationInput
  }

  export type AdvisoryAssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    studentId?: string
    AND?: AdvisoryAssignmentWhereInput | AdvisoryAssignmentWhereInput[]
    OR?: AdvisoryAssignmentWhereInput[]
    NOT?: AdvisoryAssignmentWhereInput | AdvisoryAssignmentWhereInput[]
    advisoryTeacherId?: StringFilter<"AdvisoryAssignment"> | string
    assignedById?: StringFilter<"AdvisoryAssignment"> | string
    assignedDate?: DateTimeFilter<"AdvisoryAssignment"> | Date | string
    isActive?: BoolFilter<"AdvisoryAssignment"> | boolean
    notes?: StringNullableFilter<"AdvisoryAssignment"> | string | null
    student?: XOR<UserRelationFilter, UserWhereInput>
    advisoryTeacher?: XOR<UserRelationFilter, UserWhereInput>
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "studentId">

  export type AdvisoryAssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    advisoryTeacherId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: AdvisoryAssignmentCountOrderByAggregateInput
    _max?: AdvisoryAssignmentMaxOrderByAggregateInput
    _min?: AdvisoryAssignmentMinOrderByAggregateInput
  }

  export type AdvisoryAssignmentScalarWhereWithAggregatesInput = {
    AND?: AdvisoryAssignmentScalarWhereWithAggregatesInput | AdvisoryAssignmentScalarWhereWithAggregatesInput[]
    OR?: AdvisoryAssignmentScalarWhereWithAggregatesInput[]
    NOT?: AdvisoryAssignmentScalarWhereWithAggregatesInput | AdvisoryAssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AdvisoryAssignment"> | string
    studentId?: StringWithAggregatesFilter<"AdvisoryAssignment"> | string
    advisoryTeacherId?: StringWithAggregatesFilter<"AdvisoryAssignment"> | string
    assignedById?: StringWithAggregatesFilter<"AdvisoryAssignment"> | string
    assignedDate?: DateTimeWithAggregatesFilter<"AdvisoryAssignment"> | Date | string
    isActive?: BoolWithAggregatesFilter<"AdvisoryAssignment"> | boolean
    notes?: StringNullableWithAggregatesFilter<"AdvisoryAssignment"> | string | null
  }

  export type FileAttachmentWhereInput = {
    AND?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    OR?: FileAttachmentWhereInput[]
    NOT?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    id?: StringFilter<"FileAttachment"> | string
    filename?: StringFilter<"FileAttachment"> | string
    originalName?: StringFilter<"FileAttachment"> | string
    mimeType?: StringFilter<"FileAttachment"> | string
    fileSize?: BigIntFilter<"FileAttachment"> | bigint | number
    path?: StringFilter<"FileAttachment"> | string
    uploadedById?: StringFilter<"FileAttachment"> | string
    createdAt?: DateTimeFilter<"FileAttachment"> | Date | string
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    courseMaterials?: CourseMaterialListRelationFilter
    assignmentAttachments?: AssignmentListRelationFilter
    submissionFiles?: AssignmentSubmissionListRelationFilter
  }

  export type FileAttachmentOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    path?: SortOrder
    uploadedById?: SortOrder
    createdAt?: SortOrder
    uploadedBy?: UserOrderByWithRelationInput
    courseMaterials?: CourseMaterialOrderByRelationAggregateInput
    assignmentAttachments?: AssignmentOrderByRelationAggregateInput
    submissionFiles?: AssignmentSubmissionOrderByRelationAggregateInput
  }

  export type FileAttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    OR?: FileAttachmentWhereInput[]
    NOT?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    filename?: StringFilter<"FileAttachment"> | string
    originalName?: StringFilter<"FileAttachment"> | string
    mimeType?: StringFilter<"FileAttachment"> | string
    fileSize?: BigIntFilter<"FileAttachment"> | bigint | number
    path?: StringFilter<"FileAttachment"> | string
    uploadedById?: StringFilter<"FileAttachment"> | string
    createdAt?: DateTimeFilter<"FileAttachment"> | Date | string
    uploadedBy?: XOR<UserRelationFilter, UserWhereInput>
    courseMaterials?: CourseMaterialListRelationFilter
    assignmentAttachments?: AssignmentListRelationFilter
    submissionFiles?: AssignmentSubmissionListRelationFilter
  }, "id">

  export type FileAttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    path?: SortOrder
    uploadedById?: SortOrder
    createdAt?: SortOrder
    _count?: FileAttachmentCountOrderByAggregateInput
    _avg?: FileAttachmentAvgOrderByAggregateInput
    _max?: FileAttachmentMaxOrderByAggregateInput
    _min?: FileAttachmentMinOrderByAggregateInput
    _sum?: FileAttachmentSumOrderByAggregateInput
  }

  export type FileAttachmentScalarWhereWithAggregatesInput = {
    AND?: FileAttachmentScalarWhereWithAggregatesInput | FileAttachmentScalarWhereWithAggregatesInput[]
    OR?: FileAttachmentScalarWhereWithAggregatesInput[]
    NOT?: FileAttachmentScalarWhereWithAggregatesInput | FileAttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FileAttachment"> | string
    filename?: StringWithAggregatesFilter<"FileAttachment"> | string
    originalName?: StringWithAggregatesFilter<"FileAttachment"> | string
    mimeType?: StringWithAggregatesFilter<"FileAttachment"> | string
    fileSize?: BigIntWithAggregatesFilter<"FileAttachment"> | bigint | number
    path?: StringWithAggregatesFilter<"FileAttachment"> | string
    uploadedById?: StringWithAggregatesFilter<"FileAttachment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FileAttachment"> | Date | string
  }

  export type PageConfigurationWhereInput = {
    AND?: PageConfigurationWhereInput | PageConfigurationWhereInput[]
    OR?: PageConfigurationWhereInput[]
    NOT?: PageConfigurationWhereInput | PageConfigurationWhereInput[]
    id?: StringFilter<"PageConfiguration"> | string
    title?: StringFilter<"PageConfiguration"> | string
    description?: StringNullableFilter<"PageConfiguration"> | string | null
    userType?: EnumUserRoleNullableFilter<"PageConfiguration"> | $Enums.UserRole | null
    layoutType?: StringFilter<"PageConfiguration"> | string
    layoutClass?: StringNullableFilter<"PageConfiguration"> | string | null
    sections?: JsonFilter<"PageConfiguration">
    requiresAuth?: BoolFilter<"PageConfiguration"> | boolean
    permissions?: StringNullableListFilter<"PageConfiguration">
    requiresSupervisor?: BoolFilter<"PageConfiguration"> | boolean
    createdAt?: DateTimeFilter<"PageConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"PageConfiguration"> | Date | string
  }

  export type PageConfigurationOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    userType?: SortOrderInput | SortOrder
    layoutType?: SortOrder
    layoutClass?: SortOrderInput | SortOrder
    sections?: SortOrder
    requiresAuth?: SortOrder
    permissions?: SortOrder
    requiresSupervisor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageConfigurationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PageConfigurationWhereInput | PageConfigurationWhereInput[]
    OR?: PageConfigurationWhereInput[]
    NOT?: PageConfigurationWhereInput | PageConfigurationWhereInput[]
    title?: StringFilter<"PageConfiguration"> | string
    description?: StringNullableFilter<"PageConfiguration"> | string | null
    userType?: EnumUserRoleNullableFilter<"PageConfiguration"> | $Enums.UserRole | null
    layoutType?: StringFilter<"PageConfiguration"> | string
    layoutClass?: StringNullableFilter<"PageConfiguration"> | string | null
    sections?: JsonFilter<"PageConfiguration">
    requiresAuth?: BoolFilter<"PageConfiguration"> | boolean
    permissions?: StringNullableListFilter<"PageConfiguration">
    requiresSupervisor?: BoolFilter<"PageConfiguration"> | boolean
    createdAt?: DateTimeFilter<"PageConfiguration"> | Date | string
    updatedAt?: DateTimeFilter<"PageConfiguration"> | Date | string
  }, "id">

  export type PageConfigurationOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    userType?: SortOrderInput | SortOrder
    layoutType?: SortOrder
    layoutClass?: SortOrderInput | SortOrder
    sections?: SortOrder
    requiresAuth?: SortOrder
    permissions?: SortOrder
    requiresSupervisor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PageConfigurationCountOrderByAggregateInput
    _max?: PageConfigurationMaxOrderByAggregateInput
    _min?: PageConfigurationMinOrderByAggregateInput
  }

  export type PageConfigurationScalarWhereWithAggregatesInput = {
    AND?: PageConfigurationScalarWhereWithAggregatesInput | PageConfigurationScalarWhereWithAggregatesInput[]
    OR?: PageConfigurationScalarWhereWithAggregatesInput[]
    NOT?: PageConfigurationScalarWhereWithAggregatesInput | PageConfigurationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PageConfiguration"> | string
    title?: StringWithAggregatesFilter<"PageConfiguration"> | string
    description?: StringNullableWithAggregatesFilter<"PageConfiguration"> | string | null
    userType?: EnumUserRoleNullableWithAggregatesFilter<"PageConfiguration"> | $Enums.UserRole | null
    layoutType?: StringWithAggregatesFilter<"PageConfiguration"> | string
    layoutClass?: StringNullableWithAggregatesFilter<"PageConfiguration"> | string | null
    sections?: JsonWithAggregatesFilter<"PageConfiguration">
    requiresAuth?: BoolWithAggregatesFilter<"PageConfiguration"> | boolean
    permissions?: StringNullableListFilter<"PageConfiguration">
    requiresSupervisor?: BoolWithAggregatesFilter<"PageConfiguration"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"PageConfiguration"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PageConfiguration"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    courseId?: StringNullableFilter<"Notification"> | string | null
    assignmentId?: StringNullableFilter<"Notification"> | string | null
    gradeId?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    gradeId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    courseId?: StringNullableFilter<"Notification"> | string | null
    assignmentId?: StringNullableFilter<"Notification"> | string | null
    gradeId?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    assignmentId?: SortOrderInput | SortOrder
    gradeId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    priority?: EnumNotificationPriorityWithAggregatesFilter<"Notification"> | $Enums.NotificationPriority
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    courseId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    assignmentId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    gradeId?: StringNullableWithAggregatesFilter<"Notification"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Notification">
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type SystemSettingWhereInput = {
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    id?: StringFilter<"SystemSetting"> | string
    key?: StringFilter<"SystemSetting"> | string
    value?: StringFilter<"SystemSetting"> | string
    type?: StringFilter<"SystemSetting"> | string
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }

  export type SystemSettingOrderByWithRelationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    key?: string
    AND?: SystemSettingWhereInput | SystemSettingWhereInput[]
    OR?: SystemSettingWhereInput[]
    NOT?: SystemSettingWhereInput | SystemSettingWhereInput[]
    value?: StringFilter<"SystemSetting"> | string
    type?: StringFilter<"SystemSetting"> | string
    createdAt?: DateTimeFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SystemSetting"> | Date | string
  }, "id" | "key">

  export type SystemSettingOrderByWithAggregationInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemSettingCountOrderByAggregateInput
    _max?: SystemSettingMaxOrderByAggregateInput
    _min?: SystemSettingMinOrderByAggregateInput
  }

  export type SystemSettingScalarWhereWithAggregatesInput = {
    AND?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    OR?: SystemSettingScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingScalarWhereWithAggregatesInput | SystemSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemSetting"> | string
    key?: StringWithAggregatesFilter<"SystemSetting"> | string
    value?: StringWithAggregatesFilter<"SystemSetting"> | string
    type?: StringWithAggregatesFilter<"SystemSetting"> | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSetting"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    resource?: StringWithAggregatesFilter<"AuditLog"> | string
    resourceId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    token?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    isActive?: BoolWithAggregatesFilter<"Session"> | boolean
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
    advisoryTeacher?: UserCreateNestedOneWithoutAdvisoryStudentsInput
  }

  export type UserProfileUncheckedCreateInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    advisoryTeacherId?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
    advisoryTeacher?: UserUpdateOneWithoutAdvisoryStudentsNestedInput
  }

  export type UserProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    advisoryTeacherId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileCreateManyInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    advisoryTeacherId?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    advisoryTeacherId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityCreateInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutUserActivityInput
  }

  export type UserActivityUncheckedCreateInput = {
    id?: string
    userId: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUserActivityNestedInput
  }

  export type UserActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityCreateManyInput = {
    id?: string
    userId: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    rolePermissions?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
    rolePermissions?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    rolePermissions?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateInput = {
    id?: string
    role: $Enums.UserRole
    requiresSupervisor?: boolean
    permission: PermissionCreateNestedOneWithoutRolePermissionsInput
  }

  export type RolePermissionUncheckedCreateInput = {
    id?: string
    role: $Enums.UserRole
    permissionId: string
    requiresSupervisor?: boolean
  }

  export type RolePermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
    permission?: PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permissionId?: StringFieldUpdateOperationsInput | string
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionCreateManyInput = {
    id?: string
    role: $Enums.UserRole
    permissionId: string
    requiresSupervisor?: boolean
  }

  export type RolePermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permissionId?: StringFieldUpdateOperationsInput | string
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentHead?: UserCreateNestedOneWithoutManagedDepartmentsInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentHeadId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentHead?: UserUpdateOneWithoutManagedDepartmentsNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentHeadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentHeadId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentHeadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseCreateInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateInput = {
    id?: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutStudentEnrollmentsInput
    course: CourseCreateNestedOneWithoutEnrollmentsInput
    enrolledBy: UserCreateNestedOneWithoutEnrollmentsManagedInput
  }

  export type EnrollmentUncheckedCreateInput = {
    id?: string
    studentId: string
    courseId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutStudentEnrollmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    enrolledBy?: UserUpdateOneRequiredWithoutEnrollmentsManagedNestedInput
  }

  export type EnrollmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyInput = {
    id?: string
    studentId: string
    courseId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentCreateInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssignmentsInput
    submissions?: AssignmentSubmissionCreateNestedManyWithoutAssignmentInput
    grades?: GradeCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    grades?: GradeUncheckedCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput
    submissions?: AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentCreateManyInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentSubmissionCreateInput = {
    id?: string
    submittedAt?: Date | string
    textContent?: string | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutAssignmentSubmissionsInput
    files?: FileAttachmentCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionUncheckedCreateInput = {
    id?: string
    assignmentId: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeUncheckedCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutAssignmentSubmissionsNestedInput
    files?: FileAttachmentUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUncheckedUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionCreateManyInput = {
    id?: string
    assignmentId: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
  }

  export type AssignmentSubmissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentSubmissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeCreateInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutGradesInput
    course?: CourseCreateNestedOneWithoutGradesInput
    assignment?: AssignmentCreateNestedOneWithoutGradesInput
    submission?: AssignmentSubmissionCreateNestedOneWithoutGradeInput
    gradedBy: UserCreateNestedOneWithoutGradedAssignmentsInput
  }

  export type GradeUncheckedCreateInput = {
    id?: string
    studentId: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutGradesNestedInput
    course?: CourseUpdateOneWithoutGradesNestedInput
    assignment?: AssignmentUpdateOneWithoutGradesNestedInput
    submission?: AssignmentSubmissionUpdateOneWithoutGradeNestedInput
    gradedBy?: UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput
  }

  export type GradeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeCreateManyInput = {
    id?: string
    studentId: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialCreateInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCourseMaterialsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedMaterialsInput
    file?: FileAttachmentCreateNestedOneWithoutCourseMaterialsInput
  }

  export type CourseMaterialUncheckedCreateInput = {
    id?: string
    courseId: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCourseMaterialsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedMaterialsNestedInput
    file?: FileAttachmentUpdateOneWithoutCourseMaterialsNestedInput
  }

  export type CourseMaterialUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialCreateManyInput = {
    id?: string
    courseId: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizCreateInput = {
    id?: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutQuizzesInput
    createdBy: UserCreateNestedOneWithoutCreatedQuizzesInput
    attempts?: QuizAttemptCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: QuizAttemptUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutQuizzesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedQuizzesNestedInput
    attempts?: QuizAttemptUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizCreateManyInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptCreateInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
    quiz: QuizCreateNestedOneWithoutAttemptsInput
    student: UserCreateNestedOneWithoutQuizAttemptsInput
  }

  export type QuizAttemptUncheckedCreateInput = {
    id?: string
    quizId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
    quiz?: QuizUpdateOneRequiredWithoutAttemptsNestedInput
    student?: UserUpdateOneRequiredWithoutQuizAttemptsNestedInput
  }

  export type QuizAttemptUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptCreateManyInput = {
    id?: string
    quizId: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type CourseAnnouncementCreateInput = {
    id?: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAnnouncementsInput
    author: UserCreateNestedOneWithoutCourseAnnouncementsInput
  }

  export type CourseAnnouncementUncheckedCreateInput = {
    id?: string
    courseId: string
    authorId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAnnouncementsNestedInput
    author?: UserUpdateOneRequiredWithoutCourseAnnouncementsNestedInput
  }

  export type CourseAnnouncementUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementCreateManyInput = {
    id?: string
    courseId: string
    authorId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSessionCreateInput = {
    id?: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutClassSessionsInput
    attendances?: StudentAttendanceCreateNestedManyWithoutSessionInput
  }

  export type ClassSessionUncheckedCreateInput = {
    id?: string
    courseId: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ClassSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutClassSessionsNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutSessionNestedInput
  }

  export type ClassSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ClassSessionCreateManyInput = {
    id?: string
    courseId: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceCreateInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
    session: ClassSessionCreateNestedOneWithoutAttendancesInput
    student: UserCreateNestedOneWithoutAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateInput = {
    id?: string
    sessionId: string
    studentId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type StudentAttendanceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ClassSessionUpdateOneRequiredWithoutAttendancesNestedInput
    student?: UserUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceCreateManyInput = {
    id?: string
    sessionId: string
    studentId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type StudentAttendanceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCourseAssignmentCreateInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    teacher: UserCreateNestedOneWithoutTeacherCourseAssignmentsInput
    course: CourseCreateNestedOneWithoutTeacherAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignedTeachersInput
  }

  export type TeacherCourseAssignmentUncheckedCreateInput = {
    id?: string
    teacherId: string
    courseId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: UserUpdateOneRequiredWithoutTeacherCourseAssignmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutTeacherAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedTeachersNestedInput
  }

  export type TeacherCourseAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentCreateManyInput = {
    id?: string
    teacherId: string
    courseId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentCreateInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    student: UserCreateNestedOneWithoutStudentAdvisoryAssignmentInput
    advisoryTeacher: UserCreateNestedOneWithoutAdvisoryAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignedAdvisoriesInput
  }

  export type AdvisoryAssignmentUncheckedCreateInput = {
    id?: string
    studentId: string
    advisoryTeacherId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    student?: UserUpdateOneRequiredWithoutStudentAdvisoryAssignmentNestedInput
    advisoryTeacher?: UserUpdateOneRequiredWithoutAdvisoryAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedAdvisoriesNestedInput
  }

  export type AdvisoryAssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    advisoryTeacherId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentCreateManyInput = {
    id?: string
    studentId: string
    advisoryTeacherId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    advisoryTeacherId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileAttachmentCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    uploadedById: string
    createdAt?: Date | string
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentUncheckedCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUncheckedUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentCreateManyInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    uploadedById: string
    createdAt?: Date | string
  }

  export type FileAttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageConfigurationCreateInput = {
    id?: string
    title: string
    description?: string | null
    userType?: $Enums.UserRole | null
    layoutType?: string
    layoutClass?: string | null
    sections: JsonNullValueInput | InputJsonValue
    requiresAuth?: boolean
    permissions?: PageConfigurationCreatepermissionsInput | string[]
    requiresSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageConfigurationUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    userType?: $Enums.UserRole | null
    layoutType?: string
    layoutClass?: string | null
    sections: JsonNullValueInput | InputJsonValue
    requiresAuth?: boolean
    permissions?: PageConfigurationCreatepermissionsInput | string[]
    requiresSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageConfigurationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userType?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    layoutType?: StringFieldUpdateOperationsInput | string
    layoutClass?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: JsonNullValueInput | InputJsonValue
    requiresAuth?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PageConfigurationUpdatepermissionsInput | string[]
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageConfigurationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userType?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    layoutType?: StringFieldUpdateOperationsInput | string
    layoutClass?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: JsonNullValueInput | InputJsonValue
    requiresAuth?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PageConfigurationUpdatepermissionsInput | string[]
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageConfigurationCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    userType?: $Enums.UserRole | null
    layoutType?: string
    layoutClass?: string | null
    sections: JsonNullValueInput | InputJsonValue
    requiresAuth?: boolean
    permissions?: PageConfigurationCreatepermissionsInput | string[]
    requiresSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PageConfigurationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userType?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    layoutType?: StringFieldUpdateOperationsInput | string
    layoutClass?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: JsonNullValueInput | InputJsonValue
    requiresAuth?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PageConfigurationUpdatepermissionsInput | string[]
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PageConfigurationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userType?: NullableEnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole | null
    layoutType?: StringFieldUpdateOperationsInput | string
    layoutClass?: NullableStringFieldUpdateOperationsInput | string | null
    sections?: JsonNullValueInput | InputJsonValue
    requiresAuth?: BoolFieldUpdateOperationsInput | boolean
    permissions?: PageConfigurationUpdatepermissionsInput | string[]
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUncheckedCreateInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingCreateManyInput = {
    id?: string
    key: string
    value: string
    type?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: string | null
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id?: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserProfileNullableRelationFilter = {
    is?: UserProfileWhereInput | null
    isNot?: UserProfileWhereInput | null
  }

  export type EnrollmentListRelationFilter = {
    every?: EnrollmentWhereInput
    some?: EnrollmentWhereInput
    none?: EnrollmentWhereInput
  }

  export type AssignmentSubmissionListRelationFilter = {
    every?: AssignmentSubmissionWhereInput
    some?: AssignmentSubmissionWhereInput
    none?: AssignmentSubmissionWhereInput
  }

  export type QuizAttemptListRelationFilter = {
    every?: QuizAttemptWhereInput
    some?: QuizAttemptWhereInput
    none?: QuizAttemptWhereInput
  }

  export type GradeListRelationFilter = {
    every?: GradeWhereInput
    some?: GradeWhereInput
    none?: GradeWhereInput
  }

  export type StudentAttendanceListRelationFilter = {
    every?: StudentAttendanceWhereInput
    some?: StudentAttendanceWhereInput
    none?: StudentAttendanceWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type UserProfileListRelationFilter = {
    every?: UserProfileWhereInput
    some?: UserProfileWhereInput
    none?: UserProfileWhereInput
  }

  export type CourseAnnouncementListRelationFilter = {
    every?: CourseAnnouncementWhereInput
    some?: CourseAnnouncementWhereInput
    none?: CourseAnnouncementWhereInput
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type QuizListRelationFilter = {
    every?: QuizWhereInput
    some?: QuizWhereInput
    none?: QuizWhereInput
  }

  export type CourseMaterialListRelationFilter = {
    every?: CourseMaterialWhereInput
    some?: CourseMaterialWhereInput
    none?: CourseMaterialWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type TeacherCourseAssignmentListRelationFilter = {
    every?: TeacherCourseAssignmentWhereInput
    some?: TeacherCourseAssignmentWhereInput
    none?: TeacherCourseAssignmentWhereInput
  }

  export type AdvisoryAssignmentListRelationFilter = {
    every?: AdvisoryAssignmentWhereInput
    some?: AdvisoryAssignmentWhereInput
    none?: AdvisoryAssignmentWhereInput
  }

  export type AdvisoryAssignmentNullableRelationFilter = {
    is?: AdvisoryAssignmentWhereInput | null
    isNot?: AdvisoryAssignmentWhereInput | null
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserActivityListRelationFilter = {
    every?: UserActivityWhereInput
    some?: UserActivityWhereInput
    none?: UserActivityWhereInput
  }

  export type FileAttachmentListRelationFilter = {
    every?: FileAttachmentWhereInput
    some?: FileAttachmentWhereInput
    none?: FileAttachmentWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type EnrollmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentSubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GradeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentAttendanceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseAnnouncementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuizOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseMaterialOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCourseAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdvisoryAssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    avatar?: SortOrder
    isSupervisor?: SortOrder
    teacherRegisteredById?: SortOrder
    studentRegisteredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    avatar?: SortOrder
    isSupervisor?: SortOrder
    teacherRegisteredById?: SortOrder
    studentRegisteredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    avatar?: SortOrder
    isSupervisor?: SortOrder
    teacherRegisteredById?: SortOrder
    studentRegisteredById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumThemeModeFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeMode | EnumThemeModeFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeModeFilter<$PrismaModel> | $Enums.ThemeMode
  }

  export type EnumVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.Visibility | EnumVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumVisibilityFilter<$PrismaModel> | $Enums.Visibility
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserProfileCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    phone?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    studentId?: SortOrder
    grade?: SortOrder
    gpa?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    major?: SortOrder
    minor?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    specialization?: SortOrder
    officeLocation?: SortOrder
    officeHours?: SortOrder
    advisoryTeacherId?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    smsNotifications?: SortOrder
    profileVisibility?: SortOrder
    showEmail?: SortOrder
    showPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileAvgOrderByAggregateInput = {
    gpa?: SortOrder
  }

  export type UserProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    phone?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    studentId?: SortOrder
    grade?: SortOrder
    gpa?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    major?: SortOrder
    minor?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    officeLocation?: SortOrder
    officeHours?: SortOrder
    advisoryTeacherId?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    smsNotifications?: SortOrder
    profileVisibility?: SortOrder
    showEmail?: SortOrder
    showPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    dateOfBirth?: SortOrder
    phone?: SortOrder
    street?: SortOrder
    city?: SortOrder
    state?: SortOrder
    zipCode?: SortOrder
    country?: SortOrder
    studentId?: SortOrder
    grade?: SortOrder
    gpa?: SortOrder
    enrollmentDate?: SortOrder
    graduationDate?: SortOrder
    major?: SortOrder
    minor?: SortOrder
    employeeId?: SortOrder
    department?: SortOrder
    position?: SortOrder
    hireDate?: SortOrder
    officeLocation?: SortOrder
    officeHours?: SortOrder
    advisoryTeacherId?: SortOrder
    emergencyContactName?: SortOrder
    emergencyContactRelationship?: SortOrder
    emergencyContactPhone?: SortOrder
    emergencyContactEmail?: SortOrder
    theme?: SortOrder
    language?: SortOrder
    timezone?: SortOrder
    emailNotifications?: SortOrder
    pushNotifications?: SortOrder
    smsNotifications?: SortOrder
    profileVisibility?: SortOrder
    showEmail?: SortOrder
    showPhone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileSumOrderByAggregateInput = {
    gpa?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumThemeModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeMode | EnumThemeModeFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeModeWithAggregatesFilter<$PrismaModel> | $Enums.ThemeMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeModeFilter<$PrismaModel>
    _max?: NestedEnumThemeModeFilter<$PrismaModel>
  }

  export type EnumVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Visibility | EnumVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.Visibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVisibilityFilter<$PrismaModel>
    _max?: NestedEnumVisibilityFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserActivityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UserActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type UserActivityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRolePermissionIdCompoundUniqueInput = {
    role: $Enums.UserRole
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    permissionId?: SortOrder
    requiresSupervisor?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    permissionId?: SortOrder
    requiresSupervisor?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    permissionId?: SortOrder
    requiresSupervisor?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentHeadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentHeadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentHeadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumCourseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseStatus | EnumCourseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseStatusFilter<$PrismaModel> | $Enums.CourseStatus
  }

  export type EnumCourseLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseLevel | EnumCourseLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseLevelFilter<$PrismaModel> | $Enums.CourseLevel
  }

  export type DepartmentRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type ClassSessionListRelationFilter = {
    every?: ClassSessionWhereInput
    some?: ClassSessionWhereInput
    none?: ClassSessionWhereInput
  }

  export type ClassSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    scheduleDays?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    building?: SortOrder
    room?: SortOrder
    createdById?: SortOrder
    instructorId?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
    status?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    enrollmentDeadline?: SortOrder
    syllabusUrl?: SortOrder
    studyPlan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    credits?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    building?: SortOrder
    room?: SortOrder
    createdById?: SortOrder
    instructorId?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
    status?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    enrollmentDeadline?: SortOrder
    syllabusUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    description?: SortOrder
    credits?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    location?: SortOrder
    building?: SortOrder
    room?: SortOrder
    createdById?: SortOrder
    instructorId?: SortOrder
    semester?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
    status?: SortOrder
    category?: SortOrder
    departmentId?: SortOrder
    level?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    enrollmentDeadline?: SortOrder
    syllabusUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    credits?: SortOrder
    year?: SortOrder
    capacity?: SortOrder
    enrolled?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumCourseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseStatus | EnumCourseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CourseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseStatusFilter<$PrismaModel>
    _max?: NestedEnumCourseStatusFilter<$PrismaModel>
  }

  export type EnumCourseLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseLevel | EnumCourseLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseLevelWithAggregatesFilter<$PrismaModel> | $Enums.CourseLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseLevelFilter<$PrismaModel>
    _max?: NestedEnumCourseLevelFilter<$PrismaModel>
  }

  export type EnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type EnrollmentStudentIdCourseIdCompoundUniqueInput = {
    studentId: string
    courseId: string
  }

  export type EnrollmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    enrolledById?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    finalGrade?: SortOrder
    finalPoints?: SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrder
    attendance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentAvgOrderByAggregateInput = {
    finalPoints?: SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrder
    attendance?: SortOrder
  }

  export type EnrollmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    enrolledById?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    finalGrade?: SortOrder
    finalPoints?: SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrder
    attendance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    enrolledById?: SortOrder
    enrollmentDate?: SortOrder
    status?: SortOrder
    finalGrade?: SortOrder
    finalPoints?: SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrder
    attendance?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnrollmentSumOrderByAggregateInput = {
    finalPoints?: SortOrder
    completed?: SortOrder
    total?: SortOrder
    currentGrade?: SortOrder
    attendance?: SortOrder
  }

  export type EnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type EnumAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeFilter<$PrismaModel> | $Enums.AssignmentType
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    assignedDate?: SortOrder
    dueDate?: SortOrder
    maxPoints?: SortOrder
    isGroupWork?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    maxPoints?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    assignedDate?: SortOrder
    dueDate?: SortOrder
    maxPoints?: SortOrder
    isGroupWork?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    assignedDate?: SortOrder
    dueDate?: SortOrder
    maxPoints?: SortOrder
    isGroupWork?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    maxPoints?: SortOrder
  }

  export type EnumAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAssignmentTypeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type AssignmentRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type GradeNullableRelationFilter = {
    is?: GradeWhereInput | null
    isNot?: GradeWhereInput | null
  }

  export type AssignmentSubmissionAssignmentIdStudentIdCompoundUniqueInput = {
    assignmentId: string
    studentId: string
  }

  export type AssignmentSubmissionCountOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    submittedAt?: SortOrder
    textContent?: SortOrder
  }

  export type AssignmentSubmissionMaxOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    submittedAt?: SortOrder
    textContent?: SortOrder
  }

  export type AssignmentSubmissionMinOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    submittedAt?: SortOrder
    textContent?: SortOrder
  }

  export type CourseNullableRelationFilter = {
    is?: CourseWhereInput | null
    isNot?: CourseWhereInput | null
  }

  export type AssignmentNullableRelationFilter = {
    is?: AssignmentWhereInput | null
    isNot?: AssignmentWhereInput | null
  }

  export type AssignmentSubmissionNullableRelationFilter = {
    is?: AssignmentSubmissionWhereInput | null
    isNot?: AssignmentSubmissionWhereInput | null
  }

  export type GradeCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    letterGrade?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrder
    gradedById?: SortOrder
    gradedDate?: SortOrder
    gradingPeriod?: SortOrder
    feedback?: SortOrder
    isExtraCredit?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeAvgOrderByAggregateInput = {
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrder
    weight?: SortOrder
  }

  export type GradeMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    letterGrade?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrder
    gradedById?: SortOrder
    gradedDate?: SortOrder
    gradingPeriod?: SortOrder
    feedback?: SortOrder
    isExtraCredit?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    submissionId?: SortOrder
    letterGrade?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrder
    gradedById?: SortOrder
    gradedDate?: SortOrder
    gradingPeriod?: SortOrder
    feedback?: SortOrder
    isExtraCredit?: SortOrder
    weight?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GradeSumOrderByAggregateInput = {
    score?: SortOrder
    maxPoints?: SortOrder
    percentage?: SortOrder
    weight?: SortOrder
  }

  export type EnumMaterialTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeFilter<$PrismaModel> | $Enums.MaterialType
  }

  export type FileAttachmentNullableRelationFilter = {
    is?: FileAttachmentWhereInput | null
    isNot?: FileAttachmentWhereInput | null
  }

  export type CourseMaterialCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    uploadedById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    uploadDate?: SortOrder
    isRequired?: SortOrder
    fileId?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMaterialMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    uploadedById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    uploadDate?: SortOrder
    isRequired?: SortOrder
    fileId?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMaterialMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    uploadedById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    type?: SortOrder
    uploadDate?: SortOrder
    isRequired?: SortOrder
    fileId?: SortOrder
    url?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumMaterialTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaterialType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaterialTypeFilter<$PrismaModel>
    _max?: NestedEnumMaterialTypeFilter<$PrismaModel>
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type QuizCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    dueDate?: SortOrder
    isTimed?: SortOrder
    attemptsAllowed?: SortOrder
    questionsData?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizAvgOrderByAggregateInput = {
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    attemptsAllowed?: SortOrder
  }

  export type QuizMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    dueDate?: SortOrder
    isTimed?: SortOrder
    attemptsAllowed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    createdById?: SortOrder
    title?: SortOrder
    description?: SortOrder
    duration?: SortOrder
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    dueDate?: SortOrder
    isTimed?: SortOrder
    attemptsAllowed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QuizSumOrderByAggregateInput = {
    totalQuestions?: SortOrder
    maxPoints?: SortOrder
    attemptsAllowed?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type QuizRelationFilter = {
    is?: QuizWhereInput
    isNot?: QuizWhereInput
  }

  export type QuizAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
    answers?: SortOrder
  }

  export type QuizAttemptAvgOrderByAggregateInput = {
    score?: SortOrder
    maxPoints?: SortOrder
  }

  export type QuizAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
  }

  export type QuizAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    quizId?: SortOrder
    studentId?: SortOrder
    startedAt?: SortOrder
    submittedAt?: SortOrder
    score?: SortOrder
    maxPoints?: SortOrder
  }

  export type QuizAttemptSumOrderByAggregateInput = {
    score?: SortOrder
    maxPoints?: SortOrder
  }

  export type EnumAnnouncementPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnouncementPriority | EnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumAnnouncementPriorityFilter<$PrismaModel> | $Enums.AnnouncementPriority
  }

  export type CourseAnnouncementCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    isImportant?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseAnnouncementMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    isImportant?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseAnnouncementMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    authorId?: SortOrder
    title?: SortOrder
    content?: SortOrder
    priority?: SortOrder
    isImportant?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAnnouncementPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnouncementPriority | EnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumAnnouncementPriorityWithAggregatesFilter<$PrismaModel> | $Enums.AnnouncementPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnnouncementPriorityFilter<$PrismaModel>
    _max?: NestedEnumAnnouncementPriorityFilter<$PrismaModel>
  }

  export type ClassSessionCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    date?: SortOrder
    topic?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    cancelled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    date?: SortOrder
    topic?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    cancelled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ClassSessionMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    date?: SortOrder
    topic?: SortOrder
    location?: SortOrder
    notes?: SortOrder
    cancelled?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type ClassSessionRelationFilter = {
    is?: ClassSessionWhereInput
    isNot?: ClassSessionWhereInput
  }

  export type StudentAttendanceSessionIdStudentIdCompoundUniqueInput = {
    sessionId: string
    studentId: string
  }

  export type StudentAttendanceCountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAttendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type StudentAttendanceMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    studentId?: SortOrder
    status?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type TeacherCourseAssignmentTeacherIdCourseIdCompoundUniqueInput = {
    teacherId: string
    courseId: string
  }

  export type TeacherCourseAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type TeacherCourseAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type TeacherCourseAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type AdvisoryAssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    advisoryTeacherId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type AdvisoryAssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    advisoryTeacherId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type AdvisoryAssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    advisoryTeacherId?: SortOrder
    assignedById?: SortOrder
    assignedDate?: SortOrder
    isActive?: SortOrder
    notes?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type FileAttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    path?: SortOrder
    uploadedById?: SortOrder
    createdAt?: SortOrder
  }

  export type FileAttachmentAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type FileAttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    path?: SortOrder
    uploadedById?: SortOrder
    createdAt?: SortOrder
  }

  export type FileAttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    originalName?: SortOrder
    mimeType?: SortOrder
    fileSize?: SortOrder
    path?: SortOrder
    uploadedById?: SortOrder
    createdAt?: SortOrder
  }

  export type FileAttachmentSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type EnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type PageConfigurationCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    userType?: SortOrder
    layoutType?: SortOrder
    layoutClass?: SortOrder
    sections?: SortOrder
    requiresAuth?: SortOrder
    permissions?: SortOrder
    requiresSupervisor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageConfigurationMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    userType?: SortOrder
    layoutType?: SortOrder
    layoutClass?: SortOrder
    requiresAuth?: SortOrder
    requiresSupervisor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PageConfigurationMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    userType?: SortOrder
    layoutType?: SortOrder
    layoutClass?: SortOrder
    requiresAuth?: SortOrder
    requiresSupervisor?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    gradeId?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    gradeId?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    type?: SortOrder
    priority?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    courseId?: SortOrder
    assignmentId?: SortOrder
    gradeId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type SystemSettingCountOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemSettingMinOrderByAggregateInput = {
    id?: SortOrder
    key?: SortOrder
    value?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    resource?: SortOrder
    resourceId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    token?: SortOrder
    expiresAt?: SortOrder
    isActive?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type EnrollmentCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssignmentSubmissionCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput> | AssignmentSubmissionCreateWithoutStudentInput[] | AssignmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutStudentInput | AssignmentSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentSubmissionCreateManyStudentInputEnvelope
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type QuizAttemptCreateNestedManyWithoutStudentInput = {
    create?: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput> | QuizAttemptCreateWithoutStudentInput[] | QuizAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutStudentInput | QuizAttemptCreateOrConnectWithoutStudentInput[]
    createMany?: QuizAttemptCreateManyStudentInputEnvelope
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutStudentInput = {
    create?: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput> | GradeCreateWithoutStudentInput[] | GradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentInput | GradeCreateOrConnectWithoutStudentInput[]
    createMany?: GradeCreateManyStudentInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type StudentAttendanceCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutInstructorInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserProfileCreateNestedManyWithoutAdvisoryTeacherInput = {
    create?: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput> | UserProfileCreateWithoutAdvisoryTeacherInput[] | UserProfileUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutAdvisoryTeacherInput | UserProfileCreateOrConnectWithoutAdvisoryTeacherInput[]
    createMany?: UserProfileCreateManyAdvisoryTeacherInputEnvelope
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutGradedByInput = {
    create?: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput> | GradeCreateWithoutGradedByInput[] | GradeUncheckedCreateWithoutGradedByInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutGradedByInput | GradeCreateOrConnectWithoutGradedByInput[]
    createMany?: GradeCreateManyGradedByInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type CourseAnnouncementCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput> | CourseAnnouncementCreateWithoutAuthorInput[] | CourseAnnouncementUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutAuthorInput | CourseAnnouncementCreateOrConnectWithoutAuthorInput[]
    createMany?: CourseAnnouncementCreateManyAuthorInputEnvelope
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type QuizCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput> | QuizCreateWithoutCreatedByInput[] | QuizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCreatedByInput | QuizCreateOrConnectWithoutCreatedByInput[]
    createMany?: QuizCreateManyCreatedByInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type CourseMaterialCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput> | CourseMaterialCreateWithoutUploadedByInput[] | CourseMaterialUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutUploadedByInput | CourseMaterialCreateOrConnectWithoutUploadedByInput[]
    createMany?: CourseMaterialCreateManyUploadedByInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutTeacherRegisteredByInput = {
    create?: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput> | UserCreateWithoutTeacherRegisteredByInput[] | UserUncheckedCreateWithoutTeacherRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherRegisteredByInput | UserCreateOrConnectWithoutTeacherRegisteredByInput[]
    createMany?: UserCreateManyTeacherRegisteredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutStudentRegisteredByInput = {
    create?: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput> | UserCreateWithoutStudentRegisteredByInput[] | UserUncheckedCreateWithoutStudentRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentRegisteredByInput | UserCreateOrConnectWithoutStudentRegisteredByInput[]
    createMany?: UserCreateManyStudentRegisteredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput> | TeacherCourseAssignmentCreateWithoutAssignedByInput[] | TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput | TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: TeacherCourseAssignmentCreateManyAssignedByInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput> | TeacherCourseAssignmentCreateWithoutTeacherInput[] | TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput | TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherCourseAssignmentCreateManyTeacherInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput> | AdvisoryAssignmentCreateWithoutAssignedByInput[] | AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput | AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: AdvisoryAssignmentCreateManyAssignedByInputEnvelope
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput> | AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput[] | AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput | AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput[]
    createMany?: AdvisoryAssignmentCreateManyAdvisoryTeacherInputEnvelope
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentCreateNestedOneWithoutStudentInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutStudentInput
    connect?: AdvisoryAssignmentWhereUniqueInput
  }

  export type DepartmentCreateNestedManyWithoutDepartmentHeadInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput> | DepartmentCreateWithoutDepartmentHeadInput[] | DepartmentUncheckedCreateWithoutDepartmentHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadInput | DepartmentCreateOrConnectWithoutDepartmentHeadInput[]
    createMany?: DepartmentCreateManyDepartmentHeadInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutRegisteredTeachersInput = {
    create?: XOR<UserCreateWithoutRegisteredTeachersInput, UserUncheckedCreateWithoutRegisteredTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredTeachersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRegisteredStudentsInput = {
    create?: XOR<UserCreateWithoutRegisteredStudentsInput, UserUncheckedCreateWithoutRegisteredStudentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredStudentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type FileAttachmentCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput> | FileAttachmentCreateWithoutUploadedByInput[] | FileAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutUploadedByInput | FileAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: FileAttachmentCreateManyUploadedByInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnrollmentCreateNestedManyWithoutEnrolledByInput = {
    create?: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput> | EnrollmentCreateWithoutEnrolledByInput[] | EnrollmentUncheckedCreateWithoutEnrolledByInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrolledByInput | EnrollmentCreateOrConnectWithoutEnrolledByInput[]
    createMany?: EnrollmentCreateManyEnrolledByInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    connect?: UserProfileWhereUniqueInput
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput> | AssignmentSubmissionCreateWithoutStudentInput[] | AssignmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutStudentInput | AssignmentSubmissionCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentSubmissionCreateManyStudentInputEnvelope
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type QuizAttemptUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput> | QuizAttemptCreateWithoutStudentInput[] | QuizAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutStudentInput | QuizAttemptCreateOrConnectWithoutStudentInput[]
    createMany?: QuizAttemptCreateManyStudentInputEnvelope
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput> | GradeCreateWithoutStudentInput[] | GradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentInput | GradeCreateOrConnectWithoutStudentInput[]
    createMany?: GradeCreateManyStudentInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutInstructorInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput = {
    create?: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput> | UserProfileCreateWithoutAdvisoryTeacherInput[] | UserProfileUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutAdvisoryTeacherInput | UserProfileCreateOrConnectWithoutAdvisoryTeacherInput[]
    createMany?: UserProfileCreateManyAdvisoryTeacherInputEnvelope
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutGradedByInput = {
    create?: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput> | GradeCreateWithoutGradedByInput[] | GradeUncheckedCreateWithoutGradedByInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutGradedByInput | GradeCreateOrConnectWithoutGradedByInput[]
    createMany?: GradeCreateManyGradedByInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput> | CourseAnnouncementCreateWithoutAuthorInput[] | CourseAnnouncementUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutAuthorInput | CourseAnnouncementCreateOrConnectWithoutAuthorInput[]
    createMany?: CourseAnnouncementCreateManyAuthorInputEnvelope
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput> | QuizCreateWithoutCreatedByInput[] | QuizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCreatedByInput | QuizCreateOrConnectWithoutCreatedByInput[]
    createMany?: QuizCreateManyCreatedByInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput> | CourseMaterialCreateWithoutUploadedByInput[] | CourseMaterialUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutUploadedByInput | CourseMaterialCreateOrConnectWithoutUploadedByInput[]
    createMany?: CourseMaterialCreateManyUploadedByInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput = {
    create?: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput> | UserCreateWithoutTeacherRegisteredByInput[] | UserUncheckedCreateWithoutTeacherRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherRegisteredByInput | UserCreateOrConnectWithoutTeacherRegisteredByInput[]
    createMany?: UserCreateManyTeacherRegisteredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput = {
    create?: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput> | UserCreateWithoutStudentRegisteredByInput[] | UserUncheckedCreateWithoutStudentRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentRegisteredByInput | UserCreateOrConnectWithoutStudentRegisteredByInput[]
    createMany?: UserCreateManyStudentRegisteredByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput> | TeacherCourseAssignmentCreateWithoutAssignedByInput[] | TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput | TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: TeacherCourseAssignmentCreateManyAssignedByInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput> | TeacherCourseAssignmentCreateWithoutTeacherInput[] | TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput | TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherCourseAssignmentCreateManyTeacherInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput> | AdvisoryAssignmentCreateWithoutAssignedByInput[] | AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput | AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput[]
    createMany?: AdvisoryAssignmentCreateManyAssignedByInputEnvelope
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput> | AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput[] | AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput | AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput[]
    createMany?: AdvisoryAssignmentCreateManyAdvisoryTeacherInputEnvelope
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
  }

  export type AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutStudentInput
    connect?: AdvisoryAssignmentWhereUniqueInput
  }

  export type DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput> | DepartmentCreateWithoutDepartmentHeadInput[] | DepartmentUncheckedCreateWithoutDepartmentHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadInput | DepartmentCreateOrConnectWithoutDepartmentHeadInput[]
    createMany?: DepartmentCreateManyDepartmentHeadInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type UserActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput = {
    create?: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput> | FileAttachmentCreateWithoutUploadedByInput[] | FileAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutUploadedByInput | FileAttachmentCreateOrConnectWithoutUploadedByInput[]
    createMany?: FileAttachmentCreateManyUploadedByInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput = {
    create?: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput> | EnrollmentCreateWithoutEnrolledByInput[] | EnrollmentUncheckedCreateWithoutEnrolledByInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrolledByInput | EnrollmentCreateOrConnectWithoutEnrolledByInput[]
    createMany?: EnrollmentCreateManyEnrolledByInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssignmentSubmissionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput> | AssignmentSubmissionCreateWithoutStudentInput[] | AssignmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutStudentInput | AssignmentSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutStudentInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentSubmissionCreateManyStudentInputEnvelope
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutStudentInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutStudentInput | AssignmentSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type QuizAttemptUpdateManyWithoutStudentNestedInput = {
    create?: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput> | QuizAttemptCreateWithoutStudentInput[] | QuizAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutStudentInput | QuizAttemptCreateOrConnectWithoutStudentInput[]
    upsert?: QuizAttemptUpsertWithWhereUniqueWithoutStudentInput | QuizAttemptUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: QuizAttemptCreateManyStudentInputEnvelope
    set?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    disconnect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    delete?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    update?: QuizAttemptUpdateWithWhereUniqueWithoutStudentInput | QuizAttemptUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: QuizAttemptUpdateManyWithWhereWithoutStudentInput | QuizAttemptUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutStudentNestedInput = {
    create?: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput> | GradeCreateWithoutStudentInput[] | GradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentInput | GradeCreateOrConnectWithoutStudentInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStudentInput | GradeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: GradeCreateManyStudentInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStudentInput | GradeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStudentInput | GradeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type StudentAttendanceUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput | StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput | StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutStudentInput | StudentAttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstructorInput | CourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstructorInput | CourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstructorInput | CourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput = {
    create?: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput> | UserProfileCreateWithoutAdvisoryTeacherInput[] | UserProfileUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutAdvisoryTeacherInput | UserProfileCreateOrConnectWithoutAdvisoryTeacherInput[]
    upsert?: UserProfileUpsertWithWhereUniqueWithoutAdvisoryTeacherInput | UserProfileUpsertWithWhereUniqueWithoutAdvisoryTeacherInput[]
    createMany?: UserProfileCreateManyAdvisoryTeacherInputEnvelope
    set?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    disconnect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    delete?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    update?: UserProfileUpdateWithWhereUniqueWithoutAdvisoryTeacherInput | UserProfileUpdateWithWhereUniqueWithoutAdvisoryTeacherInput[]
    updateMany?: UserProfileUpdateManyWithWhereWithoutAdvisoryTeacherInput | UserProfileUpdateManyWithWhereWithoutAdvisoryTeacherInput[]
    deleteMany?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutGradedByNestedInput = {
    create?: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput> | GradeCreateWithoutGradedByInput[] | GradeUncheckedCreateWithoutGradedByInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutGradedByInput | GradeCreateOrConnectWithoutGradedByInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutGradedByInput | GradeUpsertWithWhereUniqueWithoutGradedByInput[]
    createMany?: GradeCreateManyGradedByInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutGradedByInput | GradeUpdateWithWhereUniqueWithoutGradedByInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutGradedByInput | GradeUpdateManyWithWhereWithoutGradedByInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type CourseAnnouncementUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput> | CourseAnnouncementCreateWithoutAuthorInput[] | CourseAnnouncementUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutAuthorInput | CourseAnnouncementCreateOrConnectWithoutAuthorInput[]
    upsert?: CourseAnnouncementUpsertWithWhereUniqueWithoutAuthorInput | CourseAnnouncementUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CourseAnnouncementCreateManyAuthorInputEnvelope
    set?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    disconnect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    delete?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    update?: CourseAnnouncementUpdateWithWhereUniqueWithoutAuthorInput | CourseAnnouncementUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CourseAnnouncementUpdateManyWithWhereWithoutAuthorInput | CourseAnnouncementUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCreatedByInput | AssignmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCreatedByInput | AssignmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCreatedByInput | AssignmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type QuizUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput> | QuizCreateWithoutCreatedByInput[] | QuizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCreatedByInput | QuizCreateOrConnectWithoutCreatedByInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCreatedByInput | QuizUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: QuizCreateManyCreatedByInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCreatedByInput | QuizUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCreatedByInput | QuizUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type CourseMaterialUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput> | CourseMaterialCreateWithoutUploadedByInput[] | CourseMaterialUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutUploadedByInput | CourseMaterialCreateOrConnectWithoutUploadedByInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutUploadedByInput | CourseMaterialUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: CourseMaterialCreateManyUploadedByInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutUploadedByInput | CourseMaterialUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutUploadedByInput | CourseMaterialUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByInput | CourseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByInput | CourseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByInput | CourseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserUpdateManyWithoutTeacherRegisteredByNestedInput = {
    create?: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput> | UserCreateWithoutTeacherRegisteredByInput[] | UserUncheckedCreateWithoutTeacherRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherRegisteredByInput | UserCreateOrConnectWithoutTeacherRegisteredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherRegisteredByInput | UserUpsertWithWhereUniqueWithoutTeacherRegisteredByInput[]
    createMany?: UserCreateManyTeacherRegisteredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherRegisteredByInput | UserUpdateWithWhereUniqueWithoutTeacherRegisteredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherRegisteredByInput | UserUpdateManyWithWhereWithoutTeacherRegisteredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutStudentRegisteredByNestedInput = {
    create?: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput> | UserCreateWithoutStudentRegisteredByInput[] | UserUncheckedCreateWithoutStudentRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentRegisteredByInput | UserCreateOrConnectWithoutStudentRegisteredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentRegisteredByInput | UserUpsertWithWhereUniqueWithoutStudentRegisteredByInput[]
    createMany?: UserCreateManyStudentRegisteredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentRegisteredByInput | UserUpdateWithWhereUniqueWithoutStudentRegisteredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentRegisteredByInput | UserUpdateManyWithWhereWithoutStudentRegisteredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput> | TeacherCourseAssignmentCreateWithoutAssignedByInput[] | TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput | TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: TeacherCourseAssignmentCreateManyAssignedByInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutAssignedByInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput> | TeacherCourseAssignmentCreateWithoutTeacherInput[] | TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput | TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutTeacherInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherCourseAssignmentCreateManyTeacherInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutTeacherInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutTeacherInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput> | AdvisoryAssignmentCreateWithoutAssignedByInput[] | AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput | AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: AdvisoryAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | AdvisoryAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: AdvisoryAssignmentCreateManyAssignedByInputEnvelope
    set?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    disconnect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    delete?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    update?: AdvisoryAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | AdvisoryAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: AdvisoryAssignmentUpdateManyWithWhereWithoutAssignedByInput | AdvisoryAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput> | AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput[] | AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput | AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput[]
    upsert?: AdvisoryAssignmentUpsertWithWhereUniqueWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpsertWithWhereUniqueWithoutAdvisoryTeacherInput[]
    createMany?: AdvisoryAssignmentCreateManyAdvisoryTeacherInputEnvelope
    set?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    disconnect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    delete?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    update?: AdvisoryAssignmentUpdateWithWhereUniqueWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpdateWithWhereUniqueWithoutAdvisoryTeacherInput[]
    updateMany?: AdvisoryAssignmentUpdateManyWithWhereWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpdateManyWithWhereWithoutAdvisoryTeacherInput[]
    deleteMany?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUpdateOneWithoutStudentNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutStudentInput
    upsert?: AdvisoryAssignmentUpsertWithoutStudentInput
    disconnect?: AdvisoryAssignmentWhereInput | boolean
    delete?: AdvisoryAssignmentWhereInput | boolean
    connect?: AdvisoryAssignmentWhereUniqueInput
    update?: XOR<XOR<AdvisoryAssignmentUpdateToOneWithWhereWithoutStudentInput, AdvisoryAssignmentUpdateWithoutStudentInput>, AdvisoryAssignmentUncheckedUpdateWithoutStudentInput>
  }

  export type DepartmentUpdateManyWithoutDepartmentHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput> | DepartmentCreateWithoutDepartmentHeadInput[] | DepartmentUncheckedCreateWithoutDepartmentHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadInput | DepartmentCreateOrConnectWithoutDepartmentHeadInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutDepartmentHeadInput | DepartmentUpsertWithWhereUniqueWithoutDepartmentHeadInput[]
    createMany?: DepartmentCreateManyDepartmentHeadInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutDepartmentHeadInput | DepartmentUpdateWithWhereUniqueWithoutDepartmentHeadInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutDepartmentHeadInput | DepartmentUpdateManyWithWhereWithoutDepartmentHeadInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutRegisteredTeachersNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredTeachersInput, UserUncheckedCreateWithoutRegisteredTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredTeachersInput
    upsert?: UserUpsertWithoutRegisteredTeachersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredTeachersInput, UserUpdateWithoutRegisteredTeachersInput>, UserUncheckedUpdateWithoutRegisteredTeachersInput>
  }

  export type UserUpdateOneWithoutRegisteredStudentsNestedInput = {
    create?: XOR<UserCreateWithoutRegisteredStudentsInput, UserUncheckedCreateWithoutRegisteredStudentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRegisteredStudentsInput
    upsert?: UserUpsertWithoutRegisteredStudentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRegisteredStudentsInput, UserUpdateWithoutRegisteredStudentsInput>, UserUncheckedUpdateWithoutRegisteredStudentsInput>
  }

  export type UserActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type FileAttachmentUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput> | FileAttachmentCreateWithoutUploadedByInput[] | FileAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutUploadedByInput | FileAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | FileAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: FileAttachmentCreateManyUploadedByInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | FileAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutUploadedByInput | FileAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type EnrollmentUpdateManyWithoutEnrolledByNestedInput = {
    create?: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput> | EnrollmentCreateWithoutEnrolledByInput[] | EnrollmentUncheckedCreateWithoutEnrolledByInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrolledByInput | EnrollmentCreateOrConnectWithoutEnrolledByInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutEnrolledByInput | EnrollmentUpsertWithWhereUniqueWithoutEnrolledByInput[]
    createMany?: EnrollmentCreateManyEnrolledByInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutEnrolledByInput | EnrollmentUpdateWithWhereUniqueWithoutEnrolledByInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutEnrolledByInput | EnrollmentUpdateManyWithWhereWithoutEnrolledByInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserProfileCreateOrConnectWithoutUserInput
    upsert?: UserProfileUpsertWithoutUserInput
    disconnect?: UserProfileWhereInput | boolean
    delete?: UserProfileWhereInput | boolean
    connect?: UserProfileWhereUniqueInput
    update?: XOR<XOR<UserProfileUpdateToOneWithWhereWithoutUserInput, UserProfileUpdateWithoutUserInput>, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput> | EnrollmentCreateWithoutStudentInput[] | EnrollmentUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutStudentInput | EnrollmentCreateOrConnectWithoutStudentInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutStudentInput | EnrollmentUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: EnrollmentCreateManyStudentInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutStudentInput | EnrollmentUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutStudentInput | EnrollmentUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput> | AssignmentSubmissionCreateWithoutStudentInput[] | AssignmentSubmissionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutStudentInput | AssignmentSubmissionCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutStudentInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentSubmissionCreateManyStudentInputEnvelope
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutStudentInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutStudentInput | AssignmentSubmissionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput> | QuizAttemptCreateWithoutStudentInput[] | QuizAttemptUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutStudentInput | QuizAttemptCreateOrConnectWithoutStudentInput[]
    upsert?: QuizAttemptUpsertWithWhereUniqueWithoutStudentInput | QuizAttemptUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: QuizAttemptCreateManyStudentInputEnvelope
    set?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    disconnect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    delete?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    update?: QuizAttemptUpdateWithWhereUniqueWithoutStudentInput | QuizAttemptUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: QuizAttemptUpdateManyWithWhereWithoutStudentInput | QuizAttemptUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput> | GradeCreateWithoutStudentInput[] | GradeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutStudentInput | GradeCreateOrConnectWithoutStudentInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutStudentInput | GradeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: GradeCreateManyStudentInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutStudentInput | GradeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutStudentInput | GradeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput> | StudentAttendanceCreateWithoutStudentInput[] | StudentAttendanceUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutStudentInput | StudentAttendanceCreateOrConnectWithoutStudentInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput | StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentAttendanceCreateManyStudentInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput | StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutStudentInput | StudentAttendanceUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstructorInput | CourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstructorInput | CourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstructorInput | CourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput = {
    create?: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput> | UserProfileCreateWithoutAdvisoryTeacherInput[] | UserProfileUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: UserProfileCreateOrConnectWithoutAdvisoryTeacherInput | UserProfileCreateOrConnectWithoutAdvisoryTeacherInput[]
    upsert?: UserProfileUpsertWithWhereUniqueWithoutAdvisoryTeacherInput | UserProfileUpsertWithWhereUniqueWithoutAdvisoryTeacherInput[]
    createMany?: UserProfileCreateManyAdvisoryTeacherInputEnvelope
    set?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    disconnect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    delete?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    connect?: UserProfileWhereUniqueInput | UserProfileWhereUniqueInput[]
    update?: UserProfileUpdateWithWhereUniqueWithoutAdvisoryTeacherInput | UserProfileUpdateWithWhereUniqueWithoutAdvisoryTeacherInput[]
    updateMany?: UserProfileUpdateManyWithWhereWithoutAdvisoryTeacherInput | UserProfileUpdateManyWithWhereWithoutAdvisoryTeacherInput[]
    deleteMany?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutGradedByNestedInput = {
    create?: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput> | GradeCreateWithoutGradedByInput[] | GradeUncheckedCreateWithoutGradedByInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutGradedByInput | GradeCreateOrConnectWithoutGradedByInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutGradedByInput | GradeUpsertWithWhereUniqueWithoutGradedByInput[]
    createMany?: GradeCreateManyGradedByInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutGradedByInput | GradeUpdateWithWhereUniqueWithoutGradedByInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutGradedByInput | GradeUpdateManyWithWhereWithoutGradedByInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput> | CourseAnnouncementCreateWithoutAuthorInput[] | CourseAnnouncementUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutAuthorInput | CourseAnnouncementCreateOrConnectWithoutAuthorInput[]
    upsert?: CourseAnnouncementUpsertWithWhereUniqueWithoutAuthorInput | CourseAnnouncementUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CourseAnnouncementCreateManyAuthorInputEnvelope
    set?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    disconnect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    delete?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    update?: CourseAnnouncementUpdateWithWhereUniqueWithoutAuthorInput | CourseAnnouncementUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CourseAnnouncementUpdateManyWithWhereWithoutAuthorInput | CourseAnnouncementUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCreatedByInput | AssignmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCreatedByInput | AssignmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCreatedByInput | AssignmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput> | QuizCreateWithoutCreatedByInput[] | QuizUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCreatedByInput | QuizCreateOrConnectWithoutCreatedByInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCreatedByInput | QuizUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: QuizCreateManyCreatedByInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCreatedByInput | QuizUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCreatedByInput | QuizUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput> | CourseMaterialCreateWithoutUploadedByInput[] | CourseMaterialUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutUploadedByInput | CourseMaterialCreateOrConnectWithoutUploadedByInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutUploadedByInput | CourseMaterialUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: CourseMaterialCreateManyUploadedByInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutUploadedByInput | CourseMaterialUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutUploadedByInput | CourseMaterialUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput> | CourseCreateWithoutCreatedByInput[] | CourseUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatedByInput | CourseCreateOrConnectWithoutCreatedByInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatedByInput | CourseUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: CourseCreateManyCreatedByInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatedByInput | CourseUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatedByInput | CourseUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput = {
    create?: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput> | UserCreateWithoutTeacherRegisteredByInput[] | UserUncheckedCreateWithoutTeacherRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutTeacherRegisteredByInput | UserCreateOrConnectWithoutTeacherRegisteredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutTeacherRegisteredByInput | UserUpsertWithWhereUniqueWithoutTeacherRegisteredByInput[]
    createMany?: UserCreateManyTeacherRegisteredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutTeacherRegisteredByInput | UserUpdateWithWhereUniqueWithoutTeacherRegisteredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutTeacherRegisteredByInput | UserUpdateManyWithWhereWithoutTeacherRegisteredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput = {
    create?: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput> | UserCreateWithoutStudentRegisteredByInput[] | UserUncheckedCreateWithoutStudentRegisteredByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutStudentRegisteredByInput | UserCreateOrConnectWithoutStudentRegisteredByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutStudentRegisteredByInput | UserUpsertWithWhereUniqueWithoutStudentRegisteredByInput[]
    createMany?: UserCreateManyStudentRegisteredByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutStudentRegisteredByInput | UserUpdateWithWhereUniqueWithoutStudentRegisteredByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutStudentRegisteredByInput | UserUpdateManyWithWhereWithoutStudentRegisteredByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput> | TeacherCourseAssignmentCreateWithoutAssignedByInput[] | TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput | TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: TeacherCourseAssignmentCreateManyAssignedByInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutAssignedByInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput> | TeacherCourseAssignmentCreateWithoutTeacherInput[] | TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput | TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutTeacherInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherCourseAssignmentCreateManyTeacherInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutTeacherInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutTeacherInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput> | AdvisoryAssignmentCreateWithoutAssignedByInput[] | AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput | AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput[]
    upsert?: AdvisoryAssignmentUpsertWithWhereUniqueWithoutAssignedByInput | AdvisoryAssignmentUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: AdvisoryAssignmentCreateManyAssignedByInputEnvelope
    set?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    disconnect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    delete?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    update?: AdvisoryAssignmentUpdateWithWhereUniqueWithoutAssignedByInput | AdvisoryAssignmentUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: AdvisoryAssignmentUpdateManyWithWhereWithoutAssignedByInput | AdvisoryAssignmentUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput> | AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput[] | AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput[]
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput | AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput[]
    upsert?: AdvisoryAssignmentUpsertWithWhereUniqueWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpsertWithWhereUniqueWithoutAdvisoryTeacherInput[]
    createMany?: AdvisoryAssignmentCreateManyAdvisoryTeacherInputEnvelope
    set?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    disconnect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    delete?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    connect?: AdvisoryAssignmentWhereUniqueInput | AdvisoryAssignmentWhereUniqueInput[]
    update?: AdvisoryAssignmentUpdateWithWhereUniqueWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpdateWithWhereUniqueWithoutAdvisoryTeacherInput[]
    updateMany?: AdvisoryAssignmentUpdateManyWithWhereWithoutAdvisoryTeacherInput | AdvisoryAssignmentUpdateManyWithWhereWithoutAdvisoryTeacherInput[]
    deleteMany?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
  }

  export type AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
    connectOrCreate?: AdvisoryAssignmentCreateOrConnectWithoutStudentInput
    upsert?: AdvisoryAssignmentUpsertWithoutStudentInput
    disconnect?: AdvisoryAssignmentWhereInput | boolean
    delete?: AdvisoryAssignmentWhereInput | boolean
    connect?: AdvisoryAssignmentWhereUniqueInput
    update?: XOR<XOR<AdvisoryAssignmentUpdateToOneWithWhereWithoutStudentInput, AdvisoryAssignmentUpdateWithoutStudentInput>, AdvisoryAssignmentUncheckedUpdateWithoutStudentInput>
  }

  export type DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput = {
    create?: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput> | DepartmentCreateWithoutDepartmentHeadInput[] | DepartmentUncheckedCreateWithoutDepartmentHeadInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutDepartmentHeadInput | DepartmentCreateOrConnectWithoutDepartmentHeadInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutDepartmentHeadInput | DepartmentUpsertWithWhereUniqueWithoutDepartmentHeadInput[]
    createMany?: DepartmentCreateManyDepartmentHeadInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutDepartmentHeadInput | DepartmentUpdateWithWhereUniqueWithoutDepartmentHeadInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutDepartmentHeadInput | DepartmentUpdateManyWithWhereWithoutDepartmentHeadInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type UserActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput> | FileAttachmentCreateWithoutUploadedByInput[] | FileAttachmentUncheckedCreateWithoutUploadedByInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutUploadedByInput | FileAttachmentCreateOrConnectWithoutUploadedByInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutUploadedByInput | FileAttachmentUpsertWithWhereUniqueWithoutUploadedByInput[]
    createMany?: FileAttachmentCreateManyUploadedByInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutUploadedByInput | FileAttachmentUpdateWithWhereUniqueWithoutUploadedByInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutUploadedByInput | FileAttachmentUpdateManyWithWhereWithoutUploadedByInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput = {
    create?: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput> | EnrollmentCreateWithoutEnrolledByInput[] | EnrollmentUncheckedCreateWithoutEnrolledByInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutEnrolledByInput | EnrollmentCreateOrConnectWithoutEnrolledByInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutEnrolledByInput | EnrollmentUpsertWithWhereUniqueWithoutEnrolledByInput[]
    createMany?: EnrollmentCreateManyEnrolledByInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutEnrolledByInput | EnrollmentUpdateWithWhereUniqueWithoutEnrolledByInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutEnrolledByInput | EnrollmentUpdateManyWithWhereWithoutEnrolledByInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserProfileCreatespecializationInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdvisoryStudentsInput = {
    create?: XOR<UserCreateWithoutAdvisoryStudentsInput, UserUncheckedCreateWithoutAdvisoryStudentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdvisoryStudentsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserProfileUpdatespecializationInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumThemeModeFieldUpdateOperationsInput = {
    set?: $Enums.ThemeMode
  }

  export type EnumVisibilityFieldUpdateOperationsInput = {
    set?: $Enums.Visibility
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateOneWithoutAdvisoryStudentsNestedInput = {
    create?: XOR<UserCreateWithoutAdvisoryStudentsInput, UserUncheckedCreateWithoutAdvisoryStudentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdvisoryStudentsInput
    upsert?: UserUpsertWithoutAdvisoryStudentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdvisoryStudentsInput, UserUpdateWithoutAdvisoryStudentsInput>, UserUncheckedUpdateWithoutAdvisoryStudentsInput>
  }

  export type UserCreateNestedOneWithoutUserActivityInput = {
    create?: XOR<UserCreateWithoutUserActivityInput, UserUncheckedCreateWithoutUserActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActivityInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserActivityNestedInput = {
    create?: XOR<UserCreateWithoutUserActivityInput, UserUncheckedCreateWithoutUserActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserActivityInput
    upsert?: UserUpsertWithoutUserActivityInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserActivityInput, UserUpdateWithoutUserActivityInput>, UserUncheckedUpdateWithoutUserActivityInput>
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type PermissionCreateNestedOneWithoutRolePermissionsInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
  }

  export type PermissionUpdateOneRequiredWithoutRolePermissionsNestedInput = {
    create?: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolePermissionsInput
    upsert?: PermissionUpsertWithoutRolePermissionsInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolePermissionsInput, PermissionUpdateWithoutRolePermissionsInput>, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type UserCreateNestedOneWithoutManagedDepartmentsInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutManagedDepartmentsNestedInput = {
    create?: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedDepartmentsInput
    upsert?: UserUpsertWithoutManagedDepartmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedDepartmentsInput, UserUpdateWithoutManagedDepartmentsInput>, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type CourseUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseCreatescheduleDaysInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutCreatedCoursesInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTaughtCoursesInput = {
    create?: XOR<UserCreateWithoutTaughtCoursesInput, UserUncheckedCreateWithoutTaughtCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaughtCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutCoursesInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type CourseCreateNestedManyWithoutPrerequisiteForInput = {
    create?: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput> | CourseCreateWithoutPrerequisiteForInput[] | CourseUncheckedCreateWithoutPrerequisiteForInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisiteForInput | CourseCreateOrConnectWithoutPrerequisiteForInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutPrerequisitesInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput> | CourseCreateWithoutPrerequisitesInput[] | CourseUncheckedCreateWithoutPrerequisitesInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput | CourseCreateOrConnectWithoutPrerequisitesInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type EnrollmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type CourseMaterialCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput> | CourseMaterialCreateWithoutCourseInput[] | CourseMaterialUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutCourseInput | CourseMaterialCreateOrConnectWithoutCourseInput[]
    createMany?: CourseMaterialCreateManyCourseInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type QuizCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput> | QuizCreateWithoutCourseInput[] | QuizUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCourseInput | QuizCreateOrConnectWithoutCourseInput[]
    createMany?: QuizCreateManyCourseInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type CourseAnnouncementCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput> | CourseAnnouncementCreateWithoutCourseInput[] | CourseAnnouncementUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutCourseInput | CourseAnnouncementCreateOrConnectWithoutCourseInput[]
    createMany?: CourseAnnouncementCreateManyCourseInputEnvelope
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
  }

  export type ClassSessionCreateNestedManyWithoutCourseInput = {
    create?: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput> | ClassSessionCreateWithoutCourseInput[] | ClassSessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ClassSessionCreateOrConnectWithoutCourseInput | ClassSessionCreateOrConnectWithoutCourseInput[]
    createMany?: ClassSessionCreateManyCourseInputEnvelope
    connect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutCourseInput = {
    create?: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput> | GradeCreateWithoutCourseInput[] | GradeUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutCourseInput | GradeCreateOrConnectWithoutCourseInput[]
    createMany?: GradeCreateManyCourseInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput> | TeacherCourseAssignmentCreateWithoutCourseInput[] | TeacherCourseAssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutCourseInput | TeacherCourseAssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherCourseAssignmentCreateManyCourseInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput = {
    create?: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput> | CourseCreateWithoutPrerequisiteForInput[] | CourseUncheckedCreateWithoutPrerequisiteForInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisiteForInput | CourseCreateOrConnectWithoutPrerequisiteForInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutPrerequisitesInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput> | CourseCreateWithoutPrerequisitesInput[] | CourseUncheckedCreateWithoutPrerequisitesInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput | CourseCreateOrConnectWithoutPrerequisitesInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type EnrollmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type CourseMaterialUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput> | CourseMaterialCreateWithoutCourseInput[] | CourseMaterialUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutCourseInput | CourseMaterialCreateOrConnectWithoutCourseInput[]
    createMany?: CourseMaterialCreateManyCourseInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type QuizUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput> | QuizCreateWithoutCourseInput[] | QuizUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCourseInput | QuizCreateOrConnectWithoutCourseInput[]
    createMany?: QuizCreateManyCourseInputEnvelope
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
  }

  export type CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput> | CourseAnnouncementCreateWithoutCourseInput[] | CourseAnnouncementUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutCourseInput | CourseAnnouncementCreateOrConnectWithoutCourseInput[]
    createMany?: CourseAnnouncementCreateManyCourseInputEnvelope
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
  }

  export type ClassSessionUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput> | ClassSessionCreateWithoutCourseInput[] | ClassSessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ClassSessionCreateOrConnectWithoutCourseInput | ClassSessionCreateOrConnectWithoutCourseInput[]
    createMany?: ClassSessionCreateManyCourseInputEnvelope
    connect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput> | GradeCreateWithoutCourseInput[] | GradeUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutCourseInput | GradeCreateOrConnectWithoutCourseInput[]
    createMany?: GradeCreateManyCourseInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput> | TeacherCourseAssignmentCreateWithoutCourseInput[] | TeacherCourseAssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutCourseInput | TeacherCourseAssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherCourseAssignmentCreateManyCourseInputEnvelope
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CourseUpdatescheduleDaysInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumCourseStatusFieldUpdateOperationsInput = {
    set?: $Enums.CourseStatus
  }

  export type EnumCourseLevelFieldUpdateOperationsInput = {
    set?: $Enums.CourseLevel
  }

  export type UserUpdateOneRequiredWithoutCreatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    upsert?: UserUpsertWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCoursesInput, UserUpdateWithoutCreatedCoursesInput>, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateOneRequiredWithoutTaughtCoursesNestedInput = {
    create?: XOR<UserCreateWithoutTaughtCoursesInput, UserUncheckedCreateWithoutTaughtCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTaughtCoursesInput
    upsert?: UserUpsertWithoutTaughtCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTaughtCoursesInput, UserUpdateWithoutTaughtCoursesInput>, UserUncheckedUpdateWithoutTaughtCoursesInput>
  }

  export type DepartmentUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    upsert?: DepartmentUpsertWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoursesInput, DepartmentUpdateWithoutCoursesInput>, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseUpdateManyWithoutPrerequisiteForNestedInput = {
    create?: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput> | CourseCreateWithoutPrerequisiteForInput[] | CourseUncheckedCreateWithoutPrerequisiteForInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisiteForInput | CourseCreateOrConnectWithoutPrerequisiteForInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutPrerequisiteForInput | CourseUpsertWithWhereUniqueWithoutPrerequisiteForInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutPrerequisiteForInput | CourseUpdateWithWhereUniqueWithoutPrerequisiteForInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutPrerequisiteForInput | CourseUpdateManyWithWhereWithoutPrerequisiteForInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutPrerequisitesNestedInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput> | CourseCreateWithoutPrerequisitesInput[] | CourseUncheckedCreateWithoutPrerequisitesInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput | CourseCreateOrConnectWithoutPrerequisitesInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutPrerequisitesInput | CourseUpsertWithWhereUniqueWithoutPrerequisitesInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutPrerequisitesInput | CourseUpdateWithWhereUniqueWithoutPrerequisitesInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutPrerequisitesInput | CourseUpdateManyWithWhereWithoutPrerequisitesInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type EnrollmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type CourseMaterialUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput> | CourseMaterialCreateWithoutCourseInput[] | CourseMaterialUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutCourseInput | CourseMaterialCreateOrConnectWithoutCourseInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutCourseInput | CourseMaterialUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseMaterialCreateManyCourseInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutCourseInput | CourseMaterialUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutCourseInput | CourseMaterialUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type QuizUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput> | QuizCreateWithoutCourseInput[] | QuizUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCourseInput | QuizCreateOrConnectWithoutCourseInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCourseInput | QuizUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuizCreateManyCourseInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCourseInput | QuizUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCourseInput | QuizUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type CourseAnnouncementUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput> | CourseAnnouncementCreateWithoutCourseInput[] | CourseAnnouncementUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutCourseInput | CourseAnnouncementCreateOrConnectWithoutCourseInput[]
    upsert?: CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput | CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseAnnouncementCreateManyCourseInputEnvelope
    set?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    disconnect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    delete?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    update?: CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput | CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseAnnouncementUpdateManyWithWhereWithoutCourseInput | CourseAnnouncementUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
  }

  export type ClassSessionUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput> | ClassSessionCreateWithoutCourseInput[] | ClassSessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ClassSessionCreateOrConnectWithoutCourseInput | ClassSessionCreateOrConnectWithoutCourseInput[]
    upsert?: ClassSessionUpsertWithWhereUniqueWithoutCourseInput | ClassSessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ClassSessionCreateManyCourseInputEnvelope
    set?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    disconnect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    delete?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    connect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    update?: ClassSessionUpdateWithWhereUniqueWithoutCourseInput | ClassSessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ClassSessionUpdateManyWithWhereWithoutCourseInput | ClassSessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ClassSessionScalarWhereInput | ClassSessionScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutCourseNestedInput = {
    create?: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput> | GradeCreateWithoutCourseInput[] | GradeUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutCourseInput | GradeCreateOrConnectWithoutCourseInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutCourseInput | GradeUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: GradeCreateManyCourseInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutCourseInput | GradeUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutCourseInput | GradeUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput> | TeacherCourseAssignmentCreateWithoutCourseInput[] | TeacherCourseAssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutCourseInput | TeacherCourseAssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutCourseInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherCourseAssignmentCreateManyCourseInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutCourseInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutCourseInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput = {
    create?: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput> | CourseCreateWithoutPrerequisiteForInput[] | CourseUncheckedCreateWithoutPrerequisiteForInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisiteForInput | CourseCreateOrConnectWithoutPrerequisiteForInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutPrerequisiteForInput | CourseUpsertWithWhereUniqueWithoutPrerequisiteForInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutPrerequisiteForInput | CourseUpdateWithWhereUniqueWithoutPrerequisiteForInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutPrerequisiteForInput | CourseUpdateManyWithWhereWithoutPrerequisiteForInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput = {
    create?: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput> | CourseCreateWithoutPrerequisitesInput[] | CourseUncheckedCreateWithoutPrerequisitesInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutPrerequisitesInput | CourseCreateOrConnectWithoutPrerequisitesInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutPrerequisitesInput | CourseUpsertWithWhereUniqueWithoutPrerequisitesInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutPrerequisitesInput | CourseUpdateWithWhereUniqueWithoutPrerequisitesInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutPrerequisitesInput | CourseUpdateManyWithWhereWithoutPrerequisitesInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput> | EnrollmentCreateWithoutCourseInput[] | EnrollmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: EnrollmentCreateOrConnectWithoutCourseInput | EnrollmentCreateOrConnectWithoutCourseInput[]
    upsert?: EnrollmentUpsertWithWhereUniqueWithoutCourseInput | EnrollmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: EnrollmentCreateManyCourseInputEnvelope
    set?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    disconnect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    delete?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    connect?: EnrollmentWhereUniqueInput | EnrollmentWhereUniqueInput[]
    update?: EnrollmentUpdateWithWhereUniqueWithoutCourseInput | EnrollmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: EnrollmentUpdateManyWithWhereWithoutCourseInput | EnrollmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput> | CourseMaterialCreateWithoutCourseInput[] | CourseMaterialUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutCourseInput | CourseMaterialCreateOrConnectWithoutCourseInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutCourseInput | CourseMaterialUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseMaterialCreateManyCourseInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutCourseInput | CourseMaterialUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutCourseInput | CourseMaterialUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type QuizUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput> | QuizCreateWithoutCourseInput[] | QuizUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: QuizCreateOrConnectWithoutCourseInput | QuizCreateOrConnectWithoutCourseInput[]
    upsert?: QuizUpsertWithWhereUniqueWithoutCourseInput | QuizUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: QuizCreateManyCourseInputEnvelope
    set?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    disconnect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    delete?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    connect?: QuizWhereUniqueInput | QuizWhereUniqueInput[]
    update?: QuizUpdateWithWhereUniqueWithoutCourseInput | QuizUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: QuizUpdateManyWithWhereWithoutCourseInput | QuizUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: QuizScalarWhereInput | QuizScalarWhereInput[]
  }

  export type CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput> | CourseAnnouncementCreateWithoutCourseInput[] | CourseAnnouncementUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseAnnouncementCreateOrConnectWithoutCourseInput | CourseAnnouncementCreateOrConnectWithoutCourseInput[]
    upsert?: CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput | CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseAnnouncementCreateManyCourseInputEnvelope
    set?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    disconnect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    delete?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    connect?: CourseAnnouncementWhereUniqueInput | CourseAnnouncementWhereUniqueInput[]
    update?: CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput | CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseAnnouncementUpdateManyWithWhereWithoutCourseInput | CourseAnnouncementUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
  }

  export type ClassSessionUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput> | ClassSessionCreateWithoutCourseInput[] | ClassSessionUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: ClassSessionCreateOrConnectWithoutCourseInput | ClassSessionCreateOrConnectWithoutCourseInput[]
    upsert?: ClassSessionUpsertWithWhereUniqueWithoutCourseInput | ClassSessionUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: ClassSessionCreateManyCourseInputEnvelope
    set?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    disconnect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    delete?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    connect?: ClassSessionWhereUniqueInput | ClassSessionWhereUniqueInput[]
    update?: ClassSessionUpdateWithWhereUniqueWithoutCourseInput | ClassSessionUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: ClassSessionUpdateManyWithWhereWithoutCourseInput | ClassSessionUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: ClassSessionScalarWhereInput | ClassSessionScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput> | GradeCreateWithoutCourseInput[] | GradeUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutCourseInput | GradeCreateOrConnectWithoutCourseInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutCourseInput | GradeUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: GradeCreateManyCourseInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutCourseInput | GradeUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutCourseInput | GradeUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput> | TeacherCourseAssignmentCreateWithoutCourseInput[] | TeacherCourseAssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseAssignmentCreateOrConnectWithoutCourseInput | TeacherCourseAssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherCourseAssignmentUpsertWithWhereUniqueWithoutCourseInput | TeacherCourseAssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherCourseAssignmentCreateManyCourseInputEnvelope
    set?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    disconnect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    delete?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    connect?: TeacherCourseAssignmentWhereUniqueInput | TeacherCourseAssignmentWhereUniqueInput[]
    update?: TeacherCourseAssignmentUpdateWithWhereUniqueWithoutCourseInput | TeacherCourseAssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherCourseAssignmentUpdateManyWithWhereWithoutCourseInput | TeacherCourseAssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentEnrollmentsInput = {
    create?: XOR<UserCreateWithoutStudentEnrollmentsInput, UserUncheckedCreateWithoutStudentEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentEnrollmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutEnrollmentsInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutEnrollmentsManagedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsManagedInput, UserUncheckedCreateWithoutEnrollmentsManagedInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsManagedInput
    connect?: UserWhereUniqueInput
  }

  export type EnumEnrollmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.EnrollmentStatus
  }

  export type UserUpdateOneRequiredWithoutStudentEnrollmentsNestedInput = {
    create?: XOR<UserCreateWithoutStudentEnrollmentsInput, UserUncheckedCreateWithoutStudentEnrollmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentEnrollmentsInput
    upsert?: UserUpsertWithoutStudentEnrollmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentEnrollmentsInput, UserUpdateWithoutStudentEnrollmentsInput>, UserUncheckedUpdateWithoutStudentEnrollmentsInput>
  }

  export type CourseUpdateOneRequiredWithoutEnrollmentsNestedInput = {
    create?: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutEnrollmentsInput
    upsert?: CourseUpsertWithoutEnrollmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutEnrollmentsInput, CourseUpdateWithoutEnrollmentsInput>, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type UserUpdateOneRequiredWithoutEnrollmentsManagedNestedInput = {
    create?: XOR<UserCreateWithoutEnrollmentsManagedInput, UserUncheckedCreateWithoutEnrollmentsManagedInput>
    connectOrCreate?: UserCreateOrConnectWithoutEnrollmentsManagedInput
    upsert?: UserUpsertWithoutEnrollmentsManagedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEnrollmentsManagedInput, UserUpdateWithoutEnrollmentsManagedInput>, UserUncheckedUpdateWithoutEnrollmentsManagedInput>
  }

  export type CourseCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedAssignmentsInput = {
    create?: XOR<UserCreateWithoutCreatedAssignmentsInput, UserUncheckedCreateWithoutCreatedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type AssignmentSubmissionCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput> | AssignmentSubmissionCreateWithoutAssignmentInput[] | AssignmentSubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutAssignmentInput | AssignmentSubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentSubmissionCreateManyAssignmentInputEnvelope
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type GradeCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput> | GradeCreateWithoutAssignmentInput[] | GradeUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutAssignmentInput | GradeCreateOrConnectWithoutAssignmentInput[]
    createMany?: GradeCreateManyAssignmentInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput = {
    create?: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput> | FileAttachmentCreateWithoutAssignmentAttachmentsInput[] | FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput | FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput> | AssignmentSubmissionCreateWithoutAssignmentInput[] | AssignmentSubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutAssignmentInput | AssignmentSubmissionCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentSubmissionCreateManyAssignmentInputEnvelope
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput> | GradeCreateWithoutAssignmentInput[] | GradeUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutAssignmentInput | GradeCreateOrConnectWithoutAssignmentInput[]
    createMany?: GradeCreateManyAssignmentInputEnvelope
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
  }

  export type FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput = {
    create?: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput> | FileAttachmentCreateWithoutAssignmentAttachmentsInput[] | FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput | FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type EnumAssignmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.AssignmentType
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumAssignmentStatusFieldUpdateOperationsInput = {
    set?: $Enums.AssignmentStatus
  }

  export type CourseUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    upsert?: CourseUpsertWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssignmentsInput, CourseUpdateWithoutAssignmentsInput>, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedAssignmentsInput, UserUncheckedCreateWithoutCreatedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedAssignmentsInput
    upsert?: UserUpsertWithoutCreatedAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedAssignmentsInput, UserUpdateWithoutCreatedAssignmentsInput>, UserUncheckedUpdateWithoutCreatedAssignmentsInput>
  }

  export type AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput> | AssignmentSubmissionCreateWithoutAssignmentInput[] | AssignmentSubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutAssignmentInput | AssignmentSubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentSubmissionCreateManyAssignmentInputEnvelope
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutAssignmentInput | AssignmentSubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type GradeUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput> | GradeCreateWithoutAssignmentInput[] | GradeUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutAssignmentInput | GradeCreateOrConnectWithoutAssignmentInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutAssignmentInput | GradeUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: GradeCreateManyAssignmentInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutAssignmentInput | GradeUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutAssignmentInput | GradeUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput> | FileAttachmentCreateWithoutAssignmentAttachmentsInput[] | FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput | FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutAssignmentAttachmentsInput | FileAttachmentUpsertWithWhereUniqueWithoutAssignmentAttachmentsInput[]
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutAssignmentAttachmentsInput | FileAttachmentUpdateWithWhereUniqueWithoutAssignmentAttachmentsInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutAssignmentAttachmentsInput | FileAttachmentUpdateManyWithWhereWithoutAssignmentAttachmentsInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput> | AssignmentSubmissionCreateWithoutAssignmentInput[] | AssignmentSubmissionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutAssignmentInput | AssignmentSubmissionCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentSubmissionCreateManyAssignmentInputEnvelope
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutAssignmentInput | AssignmentSubmissionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type GradeUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput> | GradeCreateWithoutAssignmentInput[] | GradeUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: GradeCreateOrConnectWithoutAssignmentInput | GradeCreateOrConnectWithoutAssignmentInput[]
    upsert?: GradeUpsertWithWhereUniqueWithoutAssignmentInput | GradeUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: GradeCreateManyAssignmentInputEnvelope
    set?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    disconnect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    delete?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    connect?: GradeWhereUniqueInput | GradeWhereUniqueInput[]
    update?: GradeUpdateWithWhereUniqueWithoutAssignmentInput | GradeUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: GradeUpdateManyWithWhereWithoutAssignmentInput | GradeUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: GradeScalarWhereInput | GradeScalarWhereInput[]
  }

  export type FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput> | FileAttachmentCreateWithoutAssignmentAttachmentsInput[] | FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput | FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutAssignmentAttachmentsInput | FileAttachmentUpsertWithWhereUniqueWithoutAssignmentAttachmentsInput[]
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutAssignmentAttachmentsInput | FileAttachmentUpdateWithWhereUniqueWithoutAssignmentAttachmentsInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutAssignmentAttachmentsInput | FileAttachmentUpdateManyWithWhereWithoutAssignmentAttachmentsInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type AssignmentCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentSubmissionsInput = {
    create?: XOR<UserCreateWithoutAssignmentSubmissionsInput, UserUncheckedCreateWithoutAssignmentSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type FileAttachmentCreateNestedManyWithoutSubmissionFilesInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput> | FileAttachmentCreateWithoutSubmissionFilesInput[] | FileAttachmentUncheckedCreateWithoutSubmissionFilesInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionFilesInput | FileAttachmentCreateOrConnectWithoutSubmissionFilesInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type GradeCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSubmissionInput
    connect?: GradeWhereUniqueInput
  }

  export type FileAttachmentUncheckedCreateNestedManyWithoutSubmissionFilesInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput> | FileAttachmentCreateWithoutSubmissionFilesInput[] | FileAttachmentUncheckedCreateWithoutSubmissionFilesInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionFilesInput | FileAttachmentCreateOrConnectWithoutSubmissionFilesInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type GradeUncheckedCreateNestedOneWithoutSubmissionInput = {
    create?: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSubmissionInput
    connect?: GradeWhereUniqueInput
  }

  export type AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSubmissionsInput
    upsert?: AssignmentUpsertWithoutSubmissionsInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutSubmissionsInput, AssignmentUpdateWithoutSubmissionsInput>, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentSubmissionsInput, UserUncheckedCreateWithoutAssignmentSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentSubmissionsInput
    upsert?: UserUpsertWithoutAssignmentSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentSubmissionsInput, UserUpdateWithoutAssignmentSubmissionsInput>, UserUncheckedUpdateWithoutAssignmentSubmissionsInput>
  }

  export type FileAttachmentUpdateManyWithoutSubmissionFilesNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput> | FileAttachmentCreateWithoutSubmissionFilesInput[] | FileAttachmentUncheckedCreateWithoutSubmissionFilesInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionFilesInput | FileAttachmentCreateOrConnectWithoutSubmissionFilesInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutSubmissionFilesInput | FileAttachmentUpsertWithWhereUniqueWithoutSubmissionFilesInput[]
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutSubmissionFilesInput | FileAttachmentUpdateWithWhereUniqueWithoutSubmissionFilesInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutSubmissionFilesInput | FileAttachmentUpdateManyWithWhereWithoutSubmissionFilesInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type GradeUpdateOneWithoutSubmissionNestedInput = {
    create?: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSubmissionInput
    upsert?: GradeUpsertWithoutSubmissionInput
    disconnect?: GradeWhereInput | boolean
    delete?: GradeWhereInput | boolean
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutSubmissionInput, GradeUpdateWithoutSubmissionInput>, GradeUncheckedUpdateWithoutSubmissionInput>
  }

  export type FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput> | FileAttachmentCreateWithoutSubmissionFilesInput[] | FileAttachmentUncheckedCreateWithoutSubmissionFilesInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionFilesInput | FileAttachmentCreateOrConnectWithoutSubmissionFilesInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutSubmissionFilesInput | FileAttachmentUpsertWithWhereUniqueWithoutSubmissionFilesInput[]
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutSubmissionFilesInput | FileAttachmentUpdateWithWhereUniqueWithoutSubmissionFilesInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutSubmissionFilesInput | FileAttachmentUpdateManyWithWhereWithoutSubmissionFilesInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type GradeUncheckedUpdateOneWithoutSubmissionNestedInput = {
    create?: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
    connectOrCreate?: GradeCreateOrConnectWithoutSubmissionInput
    upsert?: GradeUpsertWithoutSubmissionInput
    disconnect?: GradeWhereInput | boolean
    delete?: GradeWhereInput | boolean
    connect?: GradeWhereUniqueInput
    update?: XOR<XOR<GradeUpdateToOneWithWhereWithoutSubmissionInput, GradeUpdateWithoutSubmissionInput>, GradeUncheckedUpdateWithoutSubmissionInput>
  }

  export type UserCreateNestedOneWithoutGradesInput = {
    create?: XOR<UserCreateWithoutGradesInput, UserUncheckedCreateWithoutGradesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGradesInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutGradesInput = {
    create?: XOR<CourseCreateWithoutGradesInput, CourseUncheckedCreateWithoutGradesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutGradesInput
    connect?: CourseWhereUniqueInput
  }

  export type AssignmentCreateNestedOneWithoutGradesInput = {
    create?: XOR<AssignmentCreateWithoutGradesInput, AssignmentUncheckedCreateWithoutGradesInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutGradesInput
    connect?: AssignmentWhereUniqueInput
  }

  export type AssignmentSubmissionCreateNestedOneWithoutGradeInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutGradeInput, AssignmentSubmissionUncheckedCreateWithoutGradeInput>
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutGradeInput
    connect?: AssignmentSubmissionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutGradedAssignmentsInput = {
    create?: XOR<UserCreateWithoutGradedAssignmentsInput, UserUncheckedCreateWithoutGradedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGradedAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutGradesNestedInput = {
    create?: XOR<UserCreateWithoutGradesInput, UserUncheckedCreateWithoutGradesInput>
    connectOrCreate?: UserCreateOrConnectWithoutGradesInput
    upsert?: UserUpsertWithoutGradesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGradesInput, UserUpdateWithoutGradesInput>, UserUncheckedUpdateWithoutGradesInput>
  }

  export type CourseUpdateOneWithoutGradesNestedInput = {
    create?: XOR<CourseCreateWithoutGradesInput, CourseUncheckedCreateWithoutGradesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutGradesInput
    upsert?: CourseUpsertWithoutGradesInput
    disconnect?: CourseWhereInput | boolean
    delete?: CourseWhereInput | boolean
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutGradesInput, CourseUpdateWithoutGradesInput>, CourseUncheckedUpdateWithoutGradesInput>
  }

  export type AssignmentUpdateOneWithoutGradesNestedInput = {
    create?: XOR<AssignmentCreateWithoutGradesInput, AssignmentUncheckedCreateWithoutGradesInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutGradesInput
    upsert?: AssignmentUpsertWithoutGradesInput
    disconnect?: AssignmentWhereInput | boolean
    delete?: AssignmentWhereInput | boolean
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutGradesInput, AssignmentUpdateWithoutGradesInput>, AssignmentUncheckedUpdateWithoutGradesInput>
  }

  export type AssignmentSubmissionUpdateOneWithoutGradeNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutGradeInput, AssignmentSubmissionUncheckedCreateWithoutGradeInput>
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutGradeInput
    upsert?: AssignmentSubmissionUpsertWithoutGradeInput
    disconnect?: AssignmentSubmissionWhereInput | boolean
    delete?: AssignmentSubmissionWhereInput | boolean
    connect?: AssignmentSubmissionWhereUniqueInput
    update?: XOR<XOR<AssignmentSubmissionUpdateToOneWithWhereWithoutGradeInput, AssignmentSubmissionUpdateWithoutGradeInput>, AssignmentSubmissionUncheckedUpdateWithoutGradeInput>
  }

  export type UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutGradedAssignmentsInput, UserUncheckedCreateWithoutGradedAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutGradedAssignmentsInput
    upsert?: UserUpsertWithoutGradedAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutGradedAssignmentsInput, UserUpdateWithoutGradedAssignmentsInput>, UserUncheckedUpdateWithoutGradedAssignmentsInput>
  }

  export type CourseCreateNestedOneWithoutCourseMaterialsInput = {
    create?: XOR<CourseCreateWithoutCourseMaterialsInput, CourseUncheckedCreateWithoutCourseMaterialsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseMaterialsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUploadedMaterialsInput = {
    create?: XOR<UserCreateWithoutUploadedMaterialsInput, UserUncheckedCreateWithoutUploadedMaterialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedMaterialsInput
    connect?: UserWhereUniqueInput
  }

  export type FileAttachmentCreateNestedOneWithoutCourseMaterialsInput = {
    create?: XOR<FileAttachmentCreateWithoutCourseMaterialsInput, FileAttachmentUncheckedCreateWithoutCourseMaterialsInput>
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutCourseMaterialsInput
    connect?: FileAttachmentWhereUniqueInput
  }

  export type EnumMaterialTypeFieldUpdateOperationsInput = {
    set?: $Enums.MaterialType
  }

  export type CourseUpdateOneRequiredWithoutCourseMaterialsNestedInput = {
    create?: XOR<CourseCreateWithoutCourseMaterialsInput, CourseUncheckedCreateWithoutCourseMaterialsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutCourseMaterialsInput
    upsert?: CourseUpsertWithoutCourseMaterialsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutCourseMaterialsInput, CourseUpdateWithoutCourseMaterialsInput>, CourseUncheckedUpdateWithoutCourseMaterialsInput>
  }

  export type UserUpdateOneRequiredWithoutUploadedMaterialsNestedInput = {
    create?: XOR<UserCreateWithoutUploadedMaterialsInput, UserUncheckedCreateWithoutUploadedMaterialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedMaterialsInput
    upsert?: UserUpsertWithoutUploadedMaterialsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedMaterialsInput, UserUpdateWithoutUploadedMaterialsInput>, UserUncheckedUpdateWithoutUploadedMaterialsInput>
  }

  export type FileAttachmentUpdateOneWithoutCourseMaterialsNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutCourseMaterialsInput, FileAttachmentUncheckedCreateWithoutCourseMaterialsInput>
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutCourseMaterialsInput
    upsert?: FileAttachmentUpsertWithoutCourseMaterialsInput
    disconnect?: FileAttachmentWhereInput | boolean
    delete?: FileAttachmentWhereInput | boolean
    connect?: FileAttachmentWhereUniqueInput
    update?: XOR<XOR<FileAttachmentUpdateToOneWithWhereWithoutCourseMaterialsInput, FileAttachmentUpdateWithoutCourseMaterialsInput>, FileAttachmentUncheckedUpdateWithoutCourseMaterialsInput>
  }

  export type CourseCreateNestedOneWithoutQuizzesInput = {
    create?: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuizzesInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedQuizzesInput = {
    create?: XOR<UserCreateWithoutCreatedQuizzesInput, UserUncheckedCreateWithoutCreatedQuizzesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQuizzesInput
    connect?: UserWhereUniqueInput
  }

  export type QuizAttemptCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput> | QuizAttemptCreateWithoutQuizInput[] | QuizAttemptUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutQuizInput | QuizAttemptCreateOrConnectWithoutQuizInput[]
    createMany?: QuizAttemptCreateManyQuizInputEnvelope
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
  }

  export type QuizAttemptUncheckedCreateNestedManyWithoutQuizInput = {
    create?: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput> | QuizAttemptCreateWithoutQuizInput[] | QuizAttemptUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutQuizInput | QuizAttemptCreateOrConnectWithoutQuizInput[]
    createMany?: QuizAttemptCreateManyQuizInputEnvelope
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutQuizzesNestedInput = {
    create?: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutQuizzesInput
    upsert?: CourseUpsertWithoutQuizzesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutQuizzesInput, CourseUpdateWithoutQuizzesInput>, CourseUncheckedUpdateWithoutQuizzesInput>
  }

  export type UserUpdateOneRequiredWithoutCreatedQuizzesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedQuizzesInput, UserUncheckedCreateWithoutCreatedQuizzesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedQuizzesInput
    upsert?: UserUpsertWithoutCreatedQuizzesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedQuizzesInput, UserUpdateWithoutCreatedQuizzesInput>, UserUncheckedUpdateWithoutCreatedQuizzesInput>
  }

  export type QuizAttemptUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput> | QuizAttemptCreateWithoutQuizInput[] | QuizAttemptUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutQuizInput | QuizAttemptCreateOrConnectWithoutQuizInput[]
    upsert?: QuizAttemptUpsertWithWhereUniqueWithoutQuizInput | QuizAttemptUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuizAttemptCreateManyQuizInputEnvelope
    set?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    disconnect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    delete?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    update?: QuizAttemptUpdateWithWhereUniqueWithoutQuizInput | QuizAttemptUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuizAttemptUpdateManyWithWhereWithoutQuizInput | QuizAttemptUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
  }

  export type QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput = {
    create?: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput> | QuizAttemptCreateWithoutQuizInput[] | QuizAttemptUncheckedCreateWithoutQuizInput[]
    connectOrCreate?: QuizAttemptCreateOrConnectWithoutQuizInput | QuizAttemptCreateOrConnectWithoutQuizInput[]
    upsert?: QuizAttemptUpsertWithWhereUniqueWithoutQuizInput | QuizAttemptUpsertWithWhereUniqueWithoutQuizInput[]
    createMany?: QuizAttemptCreateManyQuizInputEnvelope
    set?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    disconnect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    delete?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    connect?: QuizAttemptWhereUniqueInput | QuizAttemptWhereUniqueInput[]
    update?: QuizAttemptUpdateWithWhereUniqueWithoutQuizInput | QuizAttemptUpdateWithWhereUniqueWithoutQuizInput[]
    updateMany?: QuizAttemptUpdateManyWithWhereWithoutQuizInput | QuizAttemptUpdateManyWithWhereWithoutQuizInput[]
    deleteMany?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
  }

  export type QuizCreateNestedOneWithoutAttemptsInput = {
    create?: XOR<QuizCreateWithoutAttemptsInput, QuizUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutAttemptsInput
    connect?: QuizWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQuizAttemptsInput = {
    create?: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuizAttemptsInput
    connect?: UserWhereUniqueInput
  }

  export type QuizUpdateOneRequiredWithoutAttemptsNestedInput = {
    create?: XOR<QuizCreateWithoutAttemptsInput, QuizUncheckedCreateWithoutAttemptsInput>
    connectOrCreate?: QuizCreateOrConnectWithoutAttemptsInput
    upsert?: QuizUpsertWithoutAttemptsInput
    connect?: QuizWhereUniqueInput
    update?: XOR<XOR<QuizUpdateToOneWithWhereWithoutAttemptsInput, QuizUpdateWithoutAttemptsInput>, QuizUncheckedUpdateWithoutAttemptsInput>
  }

  export type UserUpdateOneRequiredWithoutQuizAttemptsNestedInput = {
    create?: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQuizAttemptsInput
    upsert?: UserUpsertWithoutQuizAttemptsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQuizAttemptsInput, UserUpdateWithoutQuizAttemptsInput>, UserUncheckedUpdateWithoutQuizAttemptsInput>
  }

  export type CourseCreateNestedOneWithoutAnnouncementsInput = {
    create?: XOR<CourseCreateWithoutAnnouncementsInput, CourseUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAnnouncementsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCourseAnnouncementsInput = {
    create?: XOR<UserCreateWithoutCourseAnnouncementsInput, UserUncheckedCreateWithoutCourseAnnouncementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseAnnouncementsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAnnouncementPriorityFieldUpdateOperationsInput = {
    set?: $Enums.AnnouncementPriority
  }

  export type CourseUpdateOneRequiredWithoutAnnouncementsNestedInput = {
    create?: XOR<CourseCreateWithoutAnnouncementsInput, CourseUncheckedCreateWithoutAnnouncementsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAnnouncementsInput
    upsert?: CourseUpsertWithoutAnnouncementsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAnnouncementsInput, CourseUpdateWithoutAnnouncementsInput>, CourseUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type UserUpdateOneRequiredWithoutCourseAnnouncementsNestedInput = {
    create?: XOR<UserCreateWithoutCourseAnnouncementsInput, UserUncheckedCreateWithoutCourseAnnouncementsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCourseAnnouncementsInput
    upsert?: UserUpsertWithoutCourseAnnouncementsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCourseAnnouncementsInput, UserUpdateWithoutCourseAnnouncementsInput>, UserUncheckedUpdateWithoutCourseAnnouncementsInput>
  }

  export type CourseCreateNestedOneWithoutClassSessionsInput = {
    create?: XOR<CourseCreateWithoutClassSessionsInput, CourseUncheckedCreateWithoutClassSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassSessionsInput
    connect?: CourseWhereUniqueInput
  }

  export type StudentAttendanceCreateNestedManyWithoutSessionInput = {
    create?: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput> | StudentAttendanceCreateWithoutSessionInput[] | StudentAttendanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSessionInput | StudentAttendanceCreateOrConnectWithoutSessionInput[]
    createMany?: StudentAttendanceCreateManySessionInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type StudentAttendanceUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput> | StudentAttendanceCreateWithoutSessionInput[] | StudentAttendanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSessionInput | StudentAttendanceCreateOrConnectWithoutSessionInput[]
    createMany?: StudentAttendanceCreateManySessionInputEnvelope
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutClassSessionsNestedInput = {
    create?: XOR<CourseCreateWithoutClassSessionsInput, CourseUncheckedCreateWithoutClassSessionsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutClassSessionsInput
    upsert?: CourseUpsertWithoutClassSessionsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutClassSessionsInput, CourseUpdateWithoutClassSessionsInput>, CourseUncheckedUpdateWithoutClassSessionsInput>
  }

  export type StudentAttendanceUpdateManyWithoutSessionNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput> | StudentAttendanceCreateWithoutSessionInput[] | StudentAttendanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSessionInput | StudentAttendanceCreateOrConnectWithoutSessionInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutSessionInput | StudentAttendanceUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: StudentAttendanceCreateManySessionInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutSessionInput | StudentAttendanceUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutSessionInput | StudentAttendanceUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput> | StudentAttendanceCreateWithoutSessionInput[] | StudentAttendanceUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: StudentAttendanceCreateOrConnectWithoutSessionInput | StudentAttendanceCreateOrConnectWithoutSessionInput[]
    upsert?: StudentAttendanceUpsertWithWhereUniqueWithoutSessionInput | StudentAttendanceUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: StudentAttendanceCreateManySessionInputEnvelope
    set?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    disconnect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    delete?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    connect?: StudentAttendanceWhereUniqueInput | StudentAttendanceWhereUniqueInput[]
    update?: StudentAttendanceUpdateWithWhereUniqueWithoutSessionInput | StudentAttendanceUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: StudentAttendanceUpdateManyWithWhereWithoutSessionInput | StudentAttendanceUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
  }

  export type ClassSessionCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<ClassSessionCreateWithoutAttendancesInput, ClassSessionUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: ClassSessionCreateOrConnectWithoutAttendancesInput
    connect?: ClassSessionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAttendancesInput = {
    create?: XOR<UserCreateWithoutAttendancesInput, UserUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendancesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAttendanceStatusFieldUpdateOperationsInput = {
    set?: $Enums.AttendanceStatus
  }

  export type ClassSessionUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<ClassSessionCreateWithoutAttendancesInput, ClassSessionUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: ClassSessionCreateOrConnectWithoutAttendancesInput
    upsert?: ClassSessionUpsertWithoutAttendancesInput
    connect?: ClassSessionWhereUniqueInput
    update?: XOR<XOR<ClassSessionUpdateToOneWithWhereWithoutAttendancesInput, ClassSessionUpdateWithoutAttendancesInput>, ClassSessionUncheckedUpdateWithoutAttendancesInput>
  }

  export type UserUpdateOneRequiredWithoutAttendancesNestedInput = {
    create?: XOR<UserCreateWithoutAttendancesInput, UserUncheckedCreateWithoutAttendancesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAttendancesInput
    upsert?: UserUpsertWithoutAttendancesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAttendancesInput, UserUpdateWithoutAttendancesInput>, UserUncheckedUpdateWithoutAttendancesInput>
  }

  export type UserCreateNestedOneWithoutTeacherCourseAssignmentsInput = {
    create?: XOR<UserCreateWithoutTeacherCourseAssignmentsInput, UserUncheckedCreateWithoutTeacherCourseAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherCourseAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutTeacherAssignmentsInput = {
    create?: XOR<CourseCreateWithoutTeacherAssignmentsInput, CourseUncheckedCreateWithoutTeacherAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutTeacherAssignmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedTeachersInput = {
    create?: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTeachersInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTeacherCourseAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutTeacherCourseAssignmentsInput, UserUncheckedCreateWithoutTeacherCourseAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeacherCourseAssignmentsInput
    upsert?: UserUpsertWithoutTeacherCourseAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeacherCourseAssignmentsInput, UserUpdateWithoutTeacherCourseAssignmentsInput>, UserUncheckedUpdateWithoutTeacherCourseAssignmentsInput>
  }

  export type CourseUpdateOneRequiredWithoutTeacherAssignmentsNestedInput = {
    create?: XOR<CourseCreateWithoutTeacherAssignmentsInput, CourseUncheckedCreateWithoutTeacherAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutTeacherAssignmentsInput
    upsert?: CourseUpsertWithoutTeacherAssignmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutTeacherAssignmentsInput, CourseUpdateWithoutTeacherAssignmentsInput>, CourseUncheckedUpdateWithoutTeacherAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedTeachersNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTeachersInput
    upsert?: UserUpsertWithoutAssignedTeachersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTeachersInput, UserUpdateWithoutAssignedTeachersInput>, UserUncheckedUpdateWithoutAssignedTeachersInput>
  }

  export type UserCreateNestedOneWithoutStudentAdvisoryAssignmentInput = {
    create?: XOR<UserCreateWithoutStudentAdvisoryAssignmentInput, UserUncheckedCreateWithoutStudentAdvisoryAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAdvisoryAssignmentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAdvisoryAssignmentsInput = {
    create?: XOR<UserCreateWithoutAdvisoryAssignmentsInput, UserUncheckedCreateWithoutAdvisoryAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdvisoryAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedAdvisoriesInput = {
    create?: XOR<UserCreateWithoutAssignedAdvisoriesInput, UserUncheckedCreateWithoutAssignedAdvisoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAdvisoriesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudentAdvisoryAssignmentNestedInput = {
    create?: XOR<UserCreateWithoutStudentAdvisoryAssignmentInput, UserUncheckedCreateWithoutStudentAdvisoryAssignmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentAdvisoryAssignmentInput
    upsert?: UserUpsertWithoutStudentAdvisoryAssignmentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentAdvisoryAssignmentInput, UserUpdateWithoutStudentAdvisoryAssignmentInput>, UserUncheckedUpdateWithoutStudentAdvisoryAssignmentInput>
  }

  export type UserUpdateOneRequiredWithoutAdvisoryAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutAdvisoryAssignmentsInput, UserUncheckedCreateWithoutAdvisoryAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAdvisoryAssignmentsInput
    upsert?: UserUpsertWithoutAdvisoryAssignmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAdvisoryAssignmentsInput, UserUpdateWithoutAdvisoryAssignmentsInput>, UserUncheckedUpdateWithoutAdvisoryAssignmentsInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedAdvisoriesNestedInput = {
    create?: XOR<UserCreateWithoutAssignedAdvisoriesInput, UserUncheckedCreateWithoutAssignedAdvisoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedAdvisoriesInput
    upsert?: UserUpsertWithoutAssignedAdvisoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedAdvisoriesInput, UserUpdateWithoutAssignedAdvisoriesInput>, UserUncheckedUpdateWithoutAssignedAdvisoriesInput>
  }

  export type UserCreateNestedOneWithoutUploadedFilesInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
  }

  export type CourseMaterialCreateNestedManyWithoutFileInput = {
    create?: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput> | CourseMaterialCreateWithoutFileInput[] | CourseMaterialUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutFileInput | CourseMaterialCreateOrConnectWithoutFileInput[]
    createMany?: CourseMaterialCreateManyFileInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput> | AssignmentCreateWithoutAttachmentsInput[] | AssignmentUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput | AssignmentCreateOrConnectWithoutAttachmentsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type AssignmentSubmissionCreateNestedManyWithoutFilesInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput> | AssignmentSubmissionCreateWithoutFilesInput[] | AssignmentSubmissionUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutFilesInput | AssignmentSubmissionCreateOrConnectWithoutFilesInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type CourseMaterialUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput> | CourseMaterialCreateWithoutFileInput[] | CourseMaterialUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutFileInput | CourseMaterialCreateOrConnectWithoutFileInput[]
    createMany?: CourseMaterialCreateManyFileInputEnvelope
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutAttachmentsInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput> | AssignmentCreateWithoutAttachmentsInput[] | AssignmentUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput | AssignmentCreateOrConnectWithoutAttachmentsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type AssignmentSubmissionUncheckedCreateNestedManyWithoutFilesInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput> | AssignmentSubmissionCreateWithoutFilesInput[] | AssignmentSubmissionUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutFilesInput | AssignmentSubmissionCreateOrConnectWithoutFilesInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutUploadedFilesNestedInput = {
    create?: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUploadedFilesInput
    upsert?: UserUpsertWithoutUploadedFilesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUploadedFilesInput, UserUpdateWithoutUploadedFilesInput>, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type CourseMaterialUpdateManyWithoutFileNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput> | CourseMaterialCreateWithoutFileInput[] | CourseMaterialUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutFileInput | CourseMaterialCreateOrConnectWithoutFileInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutFileInput | CourseMaterialUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CourseMaterialCreateManyFileInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutFileInput | CourseMaterialUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutFileInput | CourseMaterialUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput> | AssignmentCreateWithoutAttachmentsInput[] | AssignmentUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput | AssignmentCreateOrConnectWithoutAttachmentsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutAttachmentsInput | AssignmentUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutAttachmentsInput | AssignmentUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutAttachmentsInput | AssignmentUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type AssignmentSubmissionUpdateManyWithoutFilesNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput> | AssignmentSubmissionCreateWithoutFilesInput[] | AssignmentSubmissionUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutFilesInput | AssignmentSubmissionCreateOrConnectWithoutFilesInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutFilesInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutFilesInput[]
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutFilesInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutFilesInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutFilesInput | AssignmentSubmissionUpdateManyWithWhereWithoutFilesInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type CourseMaterialUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput> | CourseMaterialCreateWithoutFileInput[] | CourseMaterialUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CourseMaterialCreateOrConnectWithoutFileInput | CourseMaterialCreateOrConnectWithoutFileInput[]
    upsert?: CourseMaterialUpsertWithWhereUniqueWithoutFileInput | CourseMaterialUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CourseMaterialCreateManyFileInputEnvelope
    set?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    disconnect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    delete?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    connect?: CourseMaterialWhereUniqueInput | CourseMaterialWhereUniqueInput[]
    update?: CourseMaterialUpdateWithWhereUniqueWithoutFileInput | CourseMaterialUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CourseMaterialUpdateManyWithWhereWithoutFileInput | CourseMaterialUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutAttachmentsNestedInput = {
    create?: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput> | AssignmentCreateWithoutAttachmentsInput[] | AssignmentUncheckedCreateWithoutAttachmentsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutAttachmentsInput | AssignmentCreateOrConnectWithoutAttachmentsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutAttachmentsInput | AssignmentUpsertWithWhereUniqueWithoutAttachmentsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutAttachmentsInput | AssignmentUpdateWithWhereUniqueWithoutAttachmentsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutAttachmentsInput | AssignmentUpdateManyWithWhereWithoutAttachmentsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutFilesNestedInput = {
    create?: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput> | AssignmentSubmissionCreateWithoutFilesInput[] | AssignmentSubmissionUncheckedCreateWithoutFilesInput[]
    connectOrCreate?: AssignmentSubmissionCreateOrConnectWithoutFilesInput | AssignmentSubmissionCreateOrConnectWithoutFilesInput[]
    upsert?: AssignmentSubmissionUpsertWithWhereUniqueWithoutFilesInput | AssignmentSubmissionUpsertWithWhereUniqueWithoutFilesInput[]
    set?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    disconnect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    delete?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    connect?: AssignmentSubmissionWhereUniqueInput | AssignmentSubmissionWhereUniqueInput[]
    update?: AssignmentSubmissionUpdateWithWhereUniqueWithoutFilesInput | AssignmentSubmissionUpdateWithWhereUniqueWithoutFilesInput[]
    updateMany?: AssignmentSubmissionUpdateManyWithWhereWithoutFilesInput | AssignmentSubmissionUpdateManyWithWhereWithoutFilesInput[]
    deleteMany?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
  }

  export type PageConfigurationCreatepermissionsInput = {
    set: string[]
  }

  export type NullableEnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole | null
  }

  export type PageConfigurationUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type EnumNotificationPriorityFieldUpdateOperationsInput = {
    set?: $Enums.NotificationPriority
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumThemeModeFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeMode | EnumThemeModeFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeModeFilter<$PrismaModel> | $Enums.ThemeMode
  }

  export type NestedEnumVisibilityFilter<$PrismaModel = never> = {
    equals?: $Enums.Visibility | EnumVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumVisibilityFilter<$PrismaModel> | $Enums.Visibility
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumThemeModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ThemeMode | EnumThemeModeFieldRefInput<$PrismaModel>
    in?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ThemeMode[] | ListEnumThemeModeFieldRefInput<$PrismaModel>
    not?: NestedEnumThemeModeWithAggregatesFilter<$PrismaModel> | $Enums.ThemeMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumThemeModeFilter<$PrismaModel>
    _max?: NestedEnumThemeModeFilter<$PrismaModel>
  }

  export type NestedEnumVisibilityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Visibility | EnumVisibilityFieldRefInput<$PrismaModel>
    in?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Visibility[] | ListEnumVisibilityFieldRefInput<$PrismaModel>
    not?: NestedEnumVisibilityWithAggregatesFilter<$PrismaModel> | $Enums.Visibility
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVisibilityFilter<$PrismaModel>
    _max?: NestedEnumVisibilityFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumCourseStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseStatus | EnumCourseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseStatusFilter<$PrismaModel> | $Enums.CourseStatus
  }

  export type NestedEnumCourseLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseLevel | EnumCourseLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseLevelFilter<$PrismaModel> | $Enums.CourseLevel
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumCourseStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseStatus | EnumCourseStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseStatus[] | ListEnumCourseStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseStatusWithAggregatesFilter<$PrismaModel> | $Enums.CourseStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseStatusFilter<$PrismaModel>
    _max?: NestedEnumCourseStatusFilter<$PrismaModel>
  }

  export type NestedEnumCourseLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseLevel | EnumCourseLevelFieldRefInput<$PrismaModel>
    in?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseLevel[] | ListEnumCourseLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseLevelWithAggregatesFilter<$PrismaModel> | $Enums.CourseLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseLevelFilter<$PrismaModel>
    _max?: NestedEnumCourseLevelFilter<$PrismaModel>
  }

  export type NestedEnumEnrollmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusFilter<$PrismaModel> | $Enums.EnrollmentStatus
  }

  export type NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EnrollmentStatus | EnumEnrollmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EnrollmentStatus[] | ListEnumEnrollmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEnrollmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.EnrollmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
    _max?: NestedEnumEnrollmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeFilter<$PrismaModel> | $Enums.AssignmentType
  }

  export type NestedEnumAssignmentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusFilter<$PrismaModel> | $Enums.AssignmentStatus
  }

  export type NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentType | EnumAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentType[] | ListEnumAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumAssignmentTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AssignmentStatus | EnumAssignmentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AssignmentStatus[] | ListEnumAssignmentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAssignmentStatusWithAggregatesFilter<$PrismaModel> | $Enums.AssignmentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAssignmentStatusFilter<$PrismaModel>
    _max?: NestedEnumAssignmentStatusFilter<$PrismaModel>
  }

  export type NestedEnumMaterialTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeFilter<$PrismaModel> | $Enums.MaterialType
  }

  export type NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MaterialType | EnumMaterialTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MaterialType[] | ListEnumMaterialTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMaterialTypeWithAggregatesFilter<$PrismaModel> | $Enums.MaterialType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMaterialTypeFilter<$PrismaModel>
    _max?: NestedEnumMaterialTypeFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumAnnouncementPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnouncementPriority | EnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumAnnouncementPriorityFilter<$PrismaModel> | $Enums.AnnouncementPriority
  }

  export type NestedEnumAnnouncementPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AnnouncementPriority | EnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.AnnouncementPriority[] | ListEnumAnnouncementPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumAnnouncementPriorityWithAggregatesFilter<$PrismaModel> | $Enums.AnnouncementPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAnnouncementPriorityFilter<$PrismaModel>
    _max?: NestedEnumAnnouncementPriorityFilter<$PrismaModel>
  }

  export type NestedEnumAttendanceStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusFilter<$PrismaModel> | $Enums.AttendanceStatus
  }

  export type NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AttendanceStatus | EnumAttendanceStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.AttendanceStatus[] | ListEnumAttendanceStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumAttendanceStatusWithAggregatesFilter<$PrismaModel> | $Enums.AttendanceStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAttendanceStatusFilter<$PrismaModel>
    _max?: NestedEnumAttendanceStatusFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableFilter<$PrismaModel> | $Enums.UserRole | null
  }

  export type NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel> | null
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUserRoleNullableWithAggregatesFilter<$PrismaModel> | $Enums.UserRole | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUserRoleNullableFilter<$PrismaModel>
    _max?: NestedEnumUserRoleNullableFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityFilter<$PrismaModel> | $Enums.NotificationPriority
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationPriority | EnumNotificationPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationPriority[] | ListEnumNotificationPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationPriorityWithAggregatesFilter<$PrismaModel> | $Enums.NotificationPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationPriorityFilter<$PrismaModel>
    _max?: NestedEnumNotificationPriorityFilter<$PrismaModel>
  }

  export type UserProfileCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    advisoryTeacher?: UserCreateNestedOneWithoutAdvisoryStudentsInput
  }

  export type UserProfileUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    advisoryTeacherId?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutUserInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
  }

  export type EnrollmentCreateWithoutStudentInput = {
    id?: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutEnrollmentsInput
    enrolledBy: UserCreateNestedOneWithoutEnrollmentsManagedInput
  }

  export type EnrollmentUncheckedCreateWithoutStudentInput = {
    id?: string
    courseId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentCreateManyStudentInputEnvelope = {
    data: EnrollmentCreateManyStudentInput | EnrollmentCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentSubmissionCreateWithoutStudentInput = {
    id?: string
    submittedAt?: Date | string
    textContent?: string | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    files?: FileAttachmentCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionUncheckedCreateWithoutStudentInput = {
    id?: string
    assignmentId: string
    submittedAt?: Date | string
    textContent?: string | null
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeUncheckedCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionCreateOrConnectWithoutStudentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    create: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentSubmissionCreateManyStudentInputEnvelope = {
    data: AssignmentSubmissionCreateManyStudentInput | AssignmentSubmissionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type QuizAttemptCreateWithoutStudentInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
    quiz: QuizCreateNestedOneWithoutAttemptsInput
  }

  export type QuizAttemptUncheckedCreateWithoutStudentInput = {
    id?: string
    quizId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptCreateOrConnectWithoutStudentInput = {
    where: QuizAttemptWhereUniqueInput
    create: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput>
  }

  export type QuizAttemptCreateManyStudentInputEnvelope = {
    data: QuizAttemptCreateManyStudentInput | QuizAttemptCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutStudentInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course?: CourseCreateNestedOneWithoutGradesInput
    assignment?: AssignmentCreateNestedOneWithoutGradesInput
    submission?: AssignmentSubmissionCreateNestedOneWithoutGradeInput
    gradedBy: UserCreateNestedOneWithoutGradedAssignmentsInput
  }

  export type GradeUncheckedCreateWithoutStudentInput = {
    id?: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutStudentInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput>
  }

  export type GradeCreateManyStudentInputEnvelope = {
    data: GradeCreateManyStudentInput | GradeCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type StudentAttendanceCreateWithoutStudentInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
    session: ClassSessionCreateNestedOneWithoutAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateWithoutStudentInput = {
    id?: string
    sessionId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type StudentAttendanceCreateOrConnectWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    create: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentAttendanceCreateManyStudentInputEnvelope = {
    data: StudentAttendanceCreateManyStudentInput | StudentAttendanceCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutInstructorInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutInstructorInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput>
  }

  export type CourseCreateManyInstructorInputEnvelope = {
    data: CourseCreateManyInstructorInput | CourseCreateManyInstructorInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileCreateWithoutAdvisoryTeacherInput = {
    id?: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type UserProfileUncheckedCreateWithoutAdvisoryTeacherInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateOrConnectWithoutAdvisoryTeacherInput = {
    where: UserProfileWhereUniqueInput
    create: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput>
  }

  export type UserProfileCreateManyAdvisoryTeacherInputEnvelope = {
    data: UserProfileCreateManyAdvisoryTeacherInput | UserProfileCreateManyAdvisoryTeacherInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutGradedByInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutGradesInput
    course?: CourseCreateNestedOneWithoutGradesInput
    assignment?: AssignmentCreateNestedOneWithoutGradesInput
    submission?: AssignmentSubmissionCreateNestedOneWithoutGradeInput
  }

  export type GradeUncheckedCreateWithoutGradedByInput = {
    id?: string
    studentId: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutGradedByInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput>
  }

  export type GradeCreateManyGradedByInputEnvelope = {
    data: GradeCreateManyGradedByInput | GradeCreateManyGradedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseAnnouncementCreateWithoutAuthorInput = {
    id?: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAnnouncementsInput
  }

  export type CourseAnnouncementUncheckedCreateWithoutAuthorInput = {
    id?: string
    courseId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementCreateOrConnectWithoutAuthorInput = {
    where: CourseAnnouncementWhereUniqueInput
    create: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput>
  }

  export type CourseAnnouncementCreateManyAuthorInputEnvelope = {
    data: CourseAnnouncementCreateManyAuthorInput | CourseAnnouncementCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAssignmentsInput
    submissions?: AssignmentSubmissionCreateNestedManyWithoutAssignmentInput
    grades?: GradeCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    courseId: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    grades?: GradeUncheckedCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentCreateOrConnectWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AssignmentCreateManyCreatedByInputEnvelope = {
    data: AssignmentCreateManyCreatedByInput | AssignmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutQuizzesInput
    attempts?: QuizAttemptCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutCreatedByInput = {
    id?: string
    courseId: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: QuizAttemptUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutCreatedByInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput>
  }

  export type QuizCreateManyCreatedByInputEnvelope = {
    data: QuizCreateManyCreatedByInput | QuizCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseMaterialCreateWithoutUploadedByInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCourseMaterialsInput
    file?: FileAttachmentCreateNestedOneWithoutCourseMaterialsInput
  }

  export type CourseMaterialUncheckedCreateWithoutUploadedByInput = {
    id?: string
    courseId: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialCreateOrConnectWithoutUploadedByInput = {
    where: CourseMaterialWhereUniqueInput
    create: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput>
  }

  export type CourseMaterialCreateManyUploadedByInputEnvelope = {
    data: CourseMaterialCreateManyUploadedByInput | CourseMaterialCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCreatedByInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCreatedByInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput>
  }

  export type CourseCreateManyCreatedByInputEnvelope = {
    data: CourseCreateManyCreatedByInput | CourseCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutTeacherRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeacherRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeacherRegisteredByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput>
  }

  export type UserCreateManyTeacherRegisteredByInputEnvelope = {
    data: UserCreateManyTeacherRegisteredByInput | UserCreateManyTeacherRegisteredByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudentRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentRegisteredByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput>
  }

  export type UserCreateManyStudentRegisteredByInputEnvelope = {
    data: UserCreateManyStudentRegisteredByInput | UserCreateManyStudentRegisteredByInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCourseAssignmentCreateWithoutAssignedByInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    teacher: UserCreateNestedOneWithoutTeacherCourseAssignmentsInput
    course: CourseCreateNestedOneWithoutTeacherAssignmentsInput
  }

  export type TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput = {
    id?: string
    teacherId: string
    courseId: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentCreateOrConnectWithoutAssignedByInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    create: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type TeacherCourseAssignmentCreateManyAssignedByInputEnvelope = {
    data: TeacherCourseAssignmentCreateManyAssignedByInput | TeacherCourseAssignmentCreateManyAssignedByInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCourseAssignmentCreateWithoutTeacherInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    course: CourseCreateNestedOneWithoutTeacherAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignedTeachersInput
  }

  export type TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput = {
    id?: string
    courseId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentCreateOrConnectWithoutTeacherInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    create: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherCourseAssignmentCreateManyTeacherInputEnvelope = {
    data: TeacherCourseAssignmentCreateManyTeacherInput | TeacherCourseAssignmentCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AdvisoryAssignmentCreateWithoutAssignedByInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    student: UserCreateNestedOneWithoutStudentAdvisoryAssignmentInput
    advisoryTeacher: UserCreateNestedOneWithoutAdvisoryAssignmentsInput
  }

  export type AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput = {
    id?: string
    studentId: string
    advisoryTeacherId: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentCreateOrConnectWithoutAssignedByInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    create: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type AdvisoryAssignmentCreateManyAssignedByInputEnvelope = {
    data: AdvisoryAssignmentCreateManyAssignedByInput | AdvisoryAssignmentCreateManyAssignedByInput[]
    skipDuplicates?: boolean
  }

  export type AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    student: UserCreateNestedOneWithoutStudentAdvisoryAssignmentInput
    assignedBy: UserCreateNestedOneWithoutAssignedAdvisoriesInput
  }

  export type AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput = {
    id?: string
    studentId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentCreateOrConnectWithoutAdvisoryTeacherInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    create: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput>
  }

  export type AdvisoryAssignmentCreateManyAdvisoryTeacherInputEnvelope = {
    data: AdvisoryAssignmentCreateManyAdvisoryTeacherInput | AdvisoryAssignmentCreateManyAdvisoryTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AdvisoryAssignmentCreateWithoutStudentInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    advisoryTeacher: UserCreateNestedOneWithoutAdvisoryAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignedAdvisoriesInput
  }

  export type AdvisoryAssignmentUncheckedCreateWithoutStudentInput = {
    id?: string
    advisoryTeacherId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentCreateOrConnectWithoutStudentInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    create: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
  }

  export type DepartmentCreateWithoutDepartmentHeadInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutDepartmentHeadInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutDepartmentHeadInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput>
  }

  export type DepartmentCreateManyDepartmentHeadInputEnvelope = {
    data: DepartmentCreateManyDepartmentHeadInput | DepartmentCreateManyDepartmentHeadInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutRegisteredTeachersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegisteredTeachersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegisteredTeachersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredTeachersInput, UserUncheckedCreateWithoutRegisteredTeachersInput>
  }

  export type UserCreateWithoutRegisteredStudentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRegisteredStudentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRegisteredStudentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRegisteredStudentsInput, UserUncheckedCreateWithoutRegisteredStudentsInput>
  }

  export type UserActivityCreateWithoutUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserActivityUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type UserActivityCreateOrConnectWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateManyUserInputEnvelope = {
    data: UserActivityCreateManyUserInput | UserActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FileAttachmentCreateWithoutUploadedByInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    courseMaterials?: CourseMaterialCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateWithoutUploadedByInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentUncheckedCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentCreateOrConnectWithoutUploadedByInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type FileAttachmentCreateManyUploadedByInputEnvelope = {
    data: FileAttachmentCreateManyUploadedByInput | FileAttachmentCreateManyUploadedByInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EnrollmentCreateWithoutEnrolledByInput = {
    id?: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutStudentEnrollmentsInput
    course: CourseCreateNestedOneWithoutEnrollmentsInput
  }

  export type EnrollmentUncheckedCreateWithoutEnrolledByInput = {
    id?: string
    studentId: string
    courseId: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutEnrolledByInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput>
  }

  export type EnrollmentCreateManyEnrolledByInputEnvelope = {
    data: EnrollmentCreateManyEnrolledByInput | EnrollmentCreateManyEnrolledByInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserProfileUpsertWithoutUserInput = {
    update: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
    create: XOR<UserProfileCreateWithoutUserInput, UserProfileUncheckedCreateWithoutUserInput>
    where?: UserProfileWhereInput
  }

  export type UserProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: UserProfileWhereInput
    data: XOR<UserProfileUpdateWithoutUserInput, UserProfileUncheckedUpdateWithoutUserInput>
  }

  export type UserProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    advisoryTeacher?: UserUpdateOneWithoutAdvisoryStudentsNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    advisoryTeacherId?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
    create: XOR<EnrollmentCreateWithoutStudentInput, EnrollmentUncheckedCreateWithoutStudentInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutStudentInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutStudentInput, EnrollmentUncheckedUpdateWithoutStudentInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutStudentInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutStudentInput>
  }

  export type EnrollmentScalarWhereInput = {
    AND?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    OR?: EnrollmentScalarWhereInput[]
    NOT?: EnrollmentScalarWhereInput | EnrollmentScalarWhereInput[]
    id?: StringFilter<"Enrollment"> | string
    studentId?: StringFilter<"Enrollment"> | string
    courseId?: StringFilter<"Enrollment"> | string
    enrolledById?: StringFilter<"Enrollment"> | string
    enrollmentDate?: DateTimeFilter<"Enrollment"> | Date | string
    status?: EnumEnrollmentStatusFilter<"Enrollment"> | $Enums.EnrollmentStatus
    finalGrade?: StringNullableFilter<"Enrollment"> | string | null
    finalPoints?: FloatNullableFilter<"Enrollment"> | number | null
    completed?: IntFilter<"Enrollment"> | number
    total?: IntFilter<"Enrollment"> | number
    currentGrade?: FloatNullableFilter<"Enrollment"> | number | null
    attendance?: FloatNullableFilter<"Enrollment"> | number | null
    createdAt?: DateTimeFilter<"Enrollment"> | Date | string
    updatedAt?: DateTimeFilter<"Enrollment"> | Date | string
  }

  export type AssignmentSubmissionUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    update: XOR<AssignmentSubmissionUpdateWithoutStudentInput, AssignmentSubmissionUncheckedUpdateWithoutStudentInput>
    create: XOR<AssignmentSubmissionCreateWithoutStudentInput, AssignmentSubmissionUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentSubmissionUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    data: XOR<AssignmentSubmissionUpdateWithoutStudentInput, AssignmentSubmissionUncheckedUpdateWithoutStudentInput>
  }

  export type AssignmentSubmissionUpdateManyWithWhereWithoutStudentInput = {
    where: AssignmentSubmissionScalarWhereInput
    data: XOR<AssignmentSubmissionUpdateManyMutationInput, AssignmentSubmissionUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssignmentSubmissionScalarWhereInput = {
    AND?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
    OR?: AssignmentSubmissionScalarWhereInput[]
    NOT?: AssignmentSubmissionScalarWhereInput | AssignmentSubmissionScalarWhereInput[]
    id?: StringFilter<"AssignmentSubmission"> | string
    assignmentId?: StringFilter<"AssignmentSubmission"> | string
    studentId?: StringFilter<"AssignmentSubmission"> | string
    submittedAt?: DateTimeFilter<"AssignmentSubmission"> | Date | string
    textContent?: StringNullableFilter<"AssignmentSubmission"> | string | null
  }

  export type QuizAttemptUpsertWithWhereUniqueWithoutStudentInput = {
    where: QuizAttemptWhereUniqueInput
    update: XOR<QuizAttemptUpdateWithoutStudentInput, QuizAttemptUncheckedUpdateWithoutStudentInput>
    create: XOR<QuizAttemptCreateWithoutStudentInput, QuizAttemptUncheckedCreateWithoutStudentInput>
  }

  export type QuizAttemptUpdateWithWhereUniqueWithoutStudentInput = {
    where: QuizAttemptWhereUniqueInput
    data: XOR<QuizAttemptUpdateWithoutStudentInput, QuizAttemptUncheckedUpdateWithoutStudentInput>
  }

  export type QuizAttemptUpdateManyWithWhereWithoutStudentInput = {
    where: QuizAttemptScalarWhereInput
    data: XOR<QuizAttemptUpdateManyMutationInput, QuizAttemptUncheckedUpdateManyWithoutStudentInput>
  }

  export type QuizAttemptScalarWhereInput = {
    AND?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
    OR?: QuizAttemptScalarWhereInput[]
    NOT?: QuizAttemptScalarWhereInput | QuizAttemptScalarWhereInput[]
    id?: StringFilter<"QuizAttempt"> | string
    quizId?: StringFilter<"QuizAttempt"> | string
    studentId?: StringFilter<"QuizAttempt"> | string
    startedAt?: DateTimeFilter<"QuizAttempt"> | Date | string
    submittedAt?: DateTimeNullableFilter<"QuizAttempt"> | Date | string | null
    score?: FloatNullableFilter<"QuizAttempt"> | number | null
    maxPoints?: FloatNullableFilter<"QuizAttempt"> | number | null
    answers?: JsonFilter<"QuizAttempt">
  }

  export type GradeUpsertWithWhereUniqueWithoutStudentInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutStudentInput, GradeUncheckedUpdateWithoutStudentInput>
    create: XOR<GradeCreateWithoutStudentInput, GradeUncheckedCreateWithoutStudentInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutStudentInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutStudentInput, GradeUncheckedUpdateWithoutStudentInput>
  }

  export type GradeUpdateManyWithWhereWithoutStudentInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutStudentInput>
  }

  export type GradeScalarWhereInput = {
    AND?: GradeScalarWhereInput | GradeScalarWhereInput[]
    OR?: GradeScalarWhereInput[]
    NOT?: GradeScalarWhereInput | GradeScalarWhereInput[]
    id?: StringFilter<"Grade"> | string
    studentId?: StringFilter<"Grade"> | string
    courseId?: StringNullableFilter<"Grade"> | string | null
    assignmentId?: StringNullableFilter<"Grade"> | string | null
    submissionId?: StringNullableFilter<"Grade"> | string | null
    letterGrade?: StringFilter<"Grade"> | string
    score?: FloatFilter<"Grade"> | number
    maxPoints?: FloatFilter<"Grade"> | number
    percentage?: FloatNullableFilter<"Grade"> | number | null
    gradedById?: StringFilter<"Grade"> | string
    gradedDate?: DateTimeFilter<"Grade"> | Date | string
    gradingPeriod?: StringNullableFilter<"Grade"> | string | null
    feedback?: StringNullableFilter<"Grade"> | string | null
    isExtraCredit?: BoolFilter<"Grade"> | boolean
    weight?: FloatNullableFilter<"Grade"> | number | null
    createdAt?: DateTimeFilter<"Grade"> | Date | string
    updatedAt?: DateTimeFilter<"Grade"> | Date | string
  }

  export type StudentAttendanceUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    update: XOR<StudentAttendanceUpdateWithoutStudentInput, StudentAttendanceUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentAttendanceCreateWithoutStudentInput, StudentAttendanceUncheckedCreateWithoutStudentInput>
  }

  export type StudentAttendanceUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentAttendanceWhereUniqueInput
    data: XOR<StudentAttendanceUpdateWithoutStudentInput, StudentAttendanceUncheckedUpdateWithoutStudentInput>
  }

  export type StudentAttendanceUpdateManyWithWhereWithoutStudentInput = {
    where: StudentAttendanceScalarWhereInput
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentAttendanceScalarWhereInput = {
    AND?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
    OR?: StudentAttendanceScalarWhereInput[]
    NOT?: StudentAttendanceScalarWhereInput | StudentAttendanceScalarWhereInput[]
    id?: StringFilter<"StudentAttendance"> | string
    sessionId?: StringFilter<"StudentAttendance"> | string
    studentId?: StringFilter<"StudentAttendance"> | string
    status?: EnumAttendanceStatusFilter<"StudentAttendance"> | $Enums.AttendanceStatus
    notes?: StringNullableFilter<"StudentAttendance"> | string | null
    createdAt?: DateTimeFilter<"StudentAttendance"> | Date | string
  }

  export type CourseUpsertWithWhereUniqueWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutInstructorInput, CourseUncheckedUpdateWithoutInstructorInput>
    create: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutInstructorInput, CourseUncheckedUpdateWithoutInstructorInput>
  }

  export type CourseUpdateManyWithWhereWithoutInstructorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutInstructorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    code?: StringFilter<"Course"> | string
    name?: StringFilter<"Course"> | string
    description?: StringFilter<"Course"> | string
    credits?: IntFilter<"Course"> | number
    scheduleDays?: StringNullableListFilter<"Course">
    startTime?: StringFilter<"Course"> | string
    endTime?: StringFilter<"Course"> | string
    location?: StringFilter<"Course"> | string
    building?: StringNullableFilter<"Course"> | string | null
    room?: StringNullableFilter<"Course"> | string | null
    createdById?: StringFilter<"Course"> | string
    instructorId?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    year?: IntFilter<"Course"> | number
    capacity?: IntFilter<"Course"> | number
    enrolled?: IntFilter<"Course"> | number
    status?: EnumCourseStatusFilter<"Course"> | $Enums.CourseStatus
    category?: StringFilter<"Course"> | string
    departmentId?: StringFilter<"Course"> | string
    level?: EnumCourseLevelFilter<"Course"> | $Enums.CourseLevel
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeFilter<"Course"> | Date | string
    enrollmentDeadline?: DateTimeNullableFilter<"Course"> | Date | string | null
    syllabusUrl?: StringNullableFilter<"Course"> | string | null
    studyPlan?: JsonNullableFilter<"Course">
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
  }

  export type UserProfileUpsertWithWhereUniqueWithoutAdvisoryTeacherInput = {
    where: UserProfileWhereUniqueInput
    update: XOR<UserProfileUpdateWithoutAdvisoryTeacherInput, UserProfileUncheckedUpdateWithoutAdvisoryTeacherInput>
    create: XOR<UserProfileCreateWithoutAdvisoryTeacherInput, UserProfileUncheckedCreateWithoutAdvisoryTeacherInput>
  }

  export type UserProfileUpdateWithWhereUniqueWithoutAdvisoryTeacherInput = {
    where: UserProfileWhereUniqueInput
    data: XOR<UserProfileUpdateWithoutAdvisoryTeacherInput, UserProfileUncheckedUpdateWithoutAdvisoryTeacherInput>
  }

  export type UserProfileUpdateManyWithWhereWithoutAdvisoryTeacherInput = {
    where: UserProfileScalarWhereInput
    data: XOR<UserProfileUpdateManyMutationInput, UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherInput>
  }

  export type UserProfileScalarWhereInput = {
    AND?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
    OR?: UserProfileScalarWhereInput[]
    NOT?: UserProfileScalarWhereInput | UserProfileScalarWhereInput[]
    id?: StringFilter<"UserProfile"> | string
    userId?: StringFilter<"UserProfile"> | string
    firstName?: StringFilter<"UserProfile"> | string
    lastName?: StringFilter<"UserProfile"> | string
    dateOfBirth?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    phone?: StringNullableFilter<"UserProfile"> | string | null
    street?: StringNullableFilter<"UserProfile"> | string | null
    city?: StringNullableFilter<"UserProfile"> | string | null
    state?: StringNullableFilter<"UserProfile"> | string | null
    zipCode?: StringNullableFilter<"UserProfile"> | string | null
    country?: StringNullableFilter<"UserProfile"> | string | null
    studentId?: StringNullableFilter<"UserProfile"> | string | null
    grade?: StringNullableFilter<"UserProfile"> | string | null
    gpa?: FloatNullableFilter<"UserProfile"> | number | null
    enrollmentDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    graduationDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    major?: StringNullableFilter<"UserProfile"> | string | null
    minor?: StringNullableFilter<"UserProfile"> | string | null
    employeeId?: StringNullableFilter<"UserProfile"> | string | null
    department?: StringNullableFilter<"UserProfile"> | string | null
    position?: StringNullableFilter<"UserProfile"> | string | null
    hireDate?: DateTimeNullableFilter<"UserProfile"> | Date | string | null
    specialization?: StringNullableListFilter<"UserProfile">
    officeLocation?: StringNullableFilter<"UserProfile"> | string | null
    officeHours?: StringNullableFilter<"UserProfile"> | string | null
    advisoryTeacherId?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactName?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactRelationship?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactPhone?: StringNullableFilter<"UserProfile"> | string | null
    emergencyContactEmail?: StringNullableFilter<"UserProfile"> | string | null
    theme?: EnumThemeModeFilter<"UserProfile"> | $Enums.ThemeMode
    language?: StringFilter<"UserProfile"> | string
    timezone?: StringFilter<"UserProfile"> | string
    emailNotifications?: BoolFilter<"UserProfile"> | boolean
    pushNotifications?: BoolFilter<"UserProfile"> | boolean
    smsNotifications?: BoolFilter<"UserProfile"> | boolean
    profileVisibility?: EnumVisibilityFilter<"UserProfile"> | $Enums.Visibility
    showEmail?: BoolFilter<"UserProfile"> | boolean
    showPhone?: BoolFilter<"UserProfile"> | boolean
    createdAt?: DateTimeFilter<"UserProfile"> | Date | string
    updatedAt?: DateTimeFilter<"UserProfile"> | Date | string
  }

  export type GradeUpsertWithWhereUniqueWithoutGradedByInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutGradedByInput, GradeUncheckedUpdateWithoutGradedByInput>
    create: XOR<GradeCreateWithoutGradedByInput, GradeUncheckedCreateWithoutGradedByInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutGradedByInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutGradedByInput, GradeUncheckedUpdateWithoutGradedByInput>
  }

  export type GradeUpdateManyWithWhereWithoutGradedByInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutGradedByInput>
  }

  export type CourseAnnouncementUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CourseAnnouncementWhereUniqueInput
    update: XOR<CourseAnnouncementUpdateWithoutAuthorInput, CourseAnnouncementUncheckedUpdateWithoutAuthorInput>
    create: XOR<CourseAnnouncementCreateWithoutAuthorInput, CourseAnnouncementUncheckedCreateWithoutAuthorInput>
  }

  export type CourseAnnouncementUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CourseAnnouncementWhereUniqueInput
    data: XOR<CourseAnnouncementUpdateWithoutAuthorInput, CourseAnnouncementUncheckedUpdateWithoutAuthorInput>
  }

  export type CourseAnnouncementUpdateManyWithWhereWithoutAuthorInput = {
    where: CourseAnnouncementScalarWhereInput
    data: XOR<CourseAnnouncementUpdateManyMutationInput, CourseAnnouncementUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CourseAnnouncementScalarWhereInput = {
    AND?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
    OR?: CourseAnnouncementScalarWhereInput[]
    NOT?: CourseAnnouncementScalarWhereInput | CourseAnnouncementScalarWhereInput[]
    id?: StringFilter<"CourseAnnouncement"> | string
    courseId?: StringFilter<"CourseAnnouncement"> | string
    authorId?: StringFilter<"CourseAnnouncement"> | string
    title?: StringFilter<"CourseAnnouncement"> | string
    content?: StringFilter<"CourseAnnouncement"> | string
    priority?: EnumAnnouncementPriorityFilter<"CourseAnnouncement"> | $Enums.AnnouncementPriority
    isImportant?: BoolFilter<"CourseAnnouncement"> | boolean
    createdAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
    updatedAt?: DateTimeFilter<"CourseAnnouncement"> | Date | string
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCreatedByInput, AssignmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCreatedByInput, AssignmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: StringFilter<"Assignment"> | string
    courseId?: StringFilter<"Assignment"> | string
    createdById?: StringFilter<"Assignment"> | string
    title?: StringFilter<"Assignment"> | string
    description?: StringFilter<"Assignment"> | string
    type?: EnumAssignmentTypeFilter<"Assignment"> | $Enums.AssignmentType
    assignedDate?: DateTimeFilter<"Assignment"> | Date | string
    dueDate?: DateTimeFilter<"Assignment"> | Date | string
    maxPoints?: FloatFilter<"Assignment"> | number
    isGroupWork?: BoolFilter<"Assignment"> | boolean
    status?: EnumAssignmentStatusFilter<"Assignment"> | $Enums.AssignmentStatus
    createdAt?: DateTimeFilter<"Assignment"> | Date | string
    updatedAt?: DateTimeFilter<"Assignment"> | Date | string
  }

  export type QuizUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutCreatedByInput, QuizUncheckedUpdateWithoutCreatedByInput>
    create: XOR<QuizCreateWithoutCreatedByInput, QuizUncheckedCreateWithoutCreatedByInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutCreatedByInput, QuizUncheckedUpdateWithoutCreatedByInput>
  }

  export type QuizUpdateManyWithWhereWithoutCreatedByInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type QuizScalarWhereInput = {
    AND?: QuizScalarWhereInput | QuizScalarWhereInput[]
    OR?: QuizScalarWhereInput[]
    NOT?: QuizScalarWhereInput | QuizScalarWhereInput[]
    id?: StringFilter<"Quiz"> | string
    courseId?: StringFilter<"Quiz"> | string
    createdById?: StringFilter<"Quiz"> | string
    title?: StringFilter<"Quiz"> | string
    description?: StringFilter<"Quiz"> | string
    duration?: StringFilter<"Quiz"> | string
    totalQuestions?: IntFilter<"Quiz"> | number
    maxPoints?: FloatFilter<"Quiz"> | number
    dueDate?: DateTimeFilter<"Quiz"> | Date | string
    isTimed?: BoolFilter<"Quiz"> | boolean
    attemptsAllowed?: IntFilter<"Quiz"> | number
    questionsData?: JsonFilter<"Quiz">
    createdAt?: DateTimeFilter<"Quiz"> | Date | string
    updatedAt?: DateTimeFilter<"Quiz"> | Date | string
  }

  export type CourseMaterialUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: CourseMaterialWhereUniqueInput
    update: XOR<CourseMaterialUpdateWithoutUploadedByInput, CourseMaterialUncheckedUpdateWithoutUploadedByInput>
    create: XOR<CourseMaterialCreateWithoutUploadedByInput, CourseMaterialUncheckedCreateWithoutUploadedByInput>
  }

  export type CourseMaterialUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: CourseMaterialWhereUniqueInput
    data: XOR<CourseMaterialUpdateWithoutUploadedByInput, CourseMaterialUncheckedUpdateWithoutUploadedByInput>
  }

  export type CourseMaterialUpdateManyWithWhereWithoutUploadedByInput = {
    where: CourseMaterialScalarWhereInput
    data: XOR<CourseMaterialUpdateManyMutationInput, CourseMaterialUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type CourseMaterialScalarWhereInput = {
    AND?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
    OR?: CourseMaterialScalarWhereInput[]
    NOT?: CourseMaterialScalarWhereInput | CourseMaterialScalarWhereInput[]
    id?: StringFilter<"CourseMaterial"> | string
    courseId?: StringFilter<"CourseMaterial"> | string
    uploadedById?: StringFilter<"CourseMaterial"> | string
    title?: StringFilter<"CourseMaterial"> | string
    description?: StringNullableFilter<"CourseMaterial"> | string | null
    type?: EnumMaterialTypeFilter<"CourseMaterial"> | $Enums.MaterialType
    uploadDate?: DateTimeFilter<"CourseMaterial"> | Date | string
    isRequired?: BoolFilter<"CourseMaterial"> | boolean
    fileId?: StringNullableFilter<"CourseMaterial"> | string | null
    url?: StringNullableFilter<"CourseMaterial"> | string | null
    createdAt?: DateTimeFilter<"CourseMaterial"> | Date | string
    updatedAt?: DateTimeFilter<"CourseMaterial"> | Date | string
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatedByInput, CourseUncheckedUpdateWithoutCreatedByInput>
    create: XOR<CourseCreateWithoutCreatedByInput, CourseUncheckedCreateWithoutCreatedByInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatedByInput, CourseUncheckedUpdateWithoutCreatedByInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatedByInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTeacherRegisteredByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTeacherRegisteredByInput, UserUncheckedUpdateWithoutTeacherRegisteredByInput>
    create: XOR<UserCreateWithoutTeacherRegisteredByInput, UserUncheckedCreateWithoutTeacherRegisteredByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTeacherRegisteredByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTeacherRegisteredByInput, UserUncheckedUpdateWithoutTeacherRegisteredByInput>
  }

  export type UserUpdateManyWithWhereWithoutTeacherRegisteredByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutTeacherRegisteredByInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    isActive?: BoolFilter<"User"> | boolean
    avatar?: StringNullableFilter<"User"> | string | null
    isSupervisor?: BoolFilter<"User"> | boolean
    teacherRegisteredById?: StringNullableFilter<"User"> | string | null
    studentRegisteredById?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutStudentRegisteredByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutStudentRegisteredByInput, UserUncheckedUpdateWithoutStudentRegisteredByInput>
    create: XOR<UserCreateWithoutStudentRegisteredByInput, UserUncheckedCreateWithoutStudentRegisteredByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutStudentRegisteredByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutStudentRegisteredByInput, UserUncheckedUpdateWithoutStudentRegisteredByInput>
  }

  export type UserUpdateManyWithWhereWithoutStudentRegisteredByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutStudentRegisteredByInput>
  }

  export type TeacherCourseAssignmentUpsertWithWhereUniqueWithoutAssignedByInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    update: XOR<TeacherCourseAssignmentUpdateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedUpdateWithoutAssignedByInput>
    create: XOR<TeacherCourseAssignmentCreateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type TeacherCourseAssignmentUpdateWithWhereUniqueWithoutAssignedByInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    data: XOR<TeacherCourseAssignmentUpdateWithoutAssignedByInput, TeacherCourseAssignmentUncheckedUpdateWithoutAssignedByInput>
  }

  export type TeacherCourseAssignmentUpdateManyWithWhereWithoutAssignedByInput = {
    where: TeacherCourseAssignmentScalarWhereInput
    data: XOR<TeacherCourseAssignmentUpdateManyMutationInput, TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByInput>
  }

  export type TeacherCourseAssignmentScalarWhereInput = {
    AND?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
    OR?: TeacherCourseAssignmentScalarWhereInput[]
    NOT?: TeacherCourseAssignmentScalarWhereInput | TeacherCourseAssignmentScalarWhereInput[]
    id?: StringFilter<"TeacherCourseAssignment"> | string
    teacherId?: StringFilter<"TeacherCourseAssignment"> | string
    courseId?: StringFilter<"TeacherCourseAssignment"> | string
    assignedById?: StringFilter<"TeacherCourseAssignment"> | string
    assignedDate?: DateTimeFilter<"TeacherCourseAssignment"> | Date | string
    isActive?: BoolFilter<"TeacherCourseAssignment"> | boolean
    notes?: StringNullableFilter<"TeacherCourseAssignment"> | string | null
  }

  export type TeacherCourseAssignmentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    update: XOR<TeacherCourseAssignmentUpdateWithoutTeacherInput, TeacherCourseAssignmentUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeacherCourseAssignmentCreateWithoutTeacherInput, TeacherCourseAssignmentUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherCourseAssignmentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    data: XOR<TeacherCourseAssignmentUpdateWithoutTeacherInput, TeacherCourseAssignmentUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherCourseAssignmentUpdateManyWithWhereWithoutTeacherInput = {
    where: TeacherCourseAssignmentScalarWhereInput
    data: XOR<TeacherCourseAssignmentUpdateManyMutationInput, TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AdvisoryAssignmentUpsertWithWhereUniqueWithoutAssignedByInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    update: XOR<AdvisoryAssignmentUpdateWithoutAssignedByInput, AdvisoryAssignmentUncheckedUpdateWithoutAssignedByInput>
    create: XOR<AdvisoryAssignmentCreateWithoutAssignedByInput, AdvisoryAssignmentUncheckedCreateWithoutAssignedByInput>
  }

  export type AdvisoryAssignmentUpdateWithWhereUniqueWithoutAssignedByInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    data: XOR<AdvisoryAssignmentUpdateWithoutAssignedByInput, AdvisoryAssignmentUncheckedUpdateWithoutAssignedByInput>
  }

  export type AdvisoryAssignmentUpdateManyWithWhereWithoutAssignedByInput = {
    where: AdvisoryAssignmentScalarWhereInput
    data: XOR<AdvisoryAssignmentUpdateManyMutationInput, AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByInput>
  }

  export type AdvisoryAssignmentScalarWhereInput = {
    AND?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
    OR?: AdvisoryAssignmentScalarWhereInput[]
    NOT?: AdvisoryAssignmentScalarWhereInput | AdvisoryAssignmentScalarWhereInput[]
    id?: StringFilter<"AdvisoryAssignment"> | string
    studentId?: StringFilter<"AdvisoryAssignment"> | string
    advisoryTeacherId?: StringFilter<"AdvisoryAssignment"> | string
    assignedById?: StringFilter<"AdvisoryAssignment"> | string
    assignedDate?: DateTimeFilter<"AdvisoryAssignment"> | Date | string
    isActive?: BoolFilter<"AdvisoryAssignment"> | boolean
    notes?: StringNullableFilter<"AdvisoryAssignment"> | string | null
  }

  export type AdvisoryAssignmentUpsertWithWhereUniqueWithoutAdvisoryTeacherInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    update: XOR<AdvisoryAssignmentUpdateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedUpdateWithoutAdvisoryTeacherInput>
    create: XOR<AdvisoryAssignmentCreateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedCreateWithoutAdvisoryTeacherInput>
  }

  export type AdvisoryAssignmentUpdateWithWhereUniqueWithoutAdvisoryTeacherInput = {
    where: AdvisoryAssignmentWhereUniqueInput
    data: XOR<AdvisoryAssignmentUpdateWithoutAdvisoryTeacherInput, AdvisoryAssignmentUncheckedUpdateWithoutAdvisoryTeacherInput>
  }

  export type AdvisoryAssignmentUpdateManyWithWhereWithoutAdvisoryTeacherInput = {
    where: AdvisoryAssignmentScalarWhereInput
    data: XOR<AdvisoryAssignmentUpdateManyMutationInput, AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherInput>
  }

  export type AdvisoryAssignmentUpsertWithoutStudentInput = {
    update: XOR<AdvisoryAssignmentUpdateWithoutStudentInput, AdvisoryAssignmentUncheckedUpdateWithoutStudentInput>
    create: XOR<AdvisoryAssignmentCreateWithoutStudentInput, AdvisoryAssignmentUncheckedCreateWithoutStudentInput>
    where?: AdvisoryAssignmentWhereInput
  }

  export type AdvisoryAssignmentUpdateToOneWithWhereWithoutStudentInput = {
    where?: AdvisoryAssignmentWhereInput
    data: XOR<AdvisoryAssignmentUpdateWithoutStudentInput, AdvisoryAssignmentUncheckedUpdateWithoutStudentInput>
  }

  export type AdvisoryAssignmentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    advisoryTeacher?: UserUpdateOneRequiredWithoutAdvisoryAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedAdvisoriesNestedInput
  }

  export type AdvisoryAssignmentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    advisoryTeacherId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutDepartmentHeadInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutDepartmentHeadInput, DepartmentUncheckedUpdateWithoutDepartmentHeadInput>
    create: XOR<DepartmentCreateWithoutDepartmentHeadInput, DepartmentUncheckedCreateWithoutDepartmentHeadInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutDepartmentHeadInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutDepartmentHeadInput, DepartmentUncheckedUpdateWithoutDepartmentHeadInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutDepartmentHeadInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutDepartmentHeadInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    description?: StringNullableFilter<"Department"> | string | null
    departmentHeadId?: StringNullableFilter<"Department"> | string | null
    createdAt?: DateTimeFilter<"Department"> | Date | string
    updatedAt?: DateTimeFilter<"Department"> | Date | string
  }

  export type UserUpsertWithoutRegisteredTeachersInput = {
    update: XOR<UserUpdateWithoutRegisteredTeachersInput, UserUncheckedUpdateWithoutRegisteredTeachersInput>
    create: XOR<UserCreateWithoutRegisteredTeachersInput, UserUncheckedCreateWithoutRegisteredTeachersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredTeachersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredTeachersInput, UserUncheckedUpdateWithoutRegisteredTeachersInput>
  }

  export type UserUpdateWithoutRegisteredTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutRegisteredStudentsInput = {
    update: XOR<UserUpdateWithoutRegisteredStudentsInput, UserUncheckedUpdateWithoutRegisteredStudentsInput>
    create: XOR<UserCreateWithoutRegisteredStudentsInput, UserUncheckedCreateWithoutRegisteredStudentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRegisteredStudentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRegisteredStudentsInput, UserUncheckedUpdateWithoutRegisteredStudentsInput>
  }

  export type UserUpdateWithoutRegisteredStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutRegisteredStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    update: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    data: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithWhereWithoutUserInput = {
    where: UserActivityScalarWhereInput
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActivityScalarWhereInput = {
    AND?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    OR?: UserActivityScalarWhereInput[]
    NOT?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    id?: StringFilter<"UserActivity"> | string
    userId?: StringFilter<"UserActivity"> | string
    action?: StringFilter<"UserActivity"> | string
    details?: JsonNullableFilter<"UserActivity">
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
    createdAt?: DateTimeFilter<"UserActivity"> | Date | string
  }

  export type FileAttachmentUpsertWithWhereUniqueWithoutUploadedByInput = {
    where: FileAttachmentWhereUniqueInput
    update: XOR<FileAttachmentUpdateWithoutUploadedByInput, FileAttachmentUncheckedUpdateWithoutUploadedByInput>
    create: XOR<FileAttachmentCreateWithoutUploadedByInput, FileAttachmentUncheckedCreateWithoutUploadedByInput>
  }

  export type FileAttachmentUpdateWithWhereUniqueWithoutUploadedByInput = {
    where: FileAttachmentWhereUniqueInput
    data: XOR<FileAttachmentUpdateWithoutUploadedByInput, FileAttachmentUncheckedUpdateWithoutUploadedByInput>
  }

  export type FileAttachmentUpdateManyWithWhereWithoutUploadedByInput = {
    where: FileAttachmentScalarWhereInput
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyWithoutUploadedByInput>
  }

  export type FileAttachmentScalarWhereInput = {
    AND?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
    OR?: FileAttachmentScalarWhereInput[]
    NOT?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
    id?: StringFilter<"FileAttachment"> | string
    filename?: StringFilter<"FileAttachment"> | string
    originalName?: StringFilter<"FileAttachment"> | string
    mimeType?: StringFilter<"FileAttachment"> | string
    fileSize?: BigIntFilter<"FileAttachment"> | bigint | number
    path?: StringFilter<"FileAttachment"> | string
    uploadedById?: StringFilter<"FileAttachment"> | string
    createdAt?: DateTimeFilter<"FileAttachment"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: StringNullableFilter<"AuditLog"> | string | null
    action?: StringFilter<"AuditLog"> | string
    resource?: StringFilter<"AuditLog"> | string
    resourceId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutEnrolledByInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutEnrolledByInput, EnrollmentUncheckedUpdateWithoutEnrolledByInput>
    create: XOR<EnrollmentCreateWithoutEnrolledByInput, EnrollmentUncheckedCreateWithoutEnrolledByInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutEnrolledByInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutEnrolledByInput, EnrollmentUncheckedUpdateWithoutEnrolledByInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutEnrolledByInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutEnrolledByInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    priority?: EnumNotificationPriorityFilter<"Notification"> | $Enums.NotificationPriority
    isRead?: BoolFilter<"Notification"> | boolean
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    courseId?: StringNullableFilter<"Notification"> | string | null
    assignmentId?: StringNullableFilter<"Notification"> | string | null
    gradeId?: StringNullableFilter<"Notification"> | string | null
    metadata?: JsonNullableFilter<"Notification">
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    token?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    isActive?: BoolFilter<"Session"> | boolean
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserCreateWithoutAdvisoryStudentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdvisoryStudentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdvisoryStudentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdvisoryStudentsInput, UserUncheckedCreateWithoutAdvisoryStudentsInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAdvisoryStudentsInput = {
    update: XOR<UserUpdateWithoutAdvisoryStudentsInput, UserUncheckedUpdateWithoutAdvisoryStudentsInput>
    create: XOR<UserCreateWithoutAdvisoryStudentsInput, UserUncheckedCreateWithoutAdvisoryStudentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdvisoryStudentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdvisoryStudentsInput, UserUncheckedUpdateWithoutAdvisoryStudentsInput>
  }

  export type UserUpdateWithoutAdvisoryStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdvisoryStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUserActivityInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserActivityInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserActivityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserActivityInput, UserUncheckedCreateWithoutUserActivityInput>
  }

  export type UserUpsertWithoutUserActivityInput = {
    update: XOR<UserUpdateWithoutUserActivityInput, UserUncheckedUpdateWithoutUserActivityInput>
    create: XOR<UserCreateWithoutUserActivityInput, UserUncheckedCreateWithoutUserActivityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserActivityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserActivityInput, UserUncheckedUpdateWithoutUserActivityInput>
  }

  export type UserUpdateWithoutUserActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    id?: string
    role: $Enums.UserRole
    requiresSupervisor?: boolean
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    role: $Enums.UserRole
    requiresSupervisor?: boolean
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    id?: StringFilter<"RolePermission"> | string
    role?: EnumUserRoleFilter<"RolePermission"> | $Enums.UserRole
    permissionId?: StringFilter<"RolePermission"> | string
    requiresSupervisor?: BoolFilter<"RolePermission"> | boolean
  }

  export type PermissionCreateWithoutRolePermissionsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
  }

  export type PermissionUncheckedCreateWithoutRolePermissionsInput = {
    id?: string
    name: string
    description?: string | null
    category?: string | null
    createdAt?: Date | string
  }

  export type PermissionCreateOrConnectWithoutRolePermissionsInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
  }

  export type PermissionUpsertWithoutRolePermissionsInput = {
    update: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
    create: XOR<PermissionCreateWithoutRolePermissionsInput, PermissionUncheckedCreateWithoutRolePermissionsInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolePermissionsInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolePermissionsInput, PermissionUncheckedUpdateWithoutRolePermissionsInput>
  }

  export type PermissionUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateWithoutRolePermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagedDepartmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagedDepartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
  }

  export type CourseCreateWithoutDepartmentInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutDepartmentInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseCreateManyDepartmentInputEnvelope = {
    data: CourseCreateManyDepartmentInput | CourseCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutManagedDepartmentsInput = {
    update: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
    create: XOR<UserCreateWithoutManagedDepartmentsInput, UserUncheckedCreateWithoutManagedDepartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedDepartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedDepartmentsInput, UserUncheckedUpdateWithoutManagedDepartmentsInput>
  }

  export type UserUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedDepartmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
  }

  export type CourseUpdateManyWithWhereWithoutDepartmentInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
  }

  export type UserCreateWithoutTaughtCoursesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTaughtCoursesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTaughtCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTaughtCoursesInput, UserUncheckedCreateWithoutTaughtCoursesInput>
  }

  export type DepartmentCreateWithoutCoursesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    departmentHead?: UserCreateNestedOneWithoutManagedDepartmentsInput
  }

  export type DepartmentUncheckedCreateWithoutCoursesInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentHeadId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentCreateOrConnectWithoutCoursesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
  }

  export type CourseCreateWithoutPrerequisiteForInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPrerequisiteForInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPrerequisiteForInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput>
  }

  export type CourseCreateWithoutPrerequisitesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutPrerequisitesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPrerequisitesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
  }

  export type EnrollmentCreateWithoutCourseInput = {
    id?: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutStudentEnrollmentsInput
    enrolledBy: UserCreateNestedOneWithoutEnrollmentsManagedInput
  }

  export type EnrollmentUncheckedCreateWithoutCourseInput = {
    id?: string
    studentId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentCreateOrConnectWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentCreateManyCourseInputEnvelope = {
    data: EnrollmentCreateManyCourseInput | EnrollmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutCourseInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedAssignmentsInput
    submissions?: AssignmentSubmissionCreateNestedManyWithoutAssignmentInput
    grades?: GradeCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUncheckedCreateWithoutCourseInput = {
    id?: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    grades?: GradeUncheckedCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentCreateOrConnectWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentCreateManyCourseInputEnvelope = {
    data: AssignmentCreateManyCourseInput | AssignmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseMaterialCreateWithoutCourseInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedMaterialsInput
    file?: FileAttachmentCreateNestedOneWithoutCourseMaterialsInput
  }

  export type CourseMaterialUncheckedCreateWithoutCourseInput = {
    id?: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialCreateOrConnectWithoutCourseInput = {
    where: CourseMaterialWhereUniqueInput
    create: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput>
  }

  export type CourseMaterialCreateManyCourseInputEnvelope = {
    data: CourseMaterialCreateManyCourseInput | CourseMaterialCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type QuizCreateWithoutCourseInput = {
    id?: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedQuizzesInput
    attempts?: QuizAttemptCreateNestedManyWithoutQuizInput
  }

  export type QuizUncheckedCreateWithoutCourseInput = {
    id?: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    attempts?: QuizAttemptUncheckedCreateNestedManyWithoutQuizInput
  }

  export type QuizCreateOrConnectWithoutCourseInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput>
  }

  export type QuizCreateManyCourseInputEnvelope = {
    data: QuizCreateManyCourseInput | QuizCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseAnnouncementCreateWithoutCourseInput = {
    id?: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    author: UserCreateNestedOneWithoutCourseAnnouncementsInput
  }

  export type CourseAnnouncementUncheckedCreateWithoutCourseInput = {
    id?: string
    authorId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementCreateOrConnectWithoutCourseInput = {
    where: CourseAnnouncementWhereUniqueInput
    create: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput>
  }

  export type CourseAnnouncementCreateManyCourseInputEnvelope = {
    data: CourseAnnouncementCreateManyCourseInput | CourseAnnouncementCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type ClassSessionCreateWithoutCourseInput = {
    id?: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: StudentAttendanceCreateNestedManyWithoutSessionInput
  }

  export type ClassSessionUncheckedCreateWithoutCourseInput = {
    id?: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ClassSessionCreateOrConnectWithoutCourseInput = {
    where: ClassSessionWhereUniqueInput
    create: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput>
  }

  export type ClassSessionCreateManyCourseInputEnvelope = {
    data: ClassSessionCreateManyCourseInput | ClassSessionCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutCourseInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutGradesInput
    assignment?: AssignmentCreateNestedOneWithoutGradesInput
    submission?: AssignmentSubmissionCreateNestedOneWithoutGradeInput
    gradedBy: UserCreateNestedOneWithoutGradedAssignmentsInput
  }

  export type GradeUncheckedCreateWithoutCourseInput = {
    id?: string
    studentId: string
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutCourseInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput>
  }

  export type GradeCreateManyCourseInputEnvelope = {
    data: GradeCreateManyCourseInput | GradeCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCourseAssignmentCreateWithoutCourseInput = {
    id?: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
    teacher: UserCreateNestedOneWithoutTeacherCourseAssignmentsInput
    assignedBy: UserCreateNestedOneWithoutAssignedTeachersInput
  }

  export type TeacherCourseAssignmentUncheckedCreateWithoutCourseInput = {
    id?: string
    teacherId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentCreateOrConnectWithoutCourseInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    create: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput>
  }

  export type TeacherCourseAssignmentCreateManyCourseInputEnvelope = {
    data: TeacherCourseAssignmentCreateManyCourseInput | TeacherCourseAssignmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedCoursesInput = {
    update: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutTaughtCoursesInput = {
    update: XOR<UserUpdateWithoutTaughtCoursesInput, UserUncheckedUpdateWithoutTaughtCoursesInput>
    create: XOR<UserCreateWithoutTaughtCoursesInput, UserUncheckedCreateWithoutTaughtCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTaughtCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTaughtCoursesInput, UserUncheckedUpdateWithoutTaughtCoursesInput>
  }

  export type UserUpdateWithoutTaughtCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTaughtCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type DepartmentUpsertWithoutCoursesInput = {
    update: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoursesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type DepartmentUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    departmentHead?: UserUpdateOneWithoutManagedDepartmentsNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentHeadId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpsertWithWhereUniqueWithoutPrerequisiteForInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutPrerequisiteForInput, CourseUncheckedUpdateWithoutPrerequisiteForInput>
    create: XOR<CourseCreateWithoutPrerequisiteForInput, CourseUncheckedCreateWithoutPrerequisiteForInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutPrerequisiteForInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutPrerequisiteForInput, CourseUncheckedUpdateWithoutPrerequisiteForInput>
  }

  export type CourseUpdateManyWithWhereWithoutPrerequisiteForInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutPrerequisiteForInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutPrerequisitesInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutPrerequisitesInput, CourseUncheckedUpdateWithoutPrerequisitesInput>
    create: XOR<CourseCreateWithoutPrerequisitesInput, CourseUncheckedCreateWithoutPrerequisitesInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutPrerequisitesInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutPrerequisitesInput, CourseUncheckedUpdateWithoutPrerequisitesInput>
  }

  export type CourseUpdateManyWithWhereWithoutPrerequisitesInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutPrerequisitesInput>
  }

  export type EnrollmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    update: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
    create: XOR<EnrollmentCreateWithoutCourseInput, EnrollmentUncheckedCreateWithoutCourseInput>
  }

  export type EnrollmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: EnrollmentWhereUniqueInput
    data: XOR<EnrollmentUpdateWithoutCourseInput, EnrollmentUncheckedUpdateWithoutCourseInput>
  }

  export type EnrollmentUpdateManyWithWhereWithoutCourseInput = {
    where: EnrollmentScalarWhereInput
    data: XOR<EnrollmentUpdateManyMutationInput, EnrollmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCourseInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseMaterialUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseMaterialWhereUniqueInput
    update: XOR<CourseMaterialUpdateWithoutCourseInput, CourseMaterialUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseMaterialCreateWithoutCourseInput, CourseMaterialUncheckedCreateWithoutCourseInput>
  }

  export type CourseMaterialUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseMaterialWhereUniqueInput
    data: XOR<CourseMaterialUpdateWithoutCourseInput, CourseMaterialUncheckedUpdateWithoutCourseInput>
  }

  export type CourseMaterialUpdateManyWithWhereWithoutCourseInput = {
    where: CourseMaterialScalarWhereInput
    data: XOR<CourseMaterialUpdateManyMutationInput, CourseMaterialUncheckedUpdateManyWithoutCourseInput>
  }

  export type QuizUpsertWithWhereUniqueWithoutCourseInput = {
    where: QuizWhereUniqueInput
    update: XOR<QuizUpdateWithoutCourseInput, QuizUncheckedUpdateWithoutCourseInput>
    create: XOR<QuizCreateWithoutCourseInput, QuizUncheckedCreateWithoutCourseInput>
  }

  export type QuizUpdateWithWhereUniqueWithoutCourseInput = {
    where: QuizWhereUniqueInput
    data: XOR<QuizUpdateWithoutCourseInput, QuizUncheckedUpdateWithoutCourseInput>
  }

  export type QuizUpdateManyWithWhereWithoutCourseInput = {
    where: QuizScalarWhereInput
    data: XOR<QuizUpdateManyMutationInput, QuizUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseAnnouncementUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseAnnouncementWhereUniqueInput
    update: XOR<CourseAnnouncementUpdateWithoutCourseInput, CourseAnnouncementUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseAnnouncementCreateWithoutCourseInput, CourseAnnouncementUncheckedCreateWithoutCourseInput>
  }

  export type CourseAnnouncementUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseAnnouncementWhereUniqueInput
    data: XOR<CourseAnnouncementUpdateWithoutCourseInput, CourseAnnouncementUncheckedUpdateWithoutCourseInput>
  }

  export type CourseAnnouncementUpdateManyWithWhereWithoutCourseInput = {
    where: CourseAnnouncementScalarWhereInput
    data: XOR<CourseAnnouncementUpdateManyMutationInput, CourseAnnouncementUncheckedUpdateManyWithoutCourseInput>
  }

  export type ClassSessionUpsertWithWhereUniqueWithoutCourseInput = {
    where: ClassSessionWhereUniqueInput
    update: XOR<ClassSessionUpdateWithoutCourseInput, ClassSessionUncheckedUpdateWithoutCourseInput>
    create: XOR<ClassSessionCreateWithoutCourseInput, ClassSessionUncheckedCreateWithoutCourseInput>
  }

  export type ClassSessionUpdateWithWhereUniqueWithoutCourseInput = {
    where: ClassSessionWhereUniqueInput
    data: XOR<ClassSessionUpdateWithoutCourseInput, ClassSessionUncheckedUpdateWithoutCourseInput>
  }

  export type ClassSessionUpdateManyWithWhereWithoutCourseInput = {
    where: ClassSessionScalarWhereInput
    data: XOR<ClassSessionUpdateManyMutationInput, ClassSessionUncheckedUpdateManyWithoutCourseInput>
  }

  export type ClassSessionScalarWhereInput = {
    AND?: ClassSessionScalarWhereInput | ClassSessionScalarWhereInput[]
    OR?: ClassSessionScalarWhereInput[]
    NOT?: ClassSessionScalarWhereInput | ClassSessionScalarWhereInput[]
    id?: StringFilter<"ClassSession"> | string
    courseId?: StringFilter<"ClassSession"> | string
    date?: DateTimeFilter<"ClassSession"> | Date | string
    topic?: StringFilter<"ClassSession"> | string
    location?: StringFilter<"ClassSession"> | string
    notes?: StringNullableFilter<"ClassSession"> | string | null
    cancelled?: BoolFilter<"ClassSession"> | boolean
    createdAt?: DateTimeFilter<"ClassSession"> | Date | string
    updatedAt?: DateTimeFilter<"ClassSession"> | Date | string
  }

  export type GradeUpsertWithWhereUniqueWithoutCourseInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutCourseInput, GradeUncheckedUpdateWithoutCourseInput>
    create: XOR<GradeCreateWithoutCourseInput, GradeUncheckedCreateWithoutCourseInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutCourseInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutCourseInput, GradeUncheckedUpdateWithoutCourseInput>
  }

  export type GradeUpdateManyWithWhereWithoutCourseInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutCourseInput>
  }

  export type TeacherCourseAssignmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    update: XOR<TeacherCourseAssignmentUpdateWithoutCourseInput, TeacherCourseAssignmentUncheckedUpdateWithoutCourseInput>
    create: XOR<TeacherCourseAssignmentCreateWithoutCourseInput, TeacherCourseAssignmentUncheckedCreateWithoutCourseInput>
  }

  export type TeacherCourseAssignmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: TeacherCourseAssignmentWhereUniqueInput
    data: XOR<TeacherCourseAssignmentUpdateWithoutCourseInput, TeacherCourseAssignmentUncheckedUpdateWithoutCourseInput>
  }

  export type TeacherCourseAssignmentUpdateManyWithWhereWithoutCourseInput = {
    where: TeacherCourseAssignmentScalarWhereInput
    data: XOR<TeacherCourseAssignmentUpdateManyMutationInput, TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserCreateWithoutStudentEnrollmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentEnrollmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentEnrollmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentEnrollmentsInput, UserUncheckedCreateWithoutStudentEnrollmentsInput>
  }

  export type CourseCreateWithoutEnrollmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutEnrollmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutEnrollmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
  }

  export type UserCreateWithoutEnrollmentsManagedInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEnrollmentsManagedInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEnrollmentsManagedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEnrollmentsManagedInput, UserUncheckedCreateWithoutEnrollmentsManagedInput>
  }

  export type UserUpsertWithoutStudentEnrollmentsInput = {
    update: XOR<UserUpdateWithoutStudentEnrollmentsInput, UserUncheckedUpdateWithoutStudentEnrollmentsInput>
    create: XOR<UserCreateWithoutStudentEnrollmentsInput, UserUncheckedCreateWithoutStudentEnrollmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentEnrollmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentEnrollmentsInput, UserUncheckedUpdateWithoutStudentEnrollmentsInput>
  }

  export type UserUpdateWithoutStudentEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithoutEnrollmentsInput = {
    update: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
    create: XOR<CourseCreateWithoutEnrollmentsInput, CourseUncheckedCreateWithoutEnrollmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutEnrollmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutEnrollmentsInput, CourseUncheckedUpdateWithoutEnrollmentsInput>
  }

  export type CourseUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutEnrollmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutEnrollmentsManagedInput = {
    update: XOR<UserUpdateWithoutEnrollmentsManagedInput, UserUncheckedUpdateWithoutEnrollmentsManagedInput>
    create: XOR<UserCreateWithoutEnrollmentsManagedInput, UserUncheckedCreateWithoutEnrollmentsManagedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEnrollmentsManagedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEnrollmentsManagedInput, UserUncheckedUpdateWithoutEnrollmentsManagedInput>
  }

  export type UserUpdateWithoutEnrollmentsManagedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEnrollmentsManagedInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutAssignmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAssignmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
  }

  export type UserCreateWithoutCreatedAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedAssignmentsInput, UserUncheckedCreateWithoutCreatedAssignmentsInput>
  }

  export type AssignmentSubmissionCreateWithoutAssignmentInput = {
    id?: string
    submittedAt?: Date | string
    textContent?: string | null
    student: UserCreateNestedOneWithoutAssignmentSubmissionsInput
    files?: FileAttachmentCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionUncheckedCreateWithoutAssignmentInput = {
    id?: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionFilesInput
    grade?: GradeUncheckedCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionCreateOrConnectWithoutAssignmentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    create: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentSubmissionCreateManyAssignmentInputEnvelope = {
    data: AssignmentSubmissionCreateManyAssignmentInput | AssignmentSubmissionCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type GradeCreateWithoutAssignmentInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutGradesInput
    course?: CourseCreateNestedOneWithoutGradesInput
    submission?: AssignmentSubmissionCreateNestedOneWithoutGradeInput
    gradedBy: UserCreateNestedOneWithoutGradedAssignmentsInput
  }

  export type GradeUncheckedCreateWithoutAssignmentInput = {
    id?: string
    studentId: string
    courseId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutAssignmentInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput>
  }

  export type GradeCreateManyAssignmentInputEnvelope = {
    data: GradeCreateManyAssignmentInput | GradeCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type FileAttachmentCreateWithoutAssignmentAttachmentsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutFileInput
    submissionFiles?: AssignmentSubmissionCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    uploadedById: string
    createdAt?: Date | string
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutFileInput
    submissionFiles?: AssignmentSubmissionUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentCreateOrConnectWithoutAssignmentAttachmentsInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput>
  }

  export type CourseUpsertWithoutAssignmentsInput = {
    update: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type CourseUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCreatedAssignmentsInput = {
    update: XOR<UserUpdateWithoutCreatedAssignmentsInput, UserUncheckedUpdateWithoutCreatedAssignmentsInput>
    create: XOR<UserCreateWithoutCreatedAssignmentsInput, UserUncheckedCreateWithoutCreatedAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedAssignmentsInput, UserUncheckedUpdateWithoutCreatedAssignmentsInput>
  }

  export type UserUpdateWithoutCreatedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AssignmentSubmissionUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    update: XOR<AssignmentSubmissionUpdateWithoutAssignmentInput, AssignmentSubmissionUncheckedUpdateWithoutAssignmentInput>
    create: XOR<AssignmentSubmissionCreateWithoutAssignmentInput, AssignmentSubmissionUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentSubmissionUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentSubmissionWhereUniqueInput
    data: XOR<AssignmentSubmissionUpdateWithoutAssignmentInput, AssignmentSubmissionUncheckedUpdateWithoutAssignmentInput>
  }

  export type AssignmentSubmissionUpdateManyWithWhereWithoutAssignmentInput = {
    where: AssignmentSubmissionScalarWhereInput
    data: XOR<AssignmentSubmissionUpdateManyMutationInput, AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type GradeUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: GradeWhereUniqueInput
    update: XOR<GradeUpdateWithoutAssignmentInput, GradeUncheckedUpdateWithoutAssignmentInput>
    create: XOR<GradeCreateWithoutAssignmentInput, GradeUncheckedCreateWithoutAssignmentInput>
  }

  export type GradeUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: GradeWhereUniqueInput
    data: XOR<GradeUpdateWithoutAssignmentInput, GradeUncheckedUpdateWithoutAssignmentInput>
  }

  export type GradeUpdateManyWithWhereWithoutAssignmentInput = {
    where: GradeScalarWhereInput
    data: XOR<GradeUpdateManyMutationInput, GradeUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type FileAttachmentUpsertWithWhereUniqueWithoutAssignmentAttachmentsInput = {
    where: FileAttachmentWhereUniqueInput
    update: XOR<FileAttachmentUpdateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedUpdateWithoutAssignmentAttachmentsInput>
    create: XOR<FileAttachmentCreateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedCreateWithoutAssignmentAttachmentsInput>
  }

  export type FileAttachmentUpdateWithWhereUniqueWithoutAssignmentAttachmentsInput = {
    where: FileAttachmentWhereUniqueInput
    data: XOR<FileAttachmentUpdateWithoutAssignmentAttachmentsInput, FileAttachmentUncheckedUpdateWithoutAssignmentAttachmentsInput>
  }

  export type FileAttachmentUpdateManyWithWhereWithoutAssignmentAttachmentsInput = {
    where: FileAttachmentScalarWhereInput
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsInput>
  }

  export type AssignmentCreateWithoutSubmissionsInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssignmentsInput
    grades?: GradeCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSubmissionsInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    grades?: GradeUncheckedCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentCreateOrConnectWithoutSubmissionsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutAssignmentSubmissionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignmentSubmissionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignmentSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentSubmissionsInput, UserUncheckedCreateWithoutAssignmentSubmissionsInput>
  }

  export type FileAttachmentCreateWithoutSubmissionFilesInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentCreateNestedManyWithoutAttachmentsInput
  }

  export type FileAttachmentUncheckedCreateWithoutSubmissionFilesInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    uploadedById: string
    createdAt?: Date | string
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutFileInput
    assignmentAttachments?: AssignmentUncheckedCreateNestedManyWithoutAttachmentsInput
  }

  export type FileAttachmentCreateOrConnectWithoutSubmissionFilesInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput>
  }

  export type GradeCreateWithoutSubmissionInput = {
    id?: string
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutGradesInput
    course?: CourseCreateNestedOneWithoutGradesInput
    assignment?: AssignmentCreateNestedOneWithoutGradesInput
    gradedBy: UserCreateNestedOneWithoutGradedAssignmentsInput
  }

  export type GradeUncheckedCreateWithoutSubmissionInput = {
    id?: string
    studentId: string
    courseId?: string | null
    assignmentId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateOrConnectWithoutSubmissionInput = {
    where: GradeWhereUniqueInput
    create: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
  }

  export type AssignmentUpsertWithoutSubmissionsInput = {
    update: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<AssignmentCreateWithoutSubmissionsInput, AssignmentUncheckedCreateWithoutSubmissionsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutSubmissionsInput, AssignmentUncheckedUpdateWithoutSubmissionsInput>
  }

  export type AssignmentUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput
    grades?: GradeUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    grades?: GradeUncheckedUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type UserUpsertWithoutAssignmentSubmissionsInput = {
    update: XOR<UserUpdateWithoutAssignmentSubmissionsInput, UserUncheckedUpdateWithoutAssignmentSubmissionsInput>
    create: XOR<UserCreateWithoutAssignmentSubmissionsInput, UserUncheckedCreateWithoutAssignmentSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentSubmissionsInput, UserUncheckedUpdateWithoutAssignmentSubmissionsInput>
  }

  export type UserUpdateWithoutAssignmentSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentSubmissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FileAttachmentUpsertWithWhereUniqueWithoutSubmissionFilesInput = {
    where: FileAttachmentWhereUniqueInput
    update: XOR<FileAttachmentUpdateWithoutSubmissionFilesInput, FileAttachmentUncheckedUpdateWithoutSubmissionFilesInput>
    create: XOR<FileAttachmentCreateWithoutSubmissionFilesInput, FileAttachmentUncheckedCreateWithoutSubmissionFilesInput>
  }

  export type FileAttachmentUpdateWithWhereUniqueWithoutSubmissionFilesInput = {
    where: FileAttachmentWhereUniqueInput
    data: XOR<FileAttachmentUpdateWithoutSubmissionFilesInput, FileAttachmentUncheckedUpdateWithoutSubmissionFilesInput>
  }

  export type FileAttachmentUpdateManyWithWhereWithoutSubmissionFilesInput = {
    where: FileAttachmentScalarWhereInput
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesInput>
  }

  export type GradeUpsertWithoutSubmissionInput = {
    update: XOR<GradeUpdateWithoutSubmissionInput, GradeUncheckedUpdateWithoutSubmissionInput>
    create: XOR<GradeCreateWithoutSubmissionInput, GradeUncheckedCreateWithoutSubmissionInput>
    where?: GradeWhereInput
  }

  export type GradeUpdateToOneWithWhereWithoutSubmissionInput = {
    where?: GradeWhereInput
    data: XOR<GradeUpdateWithoutSubmissionInput, GradeUncheckedUpdateWithoutSubmissionInput>
  }

  export type GradeUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutGradesNestedInput
    course?: CourseUpdateOneWithoutGradesNestedInput
    assignment?: AssignmentUpdateOneWithoutGradesNestedInput
    gradedBy?: UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput
  }

  export type GradeUncheckedUpdateWithoutSubmissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutGradesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGradesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGradesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGradesInput, UserUncheckedCreateWithoutGradesInput>
  }

  export type CourseCreateWithoutGradesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutGradesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutGradesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutGradesInput, CourseUncheckedCreateWithoutGradesInput>
  }

  export type AssignmentCreateWithoutGradesInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssignmentsInput
    submissions?: AssignmentSubmissionCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentUncheckedCreateWithoutGradesInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    attachments?: FileAttachmentUncheckedCreateNestedManyWithoutAssignmentAttachmentsInput
  }

  export type AssignmentCreateOrConnectWithoutGradesInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutGradesInput, AssignmentUncheckedCreateWithoutGradesInput>
  }

  export type AssignmentSubmissionCreateWithoutGradeInput = {
    id?: string
    submittedAt?: Date | string
    textContent?: string | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutAssignmentSubmissionsInput
    files?: FileAttachmentCreateNestedManyWithoutSubmissionFilesInput
  }

  export type AssignmentSubmissionUncheckedCreateWithoutGradeInput = {
    id?: string
    assignmentId: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionFilesInput
  }

  export type AssignmentSubmissionCreateOrConnectWithoutGradeInput = {
    where: AssignmentSubmissionWhereUniqueInput
    create: XOR<AssignmentSubmissionCreateWithoutGradeInput, AssignmentSubmissionUncheckedCreateWithoutGradeInput>
  }

  export type UserCreateWithoutGradedAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutGradedAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutGradedAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutGradedAssignmentsInput, UserUncheckedCreateWithoutGradedAssignmentsInput>
  }

  export type UserUpsertWithoutGradesInput = {
    update: XOR<UserUpdateWithoutGradesInput, UserUncheckedUpdateWithoutGradesInput>
    create: XOR<UserCreateWithoutGradesInput, UserUncheckedCreateWithoutGradesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGradesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGradesInput, UserUncheckedUpdateWithoutGradesInput>
  }

  export type UserUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithoutGradesInput = {
    update: XOR<CourseUpdateWithoutGradesInput, CourseUncheckedUpdateWithoutGradesInput>
    create: XOR<CourseCreateWithoutGradesInput, CourseUncheckedCreateWithoutGradesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutGradesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutGradesInput, CourseUncheckedUpdateWithoutGradesInput>
  }

  export type CourseUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type AssignmentUpsertWithoutGradesInput = {
    update: XOR<AssignmentUpdateWithoutGradesInput, AssignmentUncheckedUpdateWithoutGradesInput>
    create: XOR<AssignmentCreateWithoutGradesInput, AssignmentUncheckedCreateWithoutGradesInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutGradesInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutGradesInput, AssignmentUncheckedUpdateWithoutGradesInput>
  }

  export type AssignmentUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput
    submissions?: AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutGradesInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentSubmissionUpsertWithoutGradeInput = {
    update: XOR<AssignmentSubmissionUpdateWithoutGradeInput, AssignmentSubmissionUncheckedUpdateWithoutGradeInput>
    create: XOR<AssignmentSubmissionCreateWithoutGradeInput, AssignmentSubmissionUncheckedCreateWithoutGradeInput>
    where?: AssignmentSubmissionWhereInput
  }

  export type AssignmentSubmissionUpdateToOneWithWhereWithoutGradeInput = {
    where?: AssignmentSubmissionWhereInput
    data: XOR<AssignmentSubmissionUpdateWithoutGradeInput, AssignmentSubmissionUncheckedUpdateWithoutGradeInput>
  }

  export type AssignmentSubmissionUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutAssignmentSubmissionsNestedInput
    files?: FileAttachmentUpdateManyWithoutSubmissionFilesNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateWithoutGradeInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesNestedInput
  }

  export type UserUpsertWithoutGradedAssignmentsInput = {
    update: XOR<UserUpdateWithoutGradedAssignmentsInput, UserUncheckedUpdateWithoutGradedAssignmentsInput>
    create: XOR<UserCreateWithoutGradedAssignmentsInput, UserUncheckedCreateWithoutGradedAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutGradedAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutGradedAssignmentsInput, UserUncheckedUpdateWithoutGradedAssignmentsInput>
  }

  export type UserUpdateWithoutGradedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutGradedAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutCourseMaterialsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCourseMaterialsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCourseMaterialsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCourseMaterialsInput, CourseUncheckedCreateWithoutCourseMaterialsInput>
  }

  export type UserCreateWithoutUploadedMaterialsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedMaterialsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedMaterialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedMaterialsInput, UserUncheckedCreateWithoutUploadedMaterialsInput>
  }

  export type FileAttachmentCreateWithoutCourseMaterialsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
    uploadedBy: UserCreateNestedOneWithoutUploadedFilesInput
    assignmentAttachments?: AssignmentCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateWithoutCourseMaterialsInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    uploadedById: string
    createdAt?: Date | string
    assignmentAttachments?: AssignmentUncheckedCreateNestedManyWithoutAttachmentsInput
    submissionFiles?: AssignmentSubmissionUncheckedCreateNestedManyWithoutFilesInput
  }

  export type FileAttachmentCreateOrConnectWithoutCourseMaterialsInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutCourseMaterialsInput, FileAttachmentUncheckedCreateWithoutCourseMaterialsInput>
  }

  export type CourseUpsertWithoutCourseMaterialsInput = {
    update: XOR<CourseUpdateWithoutCourseMaterialsInput, CourseUncheckedUpdateWithoutCourseMaterialsInput>
    create: XOR<CourseCreateWithoutCourseMaterialsInput, CourseUncheckedCreateWithoutCourseMaterialsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutCourseMaterialsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutCourseMaterialsInput, CourseUncheckedUpdateWithoutCourseMaterialsInput>
  }

  export type CourseUpdateWithoutCourseMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCourseMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutUploadedMaterialsInput = {
    update: XOR<UserUpdateWithoutUploadedMaterialsInput, UserUncheckedUpdateWithoutUploadedMaterialsInput>
    create: XOR<UserCreateWithoutUploadedMaterialsInput, UserUncheckedCreateWithoutUploadedMaterialsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedMaterialsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedMaterialsInput, UserUncheckedUpdateWithoutUploadedMaterialsInput>
  }

  export type UserUpdateWithoutUploadedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FileAttachmentUpsertWithoutCourseMaterialsInput = {
    update: XOR<FileAttachmentUpdateWithoutCourseMaterialsInput, FileAttachmentUncheckedUpdateWithoutCourseMaterialsInput>
    create: XOR<FileAttachmentCreateWithoutCourseMaterialsInput, FileAttachmentUncheckedCreateWithoutCourseMaterialsInput>
    where?: FileAttachmentWhereInput
  }

  export type FileAttachmentUpdateToOneWithWhereWithoutCourseMaterialsInput = {
    where?: FileAttachmentWhereInput
    data: XOR<FileAttachmentUpdateWithoutCourseMaterialsInput, FileAttachmentUncheckedUpdateWithoutCourseMaterialsInput>
  }

  export type FileAttachmentUpdateWithoutCourseMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    assignmentAttachments?: AssignmentUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutCourseMaterialsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignmentAttachments?: AssignmentUncheckedUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type CourseCreateWithoutQuizzesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutQuizzesInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutQuizzesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
  }

  export type UserCreateWithoutCreatedQuizzesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedQuizzesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedQuizzesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedQuizzesInput, UserUncheckedCreateWithoutCreatedQuizzesInput>
  }

  export type QuizAttemptCreateWithoutQuizInput = {
    id?: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
    student: UserCreateNestedOneWithoutQuizAttemptsInput
  }

  export type QuizAttemptUncheckedCreateWithoutQuizInput = {
    id?: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptCreateOrConnectWithoutQuizInput = {
    where: QuizAttemptWhereUniqueInput
    create: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput>
  }

  export type QuizAttemptCreateManyQuizInputEnvelope = {
    data: QuizAttemptCreateManyQuizInput | QuizAttemptCreateManyQuizInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutQuizzesInput = {
    update: XOR<CourseUpdateWithoutQuizzesInput, CourseUncheckedUpdateWithoutQuizzesInput>
    create: XOR<CourseCreateWithoutQuizzesInput, CourseUncheckedCreateWithoutQuizzesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutQuizzesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutQuizzesInput, CourseUncheckedUpdateWithoutQuizzesInput>
  }

  export type CourseUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCreatedQuizzesInput = {
    update: XOR<UserUpdateWithoutCreatedQuizzesInput, UserUncheckedUpdateWithoutCreatedQuizzesInput>
    create: XOR<UserCreateWithoutCreatedQuizzesInput, UserUncheckedCreateWithoutCreatedQuizzesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedQuizzesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedQuizzesInput, UserUncheckedUpdateWithoutCreatedQuizzesInput>
  }

  export type UserUpdateWithoutCreatedQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedQuizzesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QuizAttemptUpsertWithWhereUniqueWithoutQuizInput = {
    where: QuizAttemptWhereUniqueInput
    update: XOR<QuizAttemptUpdateWithoutQuizInput, QuizAttemptUncheckedUpdateWithoutQuizInput>
    create: XOR<QuizAttemptCreateWithoutQuizInput, QuizAttemptUncheckedCreateWithoutQuizInput>
  }

  export type QuizAttemptUpdateWithWhereUniqueWithoutQuizInput = {
    where: QuizAttemptWhereUniqueInput
    data: XOR<QuizAttemptUpdateWithoutQuizInput, QuizAttemptUncheckedUpdateWithoutQuizInput>
  }

  export type QuizAttemptUpdateManyWithWhereWithoutQuizInput = {
    where: QuizAttemptScalarWhereInput
    data: XOR<QuizAttemptUpdateManyMutationInput, QuizAttemptUncheckedUpdateManyWithoutQuizInput>
  }

  export type QuizCreateWithoutAttemptsInput = {
    id?: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutQuizzesInput
    createdBy: UserCreateNestedOneWithoutCreatedQuizzesInput
  }

  export type QuizUncheckedCreateWithoutAttemptsInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizCreateOrConnectWithoutAttemptsInput = {
    where: QuizWhereUniqueInput
    create: XOR<QuizCreateWithoutAttemptsInput, QuizUncheckedCreateWithoutAttemptsInput>
  }

  export type UserCreateWithoutQuizAttemptsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQuizAttemptsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQuizAttemptsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
  }

  export type QuizUpsertWithoutAttemptsInput = {
    update: XOR<QuizUpdateWithoutAttemptsInput, QuizUncheckedUpdateWithoutAttemptsInput>
    create: XOR<QuizCreateWithoutAttemptsInput, QuizUncheckedCreateWithoutAttemptsInput>
    where?: QuizWhereInput
  }

  export type QuizUpdateToOneWithWhereWithoutAttemptsInput = {
    where?: QuizWhereInput
    data: XOR<QuizUpdateWithoutAttemptsInput, QuizUncheckedUpdateWithoutAttemptsInput>
  }

  export type QuizUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutQuizzesNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedQuizzesNestedInput
  }

  export type QuizUncheckedUpdateWithoutAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutQuizAttemptsInput = {
    update: XOR<UserUpdateWithoutQuizAttemptsInput, UserUncheckedUpdateWithoutQuizAttemptsInput>
    create: XOR<UserCreateWithoutQuizAttemptsInput, UserUncheckedCreateWithoutQuizAttemptsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQuizAttemptsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQuizAttemptsInput, UserUncheckedUpdateWithoutQuizAttemptsInput>
  }

  export type UserUpdateWithoutQuizAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQuizAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutAnnouncementsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutAnnouncementsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutAnnouncementsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAnnouncementsInput, CourseUncheckedCreateWithoutAnnouncementsInput>
  }

  export type UserCreateWithoutCourseAnnouncementsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCourseAnnouncementsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCourseAnnouncementsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCourseAnnouncementsInput, UserUncheckedCreateWithoutCourseAnnouncementsInput>
  }

  export type CourseUpsertWithoutAnnouncementsInput = {
    update: XOR<CourseUpdateWithoutAnnouncementsInput, CourseUncheckedUpdateWithoutAnnouncementsInput>
    create: XOR<CourseCreateWithoutAnnouncementsInput, CourseUncheckedCreateWithoutAnnouncementsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAnnouncementsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAnnouncementsInput, CourseUncheckedUpdateWithoutAnnouncementsInput>
  }

  export type CourseUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutCourseAnnouncementsInput = {
    update: XOR<UserUpdateWithoutCourseAnnouncementsInput, UserUncheckedUpdateWithoutCourseAnnouncementsInput>
    create: XOR<UserCreateWithoutCourseAnnouncementsInput, UserUncheckedCreateWithoutCourseAnnouncementsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCourseAnnouncementsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCourseAnnouncementsInput, UserUncheckedUpdateWithoutCourseAnnouncementsInput>
  }

  export type UserUpdateWithoutCourseAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCourseAnnouncementsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseCreateWithoutClassSessionsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutClassSessionsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutClassSessionsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutClassSessionsInput, CourseUncheckedCreateWithoutClassSessionsInput>
  }

  export type StudentAttendanceCreateWithoutSessionInput = {
    id?: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutAttendancesInput
  }

  export type StudentAttendanceUncheckedCreateWithoutSessionInput = {
    id?: string
    studentId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type StudentAttendanceCreateOrConnectWithoutSessionInput = {
    where: StudentAttendanceWhereUniqueInput
    create: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput>
  }

  export type StudentAttendanceCreateManySessionInputEnvelope = {
    data: StudentAttendanceCreateManySessionInput | StudentAttendanceCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithoutClassSessionsInput = {
    update: XOR<CourseUpdateWithoutClassSessionsInput, CourseUncheckedUpdateWithoutClassSessionsInput>
    create: XOR<CourseCreateWithoutClassSessionsInput, CourseUncheckedCreateWithoutClassSessionsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutClassSessionsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutClassSessionsInput, CourseUncheckedUpdateWithoutClassSessionsInput>
  }

  export type CourseUpdateWithoutClassSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutClassSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type StudentAttendanceUpsertWithWhereUniqueWithoutSessionInput = {
    where: StudentAttendanceWhereUniqueInput
    update: XOR<StudentAttendanceUpdateWithoutSessionInput, StudentAttendanceUncheckedUpdateWithoutSessionInput>
    create: XOR<StudentAttendanceCreateWithoutSessionInput, StudentAttendanceUncheckedCreateWithoutSessionInput>
  }

  export type StudentAttendanceUpdateWithWhereUniqueWithoutSessionInput = {
    where: StudentAttendanceWhereUniqueInput
    data: XOR<StudentAttendanceUpdateWithoutSessionInput, StudentAttendanceUncheckedUpdateWithoutSessionInput>
  }

  export type StudentAttendanceUpdateManyWithWhereWithoutSessionInput = {
    where: StudentAttendanceScalarWhereInput
    data: XOR<StudentAttendanceUpdateManyMutationInput, StudentAttendanceUncheckedUpdateManyWithoutSessionInput>
  }

  export type ClassSessionCreateWithoutAttendancesInput = {
    id?: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutClassSessionsInput
  }

  export type ClassSessionUncheckedCreateWithoutAttendancesInput = {
    id?: string
    courseId: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassSessionCreateOrConnectWithoutAttendancesInput = {
    where: ClassSessionWhereUniqueInput
    create: XOR<ClassSessionCreateWithoutAttendancesInput, ClassSessionUncheckedCreateWithoutAttendancesInput>
  }

  export type UserCreateWithoutAttendancesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAttendancesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAttendancesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAttendancesInput, UserUncheckedCreateWithoutAttendancesInput>
  }

  export type ClassSessionUpsertWithoutAttendancesInput = {
    update: XOR<ClassSessionUpdateWithoutAttendancesInput, ClassSessionUncheckedUpdateWithoutAttendancesInput>
    create: XOR<ClassSessionCreateWithoutAttendancesInput, ClassSessionUncheckedCreateWithoutAttendancesInput>
    where?: ClassSessionWhereInput
  }

  export type ClassSessionUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: ClassSessionWhereInput
    data: XOR<ClassSessionUpdateWithoutAttendancesInput, ClassSessionUncheckedUpdateWithoutAttendancesInput>
  }

  export type ClassSessionUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutClassSessionsNestedInput
  }

  export type ClassSessionUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutAttendancesInput = {
    update: XOR<UserUpdateWithoutAttendancesInput, UserUncheckedUpdateWithoutAttendancesInput>
    create: XOR<UserCreateWithoutAttendancesInput, UserUncheckedCreateWithoutAttendancesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAttendancesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAttendancesInput, UserUncheckedUpdateWithoutAttendancesInput>
  }

  export type UserUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAttendancesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutTeacherCourseAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTeacherCourseAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTeacherCourseAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeacherCourseAssignmentsInput, UserUncheckedCreateWithoutTeacherCourseAssignmentsInput>
  }

  export type CourseCreateWithoutTeacherAssignmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedCoursesInput
    instructor: UserCreateNestedOneWithoutTaughtCoursesInput
    department: DepartmentCreateNestedOneWithoutCoursesInput
    prerequisites?: CourseCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentCreateNestedManyWithoutCourseInput
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialCreateNestedManyWithoutCourseInput
    quizzes?: QuizCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionCreateNestedManyWithoutCourseInput
    grades?: GradeCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutTeacherAssignmentsInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    prerequisites?: CourseUncheckedCreateNestedManyWithoutPrerequisiteForInput
    prerequisiteFor?: CourseUncheckedCreateNestedManyWithoutPrerequisitesInput
    enrollments?: EnrollmentUncheckedCreateNestedManyWithoutCourseInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    courseMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutCourseInput
    quizzes?: QuizUncheckedCreateNestedManyWithoutCourseInput
    announcements?: CourseAnnouncementUncheckedCreateNestedManyWithoutCourseInput
    classSessions?: ClassSessionUncheckedCreateNestedManyWithoutCourseInput
    grades?: GradeUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutTeacherAssignmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutTeacherAssignmentsInput, CourseUncheckedCreateWithoutTeacherAssignmentsInput>
  }

  export type UserCreateWithoutAssignedTeachersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedTeachersInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedTeachersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
  }

  export type UserUpsertWithoutTeacherCourseAssignmentsInput = {
    update: XOR<UserUpdateWithoutTeacherCourseAssignmentsInput, UserUncheckedUpdateWithoutTeacherCourseAssignmentsInput>
    create: XOR<UserCreateWithoutTeacherCourseAssignmentsInput, UserUncheckedCreateWithoutTeacherCourseAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeacherCourseAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeacherCourseAssignmentsInput, UserUncheckedUpdateWithoutTeacherCourseAssignmentsInput>
  }

  export type UserUpdateWithoutTeacherCourseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherCourseAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithoutTeacherAssignmentsInput = {
    update: XOR<CourseUpdateWithoutTeacherAssignmentsInput, CourseUncheckedUpdateWithoutTeacherAssignmentsInput>
    create: XOR<CourseCreateWithoutTeacherAssignmentsInput, CourseUncheckedCreateWithoutTeacherAssignmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutTeacherAssignmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutTeacherAssignmentsInput, CourseUncheckedUpdateWithoutTeacherAssignmentsInput>
  }

  export type CourseUpdateWithoutTeacherAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutTeacherAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserUpsertWithoutAssignedTeachersInput = {
    update: XOR<UserUpdateWithoutAssignedTeachersInput, UserUncheckedUpdateWithoutAssignedTeachersInput>
    create: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTeachersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTeachersInput, UserUncheckedUpdateWithoutAssignedTeachersInput>
  }

  export type UserUpdateWithoutAssignedTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutStudentAdvisoryAssignmentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentAdvisoryAssignmentInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentAdvisoryAssignmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentAdvisoryAssignmentInput, UserUncheckedCreateWithoutStudentAdvisoryAssignmentInput>
  }

  export type UserCreateWithoutAdvisoryAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAdvisoryAssignmentsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAdvisoryAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAdvisoryAssignmentsInput, UserUncheckedCreateWithoutAdvisoryAssignmentsInput>
  }

  export type UserCreateWithoutAssignedAdvisoriesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAssignedAdvisoriesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAssignedAdvisoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedAdvisoriesInput, UserUncheckedCreateWithoutAssignedAdvisoriesInput>
  }

  export type UserUpsertWithoutStudentAdvisoryAssignmentInput = {
    update: XOR<UserUpdateWithoutStudentAdvisoryAssignmentInput, UserUncheckedUpdateWithoutStudentAdvisoryAssignmentInput>
    create: XOR<UserCreateWithoutStudentAdvisoryAssignmentInput, UserUncheckedCreateWithoutStudentAdvisoryAssignmentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentAdvisoryAssignmentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentAdvisoryAssignmentInput, UserUncheckedUpdateWithoutStudentAdvisoryAssignmentInput>
  }

  export type UserUpdateWithoutStudentAdvisoryAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentAdvisoryAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAdvisoryAssignmentsInput = {
    update: XOR<UserUpdateWithoutAdvisoryAssignmentsInput, UserUncheckedUpdateWithoutAdvisoryAssignmentsInput>
    create: XOR<UserCreateWithoutAdvisoryAssignmentsInput, UserUncheckedCreateWithoutAdvisoryAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAdvisoryAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAdvisoryAssignmentsInput, UserUncheckedUpdateWithoutAdvisoryAssignmentsInput>
  }

  export type UserUpdateWithoutAdvisoryAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAdvisoryAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAssignedAdvisoriesInput = {
    update: XOR<UserUpdateWithoutAssignedAdvisoriesInput, UserUncheckedUpdateWithoutAssignedAdvisoriesInput>
    create: XOR<UserCreateWithoutAssignedAdvisoriesInput, UserUncheckedCreateWithoutAssignedAdvisoriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedAdvisoriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedAdvisoriesInput, UserUncheckedUpdateWithoutAssignedAdvisoriesInput>
  }

  export type UserUpdateWithoutAssignedAdvisoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedAdvisoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutUploadedFilesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUploadedFilesInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUploadedFilesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
  }

  export type CourseMaterialCreateWithoutFileInput = {
    id?: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutCourseMaterialsInput
    uploadedBy: UserCreateNestedOneWithoutUploadedMaterialsInput
  }

  export type CourseMaterialUncheckedCreateWithoutFileInput = {
    id?: string
    courseId: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialCreateOrConnectWithoutFileInput = {
    where: CourseMaterialWhereUniqueInput
    create: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput>
  }

  export type CourseMaterialCreateManyFileInputEnvelope = {
    data: CourseMaterialCreateManyFileInput | CourseMaterialCreateManyFileInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutAttachmentsInput = {
    id?: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy: UserCreateNestedOneWithoutCreatedAssignmentsInput
    submissions?: AssignmentSubmissionCreateNestedManyWithoutAssignmentInput
    grades?: GradeCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    courseId: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    submissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutAssignmentInput
    grades?: GradeUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutAttachmentsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
  }

  export type AssignmentSubmissionCreateWithoutFilesInput = {
    id?: string
    submittedAt?: Date | string
    textContent?: string | null
    assignment: AssignmentCreateNestedOneWithoutSubmissionsInput
    student: UserCreateNestedOneWithoutAssignmentSubmissionsInput
    grade?: GradeCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionUncheckedCreateWithoutFilesInput = {
    id?: string
    assignmentId: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
    grade?: GradeUncheckedCreateNestedOneWithoutSubmissionInput
  }

  export type AssignmentSubmissionCreateOrConnectWithoutFilesInput = {
    where: AssignmentSubmissionWhereUniqueInput
    create: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput>
  }

  export type UserUpsertWithoutUploadedFilesInput = {
    update: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
    create: XOR<UserCreateWithoutUploadedFilesInput, UserUncheckedCreateWithoutUploadedFilesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUploadedFilesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUploadedFilesInput, UserUncheckedUpdateWithoutUploadedFilesInput>
  }

  export type UserUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUploadedFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseMaterialUpsertWithWhereUniqueWithoutFileInput = {
    where: CourseMaterialWhereUniqueInput
    update: XOR<CourseMaterialUpdateWithoutFileInput, CourseMaterialUncheckedUpdateWithoutFileInput>
    create: XOR<CourseMaterialCreateWithoutFileInput, CourseMaterialUncheckedCreateWithoutFileInput>
  }

  export type CourseMaterialUpdateWithWhereUniqueWithoutFileInput = {
    where: CourseMaterialWhereUniqueInput
    data: XOR<CourseMaterialUpdateWithoutFileInput, CourseMaterialUncheckedUpdateWithoutFileInput>
  }

  export type CourseMaterialUpdateManyWithWhereWithoutFileInput = {
    where: CourseMaterialScalarWhereInput
    data: XOR<CourseMaterialUpdateManyMutationInput, CourseMaterialUncheckedUpdateManyWithoutFileInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutAttachmentsInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutAttachmentsInput, AssignmentUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<AssignmentCreateWithoutAttachmentsInput, AssignmentUncheckedCreateWithoutAttachmentsInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutAttachmentsInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutAttachmentsInput, AssignmentUncheckedUpdateWithoutAttachmentsInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutAttachmentsInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutAttachmentsInput>
  }

  export type AssignmentSubmissionUpsertWithWhereUniqueWithoutFilesInput = {
    where: AssignmentSubmissionWhereUniqueInput
    update: XOR<AssignmentSubmissionUpdateWithoutFilesInput, AssignmentSubmissionUncheckedUpdateWithoutFilesInput>
    create: XOR<AssignmentSubmissionCreateWithoutFilesInput, AssignmentSubmissionUncheckedCreateWithoutFilesInput>
  }

  export type AssignmentSubmissionUpdateWithWhereUniqueWithoutFilesInput = {
    where: AssignmentSubmissionWhereUniqueInput
    data: XOR<AssignmentSubmissionUpdateWithoutFilesInput, AssignmentSubmissionUncheckedUpdateWithoutFilesInput>
  }

  export type AssignmentSubmissionUpdateManyWithWhereWithoutFilesInput = {
    where: AssignmentSubmissionScalarWhereInput
    data: XOR<AssignmentSubmissionUpdateManyMutationInput, AssignmentSubmissionUncheckedUpdateManyWithoutFilesInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptCreateNestedManyWithoutStudentInput
    grades?: GradeCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentCreateNestedManyWithoutDepartmentHeadInput
    teacherRegisteredBy?: UserCreateNestedOneWithoutRegisteredTeachersInput
    studentRegisteredBy?: UserCreateNestedOneWithoutRegisteredStudentsInput
    userActivity?: UserActivityCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    profile?: UserProfileUncheckedCreateNestedOneWithoutUserInput
    studentEnrollments?: EnrollmentUncheckedCreateNestedManyWithoutStudentInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedCreateNestedManyWithoutStudentInput
    quizAttempts?: QuizAttemptUncheckedCreateNestedManyWithoutStudentInput
    grades?: GradeUncheckedCreateNestedManyWithoutStudentInput
    attendances?: StudentAttendanceUncheckedCreateNestedManyWithoutStudentInput
    taughtCourses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
    advisoryStudents?: UserProfileUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    gradedAssignments?: GradeUncheckedCreateNestedManyWithoutGradedByInput
    courseAnnouncements?: CourseAnnouncementUncheckedCreateNestedManyWithoutAuthorInput
    createdAssignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    createdQuizzes?: QuizUncheckedCreateNestedManyWithoutCreatedByInput
    uploadedMaterials?: CourseMaterialUncheckedCreateNestedManyWithoutUploadedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatedByInput
    registeredTeachers?: UserUncheckedCreateNestedManyWithoutTeacherRegisteredByInput
    registeredStudents?: UserUncheckedCreateNestedManyWithoutStudentRegisteredByInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedCreateNestedManyWithoutTeacherInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAssignedByInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedCreateNestedManyWithoutAdvisoryTeacherInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedCreateNestedOneWithoutStudentInput
    managedDepartments?: DepartmentUncheckedCreateNestedManyWithoutDepartmentHeadInput
    userActivity?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    uploadedFiles?: FileAttachmentUncheckedCreateNestedManyWithoutUploadedByInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
    enrollmentsManaged?: EnrollmentUncheckedCreateNestedManyWithoutEnrolledByInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EnrollmentCreateManyStudentInput = {
    id?: string
    courseId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentSubmissionCreateManyStudentInput = {
    id?: string
    assignmentId: string
    submittedAt?: Date | string
    textContent?: string | null
  }

  export type QuizAttemptCreateManyStudentInput = {
    id?: string
    quizId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type GradeCreateManyStudentInput = {
    id?: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudentAttendanceCreateManyStudentInput = {
    id?: string
    sessionId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type CourseCreateManyInstructorInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserProfileCreateManyAdvisoryTeacherInput = {
    id?: string
    userId: string
    firstName: string
    lastName: string
    dateOfBirth?: Date | string | null
    phone?: string | null
    street?: string | null
    city?: string | null
    state?: string | null
    zipCode?: string | null
    country?: string | null
    studentId?: string | null
    grade?: string | null
    gpa?: number | null
    enrollmentDate?: Date | string | null
    graduationDate?: Date | string | null
    major?: string | null
    minor?: string | null
    employeeId?: string | null
    department?: string | null
    position?: string | null
    hireDate?: Date | string | null
    specialization?: UserProfileCreatespecializationInput | string[]
    officeLocation?: string | null
    officeHours?: string | null
    emergencyContactName?: string | null
    emergencyContactRelationship?: string | null
    emergencyContactPhone?: string | null
    emergencyContactEmail?: string | null
    theme?: $Enums.ThemeMode
    language?: string
    timezone?: string
    emailNotifications?: boolean
    pushNotifications?: boolean
    smsNotifications?: boolean
    profileVisibility?: $Enums.Visibility
    showEmail?: boolean
    showPhone?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateManyGradedByInput = {
    id?: string
    studentId: string
    courseId?: string | null
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementCreateManyAuthorInput = {
    id?: string
    courseId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentCreateManyCreatedByInput = {
    id?: string
    courseId: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizCreateManyCreatedByInput = {
    id?: string
    courseId: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialCreateManyUploadedByInput = {
    id?: string
    courseId: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateManyCreatedByInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    departmentId: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyTeacherRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    studentRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyStudentRegisteredByInput = {
    id?: string
    email: string
    passwordHash: string
    role: $Enums.UserRole
    isActive?: boolean
    avatar?: string | null
    isSupervisor?: boolean
    teacherRegisteredById?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherCourseAssignmentCreateManyAssignedByInput = {
    id?: string
    teacherId: string
    courseId: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type TeacherCourseAssignmentCreateManyTeacherInput = {
    id?: string
    courseId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentCreateManyAssignedByInput = {
    id?: string
    studentId: string
    advisoryTeacherId: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type AdvisoryAssignmentCreateManyAdvisoryTeacherInput = {
    id?: string
    studentId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type DepartmentCreateManyDepartmentHeadInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserActivityCreateManyUserInput = {
    id?: string
    action: string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type FileAttachmentCreateManyUploadedByInput = {
    id?: string
    filename: string
    originalName: string
    mimeType: string
    fileSize: bigint | number
    path: string
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    resource: string
    resourceId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type EnrollmentCreateManyEnrolledByInput = {
    id?: string
    studentId: string
    courseId: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    title: string
    message: string
    type: $Enums.NotificationType
    priority?: $Enums.NotificationPriority
    isRead?: boolean
    readAt?: Date | string | null
    courseId?: string | null
    assignmentId?: string | null
    gradeId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    token: string
    expiresAt: Date | string
    isActive?: boolean
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EnrollmentUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
    enrolledBy?: UserUpdateOneRequiredWithoutEnrollmentsManagedNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentSubmissionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    files?: FileAttachmentUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUncheckedUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuizAttemptUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
    quiz?: QuizUpdateOneRequiredWithoutAttemptsNestedInput
  }

  export type QuizAttemptUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    quizId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type GradeUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneWithoutGradesNestedInput
    assignment?: AssignmentUpdateOneWithoutGradesNestedInput
    submission?: AssignmentSubmissionUpdateOneWithoutGradeNestedInput
    gradedBy?: UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput
  }

  export type GradeUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: ClassSessionUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUpdateWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type UserProfileUncheckedUpdateWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    street?: NullableStringFieldUpdateOperationsInput | string | null
    city?: NullableStringFieldUpdateOperationsInput | string | null
    state?: NullableStringFieldUpdateOperationsInput | string | null
    zipCode?: NullableStringFieldUpdateOperationsInput | string | null
    country?: NullableStringFieldUpdateOperationsInput | string | null
    studentId?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    gpa?: NullableFloatFieldUpdateOperationsInput | number | null
    enrollmentDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    graduationDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    major?: NullableStringFieldUpdateOperationsInput | string | null
    minor?: NullableStringFieldUpdateOperationsInput | string | null
    employeeId?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    hireDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    specialization?: UserProfileUpdatespecializationInput | string[]
    officeLocation?: NullableStringFieldUpdateOperationsInput | string | null
    officeHours?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactName?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactRelationship?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactPhone?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContactEmail?: NullableStringFieldUpdateOperationsInput | string | null
    theme?: EnumThemeModeFieldUpdateOperationsInput | $Enums.ThemeMode
    language?: StringFieldUpdateOperationsInput | string
    timezone?: StringFieldUpdateOperationsInput | string
    emailNotifications?: BoolFieldUpdateOperationsInput | boolean
    pushNotifications?: BoolFieldUpdateOperationsInput | boolean
    smsNotifications?: BoolFieldUpdateOperationsInput | boolean
    profileVisibility?: EnumVisibilityFieldUpdateOperationsInput | $Enums.Visibility
    showEmail?: BoolFieldUpdateOperationsInput | boolean
    showPhone?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUpdateWithoutGradedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutGradesNestedInput
    course?: CourseUpdateOneWithoutGradesNestedInput
    assignment?: AssignmentUpdateOneWithoutGradesNestedInput
    submission?: AssignmentSubmissionUpdateOneWithoutGradeNestedInput
  }

  export type GradeUncheckedUpdateWithoutGradedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyWithoutGradedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAnnouncementsNestedInput
  }

  export type CourseAnnouncementUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    submissions?: AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutQuizzesNestedInput
    attempts?: QuizAttemptUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCourseMaterialsNestedInput
    file?: FileAttachmentUpdateOneWithoutCourseMaterialsNestedInput
  }

  export type CourseMaterialUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutTeacherRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    studentRegisteredBy?: UserUpdateOneWithoutRegisteredStudentsNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeacherRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutTeacherRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    studentRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutStudentRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUpdateManyWithoutStudentNestedInput
    grades?: GradeUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUpdateManyWithoutDepartmentHeadNestedInput
    teacherRegisteredBy?: UserUpdateOneWithoutRegisteredTeachersNestedInput
    userActivity?: UserActivityUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    profile?: UserProfileUncheckedUpdateOneWithoutUserNestedInput
    studentEnrollments?: EnrollmentUncheckedUpdateManyWithoutStudentNestedInput
    assignmentSubmissions?: AssignmentSubmissionUncheckedUpdateManyWithoutStudentNestedInput
    quizAttempts?: QuizAttemptUncheckedUpdateManyWithoutStudentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutStudentNestedInput
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutStudentNestedInput
    taughtCourses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
    advisoryStudents?: UserProfileUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    gradedAssignments?: GradeUncheckedUpdateManyWithoutGradedByNestedInput
    courseAnnouncements?: CourseAnnouncementUncheckedUpdateManyWithoutAuthorNestedInput
    createdAssignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    createdQuizzes?: QuizUncheckedUpdateManyWithoutCreatedByNestedInput
    uploadedMaterials?: CourseMaterialUncheckedUpdateManyWithoutUploadedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatedByNestedInput
    registeredTeachers?: UserUncheckedUpdateManyWithoutTeacherRegisteredByNestedInput
    registeredStudents?: UserUncheckedUpdateManyWithoutStudentRegisteredByNestedInput
    assignedTeachers?: TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    teacherCourseAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherNestedInput
    assignedAdvisories?: AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByNestedInput
    advisoryAssignments?: AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherNestedInput
    studentAdvisoryAssignment?: AdvisoryAssignmentUncheckedUpdateOneWithoutStudentNestedInput
    managedDepartments?: DepartmentUncheckedUpdateManyWithoutDepartmentHeadNestedInput
    userActivity?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    uploadedFiles?: FileAttachmentUncheckedUpdateManyWithoutUploadedByNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
    enrollmentsManaged?: EnrollmentUncheckedUpdateManyWithoutEnrolledByNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutStudentRegisteredByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    isActive?: BoolFieldUpdateOperationsInput | boolean
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    isSupervisor?: BoolFieldUpdateOperationsInput | boolean
    teacherRegisteredById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCourseAssignmentUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: UserUpdateOneRequiredWithoutTeacherCourseAssignmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutTeacherAssignmentsNestedInput
  }

  export type TeacherCourseAssignmentUncheckedUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    course?: CourseUpdateOneRequiredWithoutTeacherAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedTeachersNestedInput
  }

  export type TeacherCourseAssignmentUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    student?: UserUpdateOneRequiredWithoutStudentAdvisoryAssignmentNestedInput
    advisoryTeacher?: UserUpdateOneRequiredWithoutAdvisoryAssignmentsNestedInput
  }

  export type AdvisoryAssignmentUncheckedUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    advisoryTeacherId?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentUncheckedUpdateManyWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    advisoryTeacherId?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentUpdateWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    student?: UserUpdateOneRequiredWithoutStudentAdvisoryAssignmentNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedAdvisoriesNestedInput
  }

  export type AdvisoryAssignmentUncheckedUpdateWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdvisoryAssignmentUncheckedUpdateManyWithoutAdvisoryTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpdateWithoutDepartmentHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutDepartmentHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutDepartmentHeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseMaterials?: CourseMaterialUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUncheckedUpdateManyWithoutAttachmentsNestedInput
    submissionFiles?: AssignmentSubmissionUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateManyWithoutUploadedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    resourceId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUpdateWithoutEnrolledByInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutStudentEnrollmentsNestedInput
    course?: CourseUpdateOneRequiredWithoutEnrollmentsNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutEnrolledByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutEnrolledByInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    priority?: EnumNotificationPriorityFieldUpdateOperationsInput | $Enums.NotificationPriority
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    gradeId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    id?: string
    role: $Enums.UserRole
    requiresSupervisor?: boolean
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    requiresSupervisor?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseCreateManyDepartmentInput = {
    id?: string
    code: string
    name: string
    description: string
    credits: number
    scheduleDays?: CourseCreatescheduleDaysInput | string[]
    startTime: string
    endTime: string
    location: string
    building?: string | null
    room?: string | null
    createdById: string
    instructorId: string
    semester: string
    year: number
    capacity: number
    enrolled?: number
    status?: $Enums.CourseStatus
    category: string
    level: $Enums.CourseLevel
    startDate: Date | string
    endDate: Date | string
    enrollmentDeadline?: Date | string | null
    syllabusUrl?: string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentCreateManyCourseInput = {
    id?: string
    studentId: string
    enrolledById: string
    enrollmentDate?: Date | string
    status?: $Enums.EnrollmentStatus
    finalGrade?: string | null
    finalPoints?: number | null
    completed?: number
    total?: number
    currentGrade?: number | null
    attendance?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentCreateManyCourseInput = {
    id?: string
    createdById: string
    title: string
    description: string
    type: $Enums.AssignmentType
    assignedDate?: Date | string
    dueDate: Date | string
    maxPoints: number
    isGroupWork?: boolean
    status?: $Enums.AssignmentStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialCreateManyCourseInput = {
    id?: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    fileId?: string | null
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type QuizCreateManyCourseInput = {
    id?: string
    createdById: string
    title: string
    description: string
    duration: string
    totalQuestions: number
    maxPoints: number
    dueDate: Date | string
    isTimed?: boolean
    attemptsAllowed?: number
    questionsData: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseAnnouncementCreateManyCourseInput = {
    id?: string
    authorId: string
    title: string
    content: string
    priority?: $Enums.AnnouncementPriority
    isImportant?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ClassSessionCreateManyCourseInput = {
    id?: string
    date: Date | string
    topic: string
    location: string
    notes?: string | null
    cancelled?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GradeCreateManyCourseInput = {
    id?: string
    studentId: string
    assignmentId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeacherCourseAssignmentCreateManyCourseInput = {
    id?: string
    teacherId: string
    assignedById: string
    assignedDate?: Date | string
    isActive?: boolean
    notes?: string | null
  }

  export type CourseUpdateWithoutPrerequisiteForInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisites?: CourseUpdateManyWithoutPrerequisiteForNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPrerequisiteForInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisites?: CourseUncheckedUpdateManyWithoutPrerequisiteForNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutPrerequisiteForInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpdateWithoutPrerequisitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    instructor?: UserUpdateOneRequiredWithoutTaughtCoursesNestedInput
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
    prerequisiteFor?: CourseUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUpdateManyWithoutCourseNestedInput
    grades?: GradeUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutPrerequisitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    prerequisiteFor?: CourseUncheckedUpdateManyWithoutPrerequisitesNestedInput
    enrollments?: EnrollmentUncheckedUpdateManyWithoutCourseNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutCourseNestedInput
    quizzes?: QuizUncheckedUpdateManyWithoutCourseNestedInput
    announcements?: CourseAnnouncementUncheckedUpdateManyWithoutCourseNestedInput
    classSessions?: ClassSessionUncheckedUpdateManyWithoutCourseNestedInput
    grades?: GradeUncheckedUpdateManyWithoutCourseNestedInput
    teacherAssignments?: TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutPrerequisitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    credits?: IntFieldUpdateOperationsInput | number
    scheduleDays?: CourseUpdatescheduleDaysInput | string[]
    startTime?: StringFieldUpdateOperationsInput | string
    endTime?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    building?: NullableStringFieldUpdateOperationsInput | string | null
    room?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    instructorId?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    capacity?: IntFieldUpdateOperationsInput | number
    enrolled?: IntFieldUpdateOperationsInput | number
    status?: EnumCourseStatusFieldUpdateOperationsInput | $Enums.CourseStatus
    category?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    level?: EnumCourseLevelFieldUpdateOperationsInput | $Enums.CourseLevel
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    enrollmentDeadline?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syllabusUrl?: NullableStringFieldUpdateOperationsInput | string | null
    studyPlan?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutStudentEnrollmentsNestedInput
    enrolledBy?: UserUpdateOneRequiredWithoutEnrollmentsManagedNestedInput
  }

  export type EnrollmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EnrollmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    enrolledById?: StringFieldUpdateOperationsInput | string
    enrollmentDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumEnrollmentStatusFieldUpdateOperationsInput | $Enums.EnrollmentStatus
    finalGrade?: NullableStringFieldUpdateOperationsInput | string | null
    finalPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    completed?: IntFieldUpdateOperationsInput | number
    total?: IntFieldUpdateOperationsInput | number
    currentGrade?: NullableFloatFieldUpdateOperationsInput | number | null
    attendance?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput
    submissions?: AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutAssignmentNestedInput
    attachments?: FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedMaterialsNestedInput
    file?: FileAttachmentUpdateOneWithoutCourseMaterialsNestedInput
  }

  export type CourseMaterialUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    fileId?: NullableStringFieldUpdateOperationsInput | string | null
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedQuizzesNestedInput
    attempts?: QuizAttemptUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attempts?: QuizAttemptUncheckedUpdateManyWithoutQuizNestedInput
  }

  export type QuizUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    duration?: StringFieldUpdateOperationsInput | string
    totalQuestions?: IntFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isTimed?: BoolFieldUpdateOperationsInput | boolean
    attemptsAllowed?: IntFieldUpdateOperationsInput | number
    questionsData?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCourseAnnouncementsNestedInput
  }

  export type CourseAnnouncementUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseAnnouncementUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    priority?: EnumAnnouncementPriorityFieldUpdateOperationsInput | $Enums.AnnouncementPriority
    isImportant?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassSessionUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: StudentAttendanceUpdateManyWithoutSessionNestedInput
  }

  export type ClassSessionUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendances?: StudentAttendanceUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ClassSessionUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    topic?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cancelled?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutGradesNestedInput
    assignment?: AssignmentUpdateOneWithoutGradesNestedInput
    submission?: AssignmentSubmissionUpdateOneWithoutGradeNestedInput
    gradedBy?: UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput
  }

  export type GradeUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCourseAssignmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    teacher?: UserUpdateOneRequiredWithoutTeacherCourseAssignmentsNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignedTeachersNestedInput
  }

  export type TeacherCourseAssignmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCourseAssignmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AssignmentSubmissionCreateManyAssignmentInput = {
    id?: string
    studentId: string
    submittedAt?: Date | string
    textContent?: string | null
  }

  export type GradeCreateManyAssignmentInput = {
    id?: string
    studentId: string
    courseId?: string | null
    submissionId?: string | null
    letterGrade: string
    score: number
    maxPoints: number
    percentage?: number | null
    gradedById: string
    gradedDate?: Date | string
    gradingPeriod?: string | null
    feedback?: string | null
    isExtraCredit?: boolean
    weight?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AssignmentSubmissionUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    student?: UserUpdateOneRequiredWithoutAssignmentSubmissionsNestedInput
    files?: FileAttachmentUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesNestedInput
    grade?: GradeUncheckedUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GradeUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutGradesNestedInput
    course?: CourseUpdateOneWithoutGradesNestedInput
    submission?: AssignmentSubmissionUpdateOneWithoutGradeNestedInput
    gradedBy?: UserUpdateOneRequiredWithoutGradedAssignmentsNestedInput
  }

  export type GradeUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GradeUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    courseId?: NullableStringFieldUpdateOperationsInput | string | null
    submissionId?: NullableStringFieldUpdateOperationsInput | string | null
    letterGrade?: StringFieldUpdateOperationsInput | string
    score?: FloatFieldUpdateOperationsInput | number
    maxPoints?: FloatFieldUpdateOperationsInput | number
    percentage?: NullableFloatFieldUpdateOperationsInput | number | null
    gradedById?: StringFieldUpdateOperationsInput | string
    gradedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    gradingPeriod?: NullableStringFieldUpdateOperationsInput | string | null
    feedback?: NullableStringFieldUpdateOperationsInput | string | null
    isExtraCredit?: BoolFieldUpdateOperationsInput | boolean
    weight?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentUpdateWithoutAssignmentAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutFileNestedInput
    submissionFiles?: AssignmentSubmissionUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutAssignmentAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutFileNestedInput
    submissionFiles?: AssignmentSubmissionUncheckedUpdateManyWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateManyWithoutAssignmentAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentUpdateWithoutSubmissionFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedFilesNestedInput
    courseMaterials?: CourseMaterialUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutSubmissionFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    courseMaterials?: CourseMaterialUncheckedUpdateManyWithoutFileNestedInput
    assignmentAttachments?: AssignmentUncheckedUpdateManyWithoutAttachmentsNestedInput
  }

  export type FileAttachmentUncheckedUpdateManyWithoutSubmissionFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    mimeType?: StringFieldUpdateOperationsInput | string
    fileSize?: BigIntFieldUpdateOperationsInput | bigint | number
    path?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuizAttemptCreateManyQuizInput = {
    id?: string
    studentId: string
    startedAt?: Date | string
    submittedAt?: Date | string | null
    score?: number | null
    maxPoints?: number | null
    answers: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUpdateWithoutQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
    student?: UserUpdateOneRequiredWithoutQuizAttemptsNestedInput
  }

  export type QuizAttemptUncheckedUpdateWithoutQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type QuizAttemptUncheckedUpdateManyWithoutQuizInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submittedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    score?: NullableFloatFieldUpdateOperationsInput | number | null
    maxPoints?: NullableFloatFieldUpdateOperationsInput | number | null
    answers?: JsonNullValueInput | InputJsonValue
  }

  export type StudentAttendanceCreateManySessionInput = {
    id?: string
    studentId: string
    status?: $Enums.AttendanceStatus
    notes?: string | null
    createdAt?: Date | string
  }

  export type StudentAttendanceUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutAttendancesNestedInput
  }

  export type StudentAttendanceUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentAttendanceUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    status?: EnumAttendanceStatusFieldUpdateOperationsInput | $Enums.AttendanceStatus
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialCreateManyFileInput = {
    id?: string
    courseId: string
    uploadedById: string
    title: string
    description?: string | null
    type: $Enums.MaterialType
    uploadDate?: Date | string
    isRequired?: boolean
    url?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseMaterialUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutCourseMaterialsNestedInput
    uploadedBy?: UserUpdateOneRequiredWithoutUploadedMaterialsNestedInput
  }

  export type CourseMaterialUncheckedUpdateWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseMaterialUncheckedUpdateManyWithoutFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    uploadedById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumMaterialTypeFieldUpdateOperationsInput | $Enums.MaterialType
    uploadDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isRequired?: BoolFieldUpdateOperationsInput | boolean
    url?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedAssignmentsNestedInput
    submissions?: AssignmentSubmissionUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissions?: AssignmentSubmissionUncheckedUpdateManyWithoutAssignmentNestedInput
    grades?: GradeUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    type?: EnumAssignmentTypeFieldUpdateOperationsInput | $Enums.AssignmentType
    assignedDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    maxPoints?: FloatFieldUpdateOperationsInput | number
    isGroupWork?: BoolFieldUpdateOperationsInput | boolean
    status?: EnumAssignmentStatusFieldUpdateOperationsInput | $Enums.AssignmentStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentSubmissionUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSubmissionsNestedInput
    student?: UserUpdateOneRequiredWithoutAssignmentSubmissionsNestedInput
    grade?: GradeUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
    grade?: GradeUncheckedUpdateOneWithoutSubmissionNestedInput
  }

  export type AssignmentSubmissionUncheckedUpdateManyWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    textContent?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCountOutputTypeDefaultArgs instead
     */
    export type DepartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentCountOutputTypeDefaultArgs instead
     */
    export type AssignmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentSubmissionCountOutputTypeDefaultArgs instead
     */
    export type AssignmentSubmissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentSubmissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizCountOutputTypeDefaultArgs instead
     */
    export type QuizCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassSessionCountOutputTypeDefaultArgs instead
     */
    export type ClassSessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassSessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileAttachmentCountOutputTypeDefaultArgs instead
     */
    export type FileAttachmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileAttachmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserProfileDefaultArgs instead
     */
    export type UserProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserProfileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserActivityDefaultArgs instead
     */
    export type UserActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentDefaultArgs instead
     */
    export type DepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EnrollmentDefaultArgs instead
     */
    export type EnrollmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EnrollmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentDefaultArgs instead
     */
    export type AssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AssignmentSubmissionDefaultArgs instead
     */
    export type AssignmentSubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AssignmentSubmissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GradeDefaultArgs instead
     */
    export type GradeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GradeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseMaterialDefaultArgs instead
     */
    export type CourseMaterialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseMaterialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizDefaultArgs instead
     */
    export type QuizArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuizAttemptDefaultArgs instead
     */
    export type QuizAttemptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuizAttemptDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseAnnouncementDefaultArgs instead
     */
    export type CourseAnnouncementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseAnnouncementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassSessionDefaultArgs instead
     */
    export type ClassSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentAttendanceDefaultArgs instead
     */
    export type StudentAttendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentAttendanceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherCourseAssignmentDefaultArgs instead
     */
    export type TeacherCourseAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherCourseAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdvisoryAssignmentDefaultArgs instead
     */
    export type AdvisoryAssignmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdvisoryAssignmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileAttachmentDefaultArgs instead
     */
    export type FileAttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileAttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PageConfigurationDefaultArgs instead
     */
    export type PageConfigurationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PageConfigurationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemSettingDefaultArgs instead
     */
    export type SystemSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemSettingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}