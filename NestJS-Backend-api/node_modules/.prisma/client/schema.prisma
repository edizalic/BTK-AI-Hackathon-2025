// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= USER MANAGEMENT =============

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String // Hashed password
  role         UserRole
  isActive     Boolean  @default(true)
  avatar       String?

  // Teacher-specific fields
  isSupervisor Boolean @default(false) // Only applies to TEACHER role

  // Profile information
  profile UserProfile?

  // Academic relationships (if student)
  studentEnrollments    Enrollment[]           @relation("StudentEnrollments")
  assignmentSubmissions AssignmentSubmission[]
  quizAttempts          QuizAttempt[]
  grades                Grade[]
  attendances           StudentAttendance[]

  // Teaching relationships (BOTH teachers AND supervisors)
  taughtCourses       Course[]             @relation("CourseInstructor")
  advisoryStudents    UserProfile[]        @relation("AdvisoryTeacher")
  gradedAssignments   Grade[]              @relation("GradedBy")
  courseAnnouncements CourseAnnouncement[]
  createdAssignments  Assignment[]         @relation("AssignmentCreator")
  createdQuizzes      Quiz[]               @relation("QuizCreator")
  uploadedMaterials   CourseMaterial[]     @relation("MaterialUploader")

  // Supervisor-specific relationships (only supervisors)
  createdCourses            Course[]                  @relation("CourseCreator")
  registeredTeachers        User[]                    @relation("TeacherRegisteredBy")
  registeredStudents        User[]                    @relation("StudentRegisteredBy")
  assignedTeachers          TeacherCourseAssignment[] @relation("AssignedBy")
  teacherCourseAssignments  TeacherCourseAssignment[] @relation("TeacherCourseAssignments")
  assignedAdvisories        AdvisoryAssignment[]      @relation("AdvisoryAssignedBy")
  advisoryAssignments       AdvisoryAssignment[]      @relation("AdvisoryTeacher")
  studentAdvisoryAssignment AdvisoryAssignment?       @relation("AdvisoryStudent")
  managedDepartments        Department[]              @relation("DepartmentHead")

  // Registration tracking
  teacherRegisteredById String?
  teacherRegisteredBy   User?   @relation("TeacherRegisteredBy", fields: [teacherRegisteredById], references: [id])
  studentRegisteredById String?
  studentRegisteredBy   User?   @relation("StudentRegisteredBy", fields: [studentRegisteredById], references: [id])

  // Activity tracking
  userActivity UserActivity[]

  // File uploads
  uploadedFiles FileAttachment[] @relation("UploadedBy")

  // Audit logs
  auditLogs AuditLog[]

  // Enrollment management
  enrollmentsManaged Enrollment[] @relation("EnrolledBy")

  // Notifications
  notifications Notification[]

  // Sessions
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model UserProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Personal Information
  firstName   String
  lastName    String
  dateOfBirth DateTime?
  phone       String?

  // Address
  street  String?
  city    String?
  state   String?
  zipCode String?
  country String?

  // Academic Info (for students)
  studentId      String?
  grade          String?
  gpa            Float?
  enrollmentDate DateTime?
  graduationDate DateTime?
  major          String?
  minor          String?

  // Professional Info (for teachers) 
  employeeId     String?
  department     String?
  position       String?
  hireDate       DateTime?
  specialization String[] // Array of specializations
  officeLocation String?
  officeHours    String?

  // Advisory relationship (assigned by supervisor)
  advisoryTeacherId String?
  advisoryTeacher   User?   @relation("AdvisoryTeacher", fields: [advisoryTeacherId], references: [id])

  // Emergency Contact
  emergencyContactName         String?
  emergencyContactRelationship String?
  emergencyContactPhone        String?
  emergencyContactEmail        String?

  // User Preferences
  theme              ThemeMode  @default(SYSTEM)
  language           String     @default("en")
  timezone           String     @default("UTC")
  emailNotifications Boolean    @default(true)
  pushNotifications  Boolean    @default(true)
  smsNotifications   Boolean    @default(false)
  profileVisibility  Visibility @default(LIMITED)
  showEmail          Boolean    @default(false)
  showPhone          Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

model UserActivity {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  action    String // login, logout, view_course, submit_assignment, create_course, register_user, etc.
  details   Json? // Additional action details
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@map("user_activities")
}

// ============= PERMISSIONS & ROLES =============

model Permission {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  category    String? // course_management, user_management, system_admin, etc.

  // Role permissions
  rolePermissions RolePermission[]

  createdAt DateTime @default(now())

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  role         UserRole
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  // Additional constraints
  requiresSupervisor Boolean @default(false) // For teacher role permissions

  @@unique([role, permissionId])
  @@map("role_permissions")
}

// ============= ACADEMIC STRUCTURE =============

model Department {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique
  description String?

  // Department head (supervisor teacher)
  departmentHeadId String?
  departmentHead   User?   @relation("DepartmentHead", fields: [departmentHeadId], references: [id])

  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("departments")
}

model Course {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  description String
  credits     Int

  // Schedule
  scheduleDays String[] // ["monday", "wednesday", "friday"]
  startTime    String
  endTime      String
  location     String
  building     String?
  room         String?

  // Course creator (supervisor teacher)
  createdById String
  createdBy   User   @relation("CourseCreator", fields: [createdById], references: [id])

  // Assigned instructor (regular teacher or supervisor)
  instructorId String
  instructor   User   @relation("CourseInstructor", fields: [instructorId], references: [id])

  // Course details
  semester     String
  year         Int
  capacity     Int
  enrolled     Int          @default(0)
  status       CourseStatus @default(ACTIVE)
  category     String
  departmentId String
  department   Department   @relation(fields: [departmentId], references: [id])
  level        CourseLevel

  // Dates
  startDate          DateTime
  endDate            DateTime
  enrollmentDeadline DateTime?

  // Course content
  syllabusUrl String?
  studyPlan   Json? // JSON field to store study plan with week and description

  // Prerequisites (many-to-many self-relation)
  prerequisites   Course[] @relation("CoursePrerequisites")
  prerequisiteFor Course[] @relation("CoursePrerequisites")

  // Related entities
  enrollments        Enrollment[]
  assignments        Assignment[]
  courseMaterials    CourseMaterial[]
  quizzes            Quiz[]
  announcements      CourseAnnouncement[]
  classSessions      ClassSession[]
  grades             Grade[]
  teacherAssignments TeacherCourseAssignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model Enrollment {
  id        String @id @default(cuid())
  studentId String
  courseId  String

  student User   @relation("StudentEnrollments", fields: [studentId], references: [id], onDelete: Cascade)
  course  Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Enrollment managed by supervisor
  enrolledById String
  enrolledBy   User   @relation("EnrolledBy", fields: [enrolledById], references: [id])

  enrollmentDate DateTime         @default(now())
  status         EnrollmentStatus @default(ACTIVE)
  finalGrade     String?
  finalPoints    Float?

  // Progress tracking
  completed    Int    @default(0)
  total        Int    @default(0)
  currentGrade Float?
  attendance   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
  @@map("enrollments")
}

// ============= ASSIGNMENTS & GRADING =============

model Assignment {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Creator (can be teacher or supervisor)
  createdById String
  createdBy   User   @relation("AssignmentCreator", fields: [createdById], references: [id])

  title       String
  description String
  type        AssignmentType

  // Timing
  assignedDate DateTime @default(now())
  dueDate      DateTime

  // Grading
  maxPoints   Float
  isGroupWork Boolean @default(false)

  // Status
  status AssignmentStatus @default(ASSIGNED)

  // Related entities
  submissions AssignmentSubmission[]
  grades      Grade[]
  attachments FileAttachment[]       @relation("AssignmentAttachments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("assignments")
}

model AssignmentSubmission {
  id           String @id @default(cuid())
  assignmentId String
  studentId    String

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  student    User       @relation(fields: [studentId], references: [id], onDelete: Cascade)

  submittedAt DateTime @default(now())
  textContent String? // Text submission

  // File attachments
  files FileAttachment[] @relation("SubmissionFiles")

  // Grading
  grade Grade?

  @@unique([assignmentId, studentId])
  @@map("assignment_submissions")
}

model Grade {
  id           String  @id @default(cuid())
  studentId    String
  courseId     String?
  assignmentId String?
  submissionId String? @unique

  student    User                  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course     Course?               @relation(fields: [courseId], references: [id])
  assignment Assignment?           @relation(fields: [assignmentId], references: [id])
  submission AssignmentSubmission? @relation(fields: [submissionId], references: [id])

  // Grade information
  letterGrade String
  score       Float
  maxPoints   Float
  percentage  Float?

  // Grading details (done by teacher or supervisor)
  gradedById    String
  gradedBy      User     @relation("GradedBy", fields: [gradedById], references: [id])
  gradedDate    DateTime @default(now())
  gradingPeriod String?
  feedback      String?
  isExtraCredit Boolean  @default(false)
  weight        Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("grades")
}

// ============= COURSE CONTENT =============

model CourseMaterial {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Uploader (can be teacher or supervisor)
  uploadedById String
  uploadedBy   User   @relation("MaterialUploader", fields: [uploadedById], references: [id])

  title       String
  description String?
  type        MaterialType
  uploadDate  DateTime     @default(now())
  isRequired  Boolean      @default(false)

  // File reference
  fileId String?
  file   FileAttachment? @relation(fields: [fileId], references: [id])

  // External URL (for links, references)
  url String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_materials")
}

model Quiz {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  // Creator (can be teacher or supervisor)
  createdById String
  createdBy   User   @relation("QuizCreator", fields: [createdById], references: [id])

  title           String
  description     String
  duration        String // "30 minutes", "1 hour"
  totalQuestions  Int
  maxPoints       Float
  dueDate         DateTime
  isTimed         Boolean  @default(false)
  attemptsAllowed Int      @default(1)

  // Store questions with correct answers (server-side only)
  questionsData Json // Contains questions with correct answers

  // Quiz attempts
  attempts QuizAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("quizzes")
}

model QuizAttempt {
  id        String @id @default(cuid())
  quizId    String
  studentId String

  quiz    Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)

  startedAt   DateTime  @default(now())
  submittedAt DateTime?
  score       Float?
  maxPoints   Float?
  answers     Json // Store quiz answers as JSON

  @@map("quiz_attempts")
}

model CourseAnnouncement {
  id       String @id @default(cuid())
  courseId String
  authorId String

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  author User   @relation(fields: [authorId], references: [id])

  title       String
  content     String
  priority    AnnouncementPriority @default(LOW)
  isImportant Boolean              @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course_announcements")
}

model ClassSession {
  id       String @id @default(cuid())
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  date      DateTime
  topic     String
  location  String
  notes     String?
  cancelled Boolean  @default(false)

  // Attendance tracking
  attendances StudentAttendance[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("class_sessions")
}

model StudentAttendance {
  id        String @id @default(cuid())
  sessionId String
  studentId String

  session ClassSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  student User         @relation(fields: [studentId], references: [id], onDelete: Cascade)

  status AttendanceStatus @default(PRESENT)
  notes  String?

  createdAt DateTime @default(now())

  @@unique([sessionId, studentId])
  @@map("student_attendance")
}

// ============= TEACHER-COURSE ASSIGNMENTS =============

model TeacherCourseAssignment {
  id           String @id @default(cuid())
  teacherId    String
  courseId     String
  assignedById String // Supervisor who made the assignment

  teacher    User   @relation("TeacherCourseAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  course     Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  assignedBy User   @relation("AssignedBy", fields: [assignedById], references: [id])

  assignedDate DateTime @default(now())
  isActive     Boolean  @default(true)
  notes        String?

  @@unique([teacherId, courseId])
  @@map("teacher_course_assignments")
}

// ============= ADVISORY ASSIGNMENTS =============

model AdvisoryAssignment {
  id                String @id @default(cuid())
  studentId         String
  advisoryTeacherId String
  assignedById      String // Supervisor who made the assignment

  student         User @relation("AdvisoryStudent", fields: [studentId], references: [id], onDelete: Cascade)
  advisoryTeacher User @relation("AdvisoryTeacher", fields: [advisoryTeacherId], references: [id])
  assignedBy      User @relation("AdvisoryAssignedBy", fields: [assignedById], references: [id])

  assignedDate DateTime @default(now())
  isActive     Boolean  @default(true)
  notes        String?

  @@unique([studentId]) // A student can only have one active advisory teacher
  @@map("advisory_assignments")
}

// ============= FILE MANAGEMENT =============

model FileAttachment {
  id           String @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  fileSize     BigInt
  path         String // File system path or cloud storage URL

  // Upload metadata
  uploadedById String
  uploadedBy   User   @relation("UploadedBy", fields: [uploadedById], references: [id])

  // Relations
  courseMaterials       CourseMaterial[]
  assignmentAttachments Assignment[]           @relation("AssignmentAttachments")
  submissionFiles       AssignmentSubmission[] @relation("SubmissionFiles")

  createdAt DateTime @default(now())

  @@map("file_attachments")
}

// ============= DYNAMIC PAGE SYSTEM =============

model PageConfiguration {
  id          String    @id @default(cuid())
  title       String
  description String?
  userType    UserRole?
  layoutType  String    @default("dashboard")
  layoutClass String?

  // Page sections as JSON
  sections Json

  // Metadata
  requiresAuth       Boolean  @default(true)
  permissions        String[] // Array of required permissions
  requiresSupervisor Boolean  @default(false) // For teacher-only pages that need supervisor access

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("page_configurations")
}

// ============= NOTIFICATIONS =============

model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title    String
  message  String
  type     NotificationType
  priority NotificationPriority @default(NORMAL)

  // Status
  isRead Boolean   @default(false)
  readAt DateTime?

  // Related entities
  courseId     String?
  assignmentId String?
  gradeId      String?

  // Metadata
  metadata Json?

  createdAt DateTime @default(now())

  @@map("notifications")
}

// ============= SYSTEM ADMINISTRATION =============

model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

model AuditLog {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  action     String // CREATE_COURSE, REGISTER_USER, ASSIGN_TEACHER, ASSIGN_ADVISORY, etc.
  resource   String // users, courses, assignments, etc.
  resourceId String?

  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())

  @@map("audit_logs")
}

// ============= SESSIONS & AUTHENTICATION =============

model Session {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)

  // Session metadata
  ipAddress String?
  userAgent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// ============= ENUMS =============

enum UserRole {
  STUDENT // Can view courses, submit assignments, view grades
  TEACHER // Can teach assigned courses, grade assignments
  SUPERVISOR_TEACHER // Can do everything teachers can + create courses, register users, assign teachers/advisors
  ADMIN // Can register supervisor teachers, system-wide management
}

enum ThemeMode {
  LIGHT
  DARK
  SYSTEM
}

enum Visibility {
  PUBLIC
  PRIVATE
  LIMITED
}

enum CourseStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  UPCOMING
  DRAFT
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  DROPPED
  PENDING
  WITHDRAWN
}

enum AssignmentType {
  HOMEWORK
  PROJECT
  ESSAY
  LAB
  QUIZ
  EXAM
  PRESENTATION
  DISCUSSION
  PARTICIPATION
}

enum AssignmentStatus {
  DRAFT
  ASSIGNED
  SUBMITTED
  GRADED
  OVERDUE
  CANCELLED
}

enum MaterialType {
  SYLLABUS
  SLIDES
  HANDOUT
  READING
  REFERENCE
  VIDEO
  AUDIO
  LINK
  SOFTWARE
  OTHER
}

enum AnnouncementPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  PARTIAL
}

enum NotificationType {
  ASSIGNMENT_DUE
  GRADE_POSTED
  COURSE_ANNOUNCEMENT
  ENROLLMENT_CONFIRMED
  SYSTEM_ALERT
  REMINDER
  MESSAGE
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}
