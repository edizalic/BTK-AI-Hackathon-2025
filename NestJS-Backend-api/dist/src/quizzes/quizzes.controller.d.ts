import { QuizzesService } from './quizzes.service';
import { QuizAttemptsService } from './quiz-attempts.service';
import { CreateQuizDto } from './dto/create-quiz.dto';
import { UpdateQuizDto } from './dto/update-quiz.dto';
import { SubmitQuizDto } from './dto/submit-quiz.dto';
import { UserWithProfile } from '../users/interfaces/user-with-profile.interface';
export declare class QuizzesController {
    private readonly quizzesService;
    private readonly quizAttemptsService;
    constructor(quizzesService: QuizzesService, quizAttemptsService: QuizAttemptsService);
    create(createQuizDto: CreateQuizDto, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        title: string;
        createdById: string;
        courseId: string;
        dueDate: Date;
        maxPoints: number;
        duration: string;
        isTimed: boolean;
        attemptsAllowed: number;
        totalQuestions: number;
        questionsData: import("@prisma/client/runtime/library").JsonValue;
    }>;
    findByCourse(courseId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        title: string;
        createdById: string;
        courseId: string;
        dueDate: Date;
        maxPoints: number;
        duration: string;
        isTimed: boolean;
        attemptsAllowed: number;
        totalQuestions: number;
        questionsData: import("@prisma/client/runtime/library").JsonValue;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        title: string;
        createdById: string;
        courseId: string;
        dueDate: Date;
        maxPoints: number;
        duration: string;
        isTimed: boolean;
        attemptsAllowed: number;
        totalQuestions: number;
        questionsData: import("@prisma/client/runtime/library").JsonValue;
    }>;
    update(id: string, updateQuizDto: UpdateQuizDto, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        title: string;
        createdById: string;
        courseId: string;
        dueDate: Date;
        maxPoints: number;
        duration: string;
        isTimed: boolean;
        attemptsAllowed: number;
        totalQuestions: number;
        questionsData: import("@prisma/client/runtime/library").JsonValue;
    }>;
    remove(id: string, user: UserWithProfile): Promise<void>;
    getAttempts(quizId: string, studentId?: string): Promise<any[]>;
    getQuizForStudent(id: string, user: UserWithProfile): Promise<any>;
    getQuizForTeacher(id: string, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        description: string;
        title: string;
        createdById: string;
        courseId: string;
        dueDate: Date;
        maxPoints: number;
        duration: string;
        isTimed: boolean;
        attemptsAllowed: number;
        totalQuestions: number;
        questionsData: import("@prisma/client/runtime/library").JsonValue;
    }>;
    submitQuiz(quizId: string, submitDto: SubmitQuizDto, user: UserWithProfile): Promise<{
        score: number;
        maxPoints: number;
        results: any[];
    }>;
    getStudentWrongAnswers(studentId: string, user: UserWithProfile): Promise<any[]>;
    getStudentAllAttempts(studentId: string): Promise<any[]>;
}
