import { CoursesService } from './courses.service';
import { CreateCourseDto } from './dto/create-course.dto';
import { CreateStudyPlanDto, UpdateStudyPlanDto } from './dto/study-plan.dto';
import { UserWithProfile } from '../users/interfaces/user-with-profile.interface';
export declare class CoursesController {
    private readonly coursesService;
    constructor(coursesService: CoursesService);
    createCourse(createCourseDto: CreateCourseDto, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }>;
    findAll(filters: any): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }>;
    getCoursesByInstructor(teacherId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }[]>;
    getCoursesByStudent(studentId: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }[]>;
    createStudyPlan(courseId: string, createStudyPlanDto: CreateStudyPlanDto, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }>;
    getStudyPlan(courseId: string): Promise<any>;
    updateStudyPlan(courseId: string, updateStudyPlanDto: UpdateStudyPlanDto, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }>;
    deleteStudyPlan(courseId: string, user: UserWithProfile): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        level: import(".prisma/client").$Enums.CourseLevel;
        description: string;
        code: string;
        credits: number;
        scheduleDays: string[];
        startTime: string;
        endTime: string;
        location: string;
        building: string | null;
        room: string | null;
        instructorId: string;
        semester: string;
        year: number;
        capacity: number;
        category: string;
        departmentId: string;
        startDate: Date;
        endDate: Date;
        enrollmentDeadline: Date | null;
        studyPlan: import("@prisma/client/runtime/library").JsonValue | null;
        createdById: string;
        enrolled: number;
        status: import(".prisma/client").$Enums.CourseStatus;
        syllabusUrl: string | null;
    }>;
}
